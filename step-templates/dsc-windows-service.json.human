{
  "Id": "1cdf63ce-50c8-45a8-cce2-f6ca2d6d617b",
  "Name": "DSC Windows Service",
  "Description": "Starts/stops one or more services asynchronously, and then waits for them to align to the specified state",
  "ActionType": "Octopus.Script",
  "Version": 15,
  "Properties": {
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptBody": "
    $ServicesToManage = $OctopusParameters['Services']
    $ServicesToIgnore = $OctopusParameters['ServicesToIgnore']
    $TimeoutSeconds = $OctopusParameters['TimeoutSeconds']
    $DesiredState = $OctopusParameters['DesiredState']

    # Gather information about the list of services
    $services_status = @{}

    # For each \"service to manage\" or wildcard specified ...
    $ServicesToManage -split \",\" |% `
    {
        $service = $_
    
        # ... retrieve all the services that match that name or wildcard ...
        $service_states = Get-Service |? { $_.Name -match $service }
    
        # ... and add them into an array; we use a key/value array so that services only get added to the array once, even if they are
        # matched by multiple wildcard specifications
        $service_states |% { $services_status[$_.Name] = $_.Status }
    }
    
    # For each \"service to ignore\" or wildcard specified ...
    $ServicesToIgnore -split \",\" |% `
    {
        $service = $_
        
        # Copy the keys within services_status, since we will need to change services_status as we enumerate them
        $keys = @()
        $services_status.Keys |% { $keys += $_ }
        
        $keys |% `
        {
           $key = $_
 
           if ($key -match $service -and $service -match \"[a-z]+\")
           {
                $services_status.Remove($_)
           }
        }
    }

    Write-Host \"Matched the following set of services, along with their current status:\"
    $services_status

    # Now act as required to bring the services to the desired configuration state
    [DateTime]$startTime = [DateTime]::Now
    
    # State to pass to sc
    $state_type = if ($DesiredState -match \"Stopped\") { \"stop\" } else { \"start\" }

\t$unaligned_services = ($services_status.Keys |? { $services_status[$_] -notmatch $DesiredState })
\t# Attempt to align the remaining services
\t$unaligned_services |% `
\t{ 
\t\tWrite-Host \"Attempting to $state_type service: $_\"
\t\tStart-Process -FilePath \"cmd\" -ArgumentList \"/c sc.exe $state_type `\"$_`\"\"
\t}\t
   
   while ($startTime.AddSeconds($TimeoutSeconds) -gt [DateTime]::Now)
    {
\t\t# Attempt to align the remaining services
\t\t$unaligned_services |% `
\t\t{ 
\t\t\tWrite-Host \"Attempting to $state_type service: $_\"
\t\t\t$services_status[$_] = Get-Service $_ | Select-Object -Property \"Status\"
\t\t}\t
\t\t$unaligned_services = ($services_status.Keys |? { $services_status[$_] -notmatch $DesiredState })
\t\tWrite-Host \"$([DateTime]::Now): $($unaligned_services.Count) services of $($services_status.Count) not yet at status: $DesiredState\"
\t\t
        if ($unaligned_services.Count -eq 0)
        {
            Write-Host \"All services now at desired state; exiting\"
            exit 0
        }

          
        # Pause for a second
        [System.Threading.Thread]::Sleep(1000)
    }

    throw \"Error: not all services reached the desired state within the specified timeframe: $unaligned_services\"


"
  },
  "SensitiveProperties": {},
  "Parameters": [
    {
      "Name": "Services",
      "Label": "Services to align",
      "HelpText": "A comma delimited list of services or wildcards (eg. \"Sky\") to align",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "ServicesToIgnore",
      "Label": "Services to ignore",
      "HelpText": "A comma delimited list of services or wildcards (eg. \"Sky\") to ignore",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "DesiredState",
      "Label": "Desired state",
      "HelpText": "The desired state of the service/s. Specify either \"Started\" or \"Stopped\"",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "Running|Started
Stopped|Stopped"
      }
    },
    {
      "Name": "TimeoutSeconds",
      "Label": "Timeout in seconds",
      "HelpText": "The number of seconds to wait for the service/s to align before timing out and throwing an exception",
      "DefaultValue": "300",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LastModifiedOn": "2017-06-20T14:00:00.000+00:00",
  "LastModifiedBy": "dunedinsoftware",
  "$Meta": {
    "ExportedAt": "2017-06-20T14:35:09.389Z",
    "OctopusVersion": "3.1.5",
    "Type": "ActionTemplate"
  },
  "Category": "windows"
}
