{
  "Id": "4ff62eff-f615-453e-9a14-ca7bf67cb586",
  "Name": "Redgate - SQL Clone, Create Image",
  "Description": "Creates a database image with [Redgate SQL Clone](https://www.red-gate.com/products/dba/sql-clone/index).

Requires SQL Clone.

*Version date: 16th May 2019*",
  "ActionType": "Octopus.Script",
  "Version": 1,
  "CommunityActionTemplateId": null,
  "Packages": [],
  "Properties": {
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptBody": "$ErrorActionPreference = 'Stop'

# The code for this step template is largely a copy/paste job from the
# Azure DevOps Services step template which is maintained by Redgate:
# https://github.com/red-gate/SqlCloneVSTSExtension/blob/master/ImageTask/SQLCloneImageTask.ps1
# The code was copied and adapted on 16th May 2019.

Write-Verbose \"cloneServer is $cloneServer\"
Write-Verbose \"cloneUser is $cloneUser\"
Write-Verbose \"clonePassword is $clonePassword\"
Write-Verbose \"sourceType is $sourceType\"
Write-Verbose \"imageName is $imageName\"
Write-Verbose \"imageLocation is $imageLocation\"
Write-Verbose \"sourceInstance is $sourceInstance\"
Write-Verbose \"sourceDatabase is $sourceDatabase\"
Write-Verbose \"sourceFileNames is $sourceFileNames\"
Write-Verbose \"sourceFilePassword is $sourceFilePassword\"
Write-Verbose \"modificationScriptFiles is $modificationScriptFiles\"

Write-Debug \"Entering script SQLCloneImageTask.ps1\"

# This line is broken: Import-Module \"$PSScriptRoot\\Modules\\RedGate.SQLClone.PowerShell.dll\"

if($cloneUser){
    $password = ConvertTo-SecureString -String $clonePassword -AsPlainText -Force
    $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $cloneUser,$password

}
Connect-SqlClone -ServerUrl $cloneServer -Credential $credential
Write-Output \"Connected to SQL Clone server\"

    try
    {
        $cloneImageLocation = Get-SqlCloneImageLocation $imageLocation
        Write-Output \"Found image location\"
    }
    catch
    {
        $imageLocations = Get-SqlCloneImageLocation
        $imageLocationNames = \"`n\"
        Foreach ($cImageLocation in $imageLocations)
        {
            $imageLocationNames += $cImageLocation.Path + \"`n\"
        }
        $message = 'SQL Clone image location \"' + $imageLocation + '\"  has not been added to SQL Clone, available locations:' + $imageLocationNames
        write-error $message
        exit 1
    }

    $sqlServerParts = $sourceInstance.Split('\\', [System.StringSplitOptions]::RemoveEmptyEntries)
    if ($sqlServerParts.Count -ge 3)
    {
        write-error 'SQL Server instance ' + $sourceInstance + ' has not been recognised, if specifying a named instance please use \"machine\\instance\"'
        exit 1
    }
    $cloneSqlServerHost = $sqlServerParts[0]
    $instanceName = ''
    if ($sqlServerParts.Count -ge 2)
    {
        $instanceName = $sqlServerParts[1]
    }
    
    try
    {
        $instance = Get-SqlCloneSqlServerInstance -MachineName $cloneSqlServerHost -InstanceName $instanceName
        Write-Output \"Found SQL Server instance\"
    }
    catch
    {
        $instances = Get-SqlCloneSqlServerInstance
        $instanceNames = \"`n\"
        Foreach ($cInstance in $instances)
        {
            $instanceNames += $cInstance.Name + \"`n\"
        }
        $message = 'SQL Server instance \"' + $sourceInstance + '\"  has not been added to SQL Clone, available instances:' + $instanceNames
        write-error $message
        exit 1
    }

    $modificationScripts = @()
    if($modificationScriptFiles){
        $modificationFiles = $modificationScriptFiles.Split(';', [System.StringSplitOptions]::RemoveEmptyEntries)
            
        Foreach ($modificationScriptFile in $modificationFiles)
        {
            if ($modificationScriptFile -Like \"*.sql\")
            {
                $modificationScripts += New-SqlCloneSqlScript -Path $modificationScriptFile
            }

            if ($modificationScriptFile -Like \"*.dmsmaskset\")
            {
                $modificationScripts += New-SqlCloneMask -Path $modificationScriptFile
            }
        }
    }
    
    if ($sourceType -eq 'database')
    {
        Write-Output \"Source type = database\"
        Write-Output \"Creating image\"
        $NewImage = New-SqlCloneImage -Name $imageName -SqlServerInstance $instance -DatabaseName $sourceDatabase -Destination $cloneImageLocation -Modifications $modificationScripts | Wait-SqlCloneOperation    
        Write-Output \"Finished creating image\"
    }
    else
    {
        Write-Output \"Source type = backup\"
        $backupFiles = $sourceFileNames.Split(';', [System.StringSplitOptions]::RemoveEmptyEntries)
        Write-Output \"Creating image from backup\"
        if($sourceFilePassword)
        {
            $NewImage = New-SqlCloneImage -Name $imageName -SqlServerInstance $instance -BackupFileName $backupFiles -BackupPassword $sourceFilePassword -Destination $cloneImageLocation -Modifications $modificationScripts | Wait-SqlCloneOperation
        }
        else
        {
            $NewImage = New-SqlCloneImage -Name $imageName -SqlServerInstance $instance -BackupFileName $backupFiles -Destination $cloneImageLocation -Modifications $modificationScripts | Wait-SqlCloneOperation
        }
        Write-Output \"Finished creating image from backup\"        
    }

    

Write-Debug \"Leaving script SQLCloneImageTask.ps1\"
"
  },
  "Parameters": [
    {
      "Id": "8c140a4c-65a2-4341-a604-73d14775b3a0",
      "Name": "cloneServer",
      "Label": "SQL Clone Server (required)",
      "HelpText": "The URL for your SQL Clone server (e.g. http://sql-clone.example.com:14145)",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "e5ac1d04-b8a5-440e-ba69-a5d66a53abba",
      "Name": "cloneUser",
      "Label": "SQL Clone User (optional)",
      "HelpText": "User account to access SQL Clone. (If left blank Octopus tentacle account will be used.)",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "5f6288f2-57c9-4a11-91f2-b0c2e3cb9ccd",
      "Name": "clonePassword",
      "Label": "SQL Clone Password (optional)",
      "HelpText": "User account to access SQL Clone. (If left blank Octopus tentacle account will be used.)",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Id": "ee5286d3-f233-410c-92ab-36743f8743e7",
      "Name": "imageName",
      "Label": "Image Name (required)",
      "HelpText": "The name of your database image.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "0edb1e1f-0c27-428b-9ff0-7c76faf1369e",
      "Name": "imageLocation",
      "Label": "Image Location (required)",
      "HelpText": "Images need to have a UNC (network share) path destination in order to be shared with other machines. For example: \\\\servername\\fileshare\\images",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "aa803a9d-ab55-4e36-969c-3b0e3637d36e",
      "Name": "sourceInstance",
      "Label": "Source SQL Server Instance (required)",
      "HelpText": "For example: MYSERVER\\MYINSTANCE",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "39c29a4a-f483-4b96-bf08-238bb677835d",
      "Name": "sourceType",
      "Label": "Image Source Type (required)",
      "HelpText": "Images can be created from a backup file (.bak or .sqb) or from a SQL Server database.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "database|SQL Server Database
backup|Backup file(s)"
      }
    },
    {
      "Id": "5e9f4d95-4776-4a0e-8245-05d645bd0997",
      "Name": "sourceDatabase",
      "Label": "Source Database (required if Source Type is SQL Server Database)",
      "HelpText": "The database from which to create the image.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "62da0567-35f5-4c3f-ac9e-61b75a399053",
      "Name": "sourceFileNames",
      "Label": "Source File Names (required if Source Type is Backup File(s))",
      "HelpText": "For striped and/or differential backups, separate multiple file paths with ;",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "ab892024-c4b5-46c2-9434-2ad150e3e014",
      "Name": "sourceFilePassword",
      "Label": "Source File Password (optional)",
      "HelpText": "Source backup file password.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Id": "a758e9de-05c6-4879-8541-d7f73215fe87",
      "Name": "modificationScriptFiles",
      "Label": "Modification Script Files (optional)",
      "HelpText": "SQL scripts and/or Data Masker masking set files (Data Masker must be installed on the clone agent machine), separate multiple file paths with ;",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LastModifiedOn": "2019-05-16T11:37:47.360Z",
  "LastModifiedBy": "alex-yates",
  "$Meta": {
    "ExportedAt": "2019-05-16T11:37:47.360Z",
    "OctopusVersion": "2019.2.7",
    "Type": "ActionTemplate"
  },
  "Category": "redgate"
}
