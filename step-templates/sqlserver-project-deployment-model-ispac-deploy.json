{
  "Id": "efe39ac7-3ab8-4f99-bfdc-aba342278d1a",
  "Name": "SQL Server - Project Deployment Model - Deploy ISPAC",
  "Description": "This is to deploy ssis packages using 'project deployment model' (ISPAC file )",
  "ActionType": "Octopus.Script",
  "Version": 0,
  "Properties": {
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.ScriptBody": "#################################################################################################\r\n# Change source and destination properties\r\n#################################################################################################\r\n\r\n# Source\r\n$IspacFilePath = \"#{ISPAC_FILE_PATH}\"\r\n \r\n# Destination\r\n$SsisServer =   $OctopusParameters['deploy.dts.server'] \r\n$FolderName = $OctopusParameters['SSIS_Folder']\r\n$ProjectName = $OctopusParameters['SSIS_Project']\r\n\r\n# Environment\r\n$EnvironmentName = $OctopusParameters['Environment_Name']  \r\n$EnvironmentFolderName = $OctopusParameters['SSIS_Folder']\r\n\r\n\r\n# Replace empty projectname with filename\r\nif (-not $ProjectName)\r\n{\r\n  $ProjectName = [system.io.path]::GetFileNameWithoutExtension($IspacFilePath)\r\n}\r\n# Replace empty Environment folder with project folder\r\nif (-not $EnvironmentFolderName)\r\n{\r\n  $EnvironmentFolderName = $FolderName\r\n}\r\n\r\nclear\r\nWrite-Host \"========================================================================================================================================================\"\r\nWrite-Host \"==                                                         Used parameters                                                                            ==\"\r\nWrite-Host \"========================================================================================================================================================\"\r\nWrite-Host \"Ispac File Path        : \" $IspacFilePath\r\nWrite-Host \"SSIS Server            : \" $SsisServer\r\nWrite-Host \"Project Folder Path    : \" $FolderName\r\nWrite-Host \"Project Name           : \" $ProjectName\r\nWrite-Host \"Environment Name       : \" $EnvironmentName\r\nWrite-Host \"Environment Folder Path: \" $EnvironmentFolderName\r\nWrite-Host \"========================================================================================================================================================\"\r\nWrite-Host \"\"\r\n\r\n###########################\r\n########## ISPAC ##########\r\n###########################\r\n# Check if ispac file exists\r\nif (-Not (Test-Path $IspacFilePath))\r\n{\r\n    Throw  [System.IO.FileNotFoundException] \"Ispac file $IspacFilePath doesn't exists!\"\r\n}\r\nelse\r\n{\r\n    $IspacFileName = split-path $IspacFilePath -leaf\r\n    Write-Host \"Ispac file\" $IspacFileName \"found\"\r\n}\r\n\r\n\r\n############################\r\n########## SERVER ##########\r\n############################\r\n# Load the Integration Services Assembly\r\nWrite-Host \"Connecting to server $SsisServer \"\r\n$SsisNamespace = \"Microsoft.SqlServer.Management.IntegrationServices\"\r\n[System.Reflection.Assembly]::LoadWithPartialName($SsisNamespace) | Out-Null;\r\n\r\n# Create a connection to the server\r\n$SqlConnectionstring = \"Data Source=\" + $SsisServer + \";Initial Catalog=master;Integrated Security=SSPI;\"\r\n$SqlConnection = New-Object System.Data.SqlClient.SqlConnection $SqlConnectionstring\r\n\r\n# Create the Integration Services object\r\n$IntegrationServices = New-Object $SsisNamespace\".IntegrationServices\" $SqlConnection\r\n\r\n# Check if connection succeeded\r\nif (-not $IntegrationServices)\r\n{\r\n  Throw  [System.Exception] \"Failed to connect to server $SsisServer \"\r\n}\r\nelse\r\n{\r\n   Write-Host \"Connected to server\" $SsisServer\r\n}\r\n\r\n\r\n#############################\r\n########## CATALOG ##########\r\n#############################\r\n# Create object for SSISDB Catalog\r\n$Catalog = $IntegrationServices.Catalogs[\"SSISDB\"]\r\n\r\n# Check if the SSISDB Catalog exists\r\nif (-not $Catalog)\r\n{\r\n    # Catalog doesn't exists. The user should create it manually.\r\n    # It is possible to create it, but that shouldn't be part of\r\n    # deployment of packages.\r\n    Throw  [System.Exception] \"SSISDB catalog doesn't exist. Create it manually!\"\r\n}\r\nelse\r\n{\r\n    Write-Host \"Catalog SSISDB found\"\r\n}\r\n\r\n\r\n############################\r\n########## FOLDER ##########\r\n############################\r\n# Create object to the (new) folder\r\n$Folder = $Catalog.Folders[$FolderName]\r\n\r\n# Check if folder already exists\r\nif (-not $Folder)\r\n{\r\n    # Folder doesn't exists, so create the new folder.\r\n    Write-Host \"Creating new folder\" $FolderName\r\n    $Folder = New-Object $SsisNamespace\".CatalogFolder\" ($Catalog, $FolderName, $FolderName)\r\n    $Folder.Create()\r\n}\r\nelse\r\n{\r\n    Write-Host \"Folder\" $FolderName \"found\"\r\n}\r\n\r\n\r\n#############################\r\n########## PROJECT ##########\r\n#############################\r\n# Deploying project to folder\r\nif($Folder.Projects.Contains($ProjectName)) {\r\n    Write-Host \"Deploying\" $ProjectName \"to\" $FolderName \"(REPLACE)\"\r\n}\r\nelse\r\n{\r\n    Write-Host \"Deploying\" $ProjectName \"to\" $FolderName \"(NEW)\"\r\n}\r\n# Reading ispac file as binary\r\n[byte[]] $IspacFile = [System.IO.File]::ReadAllBytes($IspacFilePath)\r\n$Folder.DeployProject($ProjectName, $IspacFile)\r\n$Project = $Folder.Projects[$ProjectName]\r\nif (-not $Project)\r\n{\r\n    # Something went wrong with the deployment\r\n    # Don't continue with the rest of the script\r\n    return \"\"\r\n}\r\n\r\n\r\n#################################\r\n########## ENVIRONMENT ##########\r\n#################################\r\n# Check if environment name is filled\r\nif (-not $EnvironmentName)\r\n{\r\n    # Kill connection to SSIS\r\n    $IntegrationServices = $null \r\n\r\n    # Stop the deployment script\r\n    Return \"Ready deploying $IspacFileName without adding environment references\"\r\n}\r\n\r\n# Create object to the (new) folder\r\n$EnvironmentFolder = $Catalog.Folders[$EnvironmentFolderName]\r\n\r\n# Check if environment folder exists\r\nif (-not $EnvironmentFolder)\r\n{\r\n  Throw  [System.Exception] \"Environment folder $EnvironmentFolderName doesn't exist\"\r\n}\r\n\r\n# Check if environment exists\r\nif(-not $EnvironmentFolder.Environments.Contains($EnvironmentName))\r\n{\r\n  Throw  [System.Exception] \"Environment $EnvironmentName doesn't exist in $EnvironmentFolderName \"\r\n}\r\nelse\r\n{\r\n    # Create object for the environment\r\n    $Environment = $Catalog.Folders[$EnvironmentFolderName].Environments[$EnvironmentName]\r\n\r\n    if ($Project.References.Contains($EnvironmentName, $EnvironmentFolderName))\r\n    {\r\n        Write-Host \"Reference to\" $EnvironmentName \"found\"\r\n    }\r\n    else\r\n    {\r\n        Write-Host \"Adding reference to\" $EnvironmentName\r\n        $Project.References.Add($EnvironmentName, $EnvironmentFolderName)\r\n        $Project.Alter() \r\n    }\r\n}\r\n\r\n\r\n########################################\r\n########## PROJECT PARAMETERS ##########\r\n########################################\r\n$ParameterCount = 0\r\n# Loop through all project parameters\r\nforeach ($Parameter in $Project.Parameters)\r\n{\r\n    # Get parameter name and check if it exists in the environment\r\n    $ParameterName = $Parameter.Name\r\n    if ($ParameterName.StartsWith(\"CM.\",\"CurrentCultureIgnoreCase\")) \r\n    { \r\n        # Ignoring connection managers \r\n    } \r\n    elseif ($ParameterName.StartsWith(\"INTERN_\",\"CurrentCultureIgnoreCase\")) \r\n    { \r\n        # Optional:\r\n        # Internal parameters are ignored (where name starts with INTERN_) \r\n        Write-Host \"Ignoring Project parameter\" $ParameterName \" (internal use only)\" \r\n    } \r\n    elseif ($Environment.Variables.Contains($Parameter.Name))\r\n    {\r\n        $ParameterCount = $ParameterCount + 1\r\n        Write-Host \"Project parameter\" $ParameterName \"connected to environment\"\r\n        $Project.Parameters[$Parameter.Name].Set([Microsoft.SqlServer.Management.IntegrationServices.ParameterInfo+ParameterValueType]::Referenced, $Parameter.Name)\r\n        $Project.Alter()\r\n    }\r\n    else\r\n    {\r\n        # Variable with the name of the project parameter is not found in the environment\r\n        # Throw an exeception or remove next line to ignore parameter\r\n        Throw  [System.Exception]  \"Project parameter $ParameterName doesn't exist in environment\"\r\n    }\r\n}\r\nWrite-Host \"Number of project parameters mapped:\" $ParameterCount\r\n\r\n\r\n########################################\r\n########## PACKAGE PARAMETERS ##########\r\n########################################\r\n$ParameterCount = 0\r\n# Loop through all packages\r\nforeach ($Package in $Project.Packages)\r\n{\r\n    # Loop through all package parameters\r\n    foreach ($Parameter in $Package.Parameters)\r\n    {\r\n        # Get parameter name and check if it exists in the environment\r\n        $PackageName = $Package.Name\r\n        $ParameterName = $Parameter.Name \r\n        if ($ParameterName.StartsWith(\"CM.\",\"CurrentCultureIgnoreCase\")) \r\n        { \r\n            # Ignoring connection managers \r\n        } \r\n        elseif ($ParameterName.StartsWith(\"INTERN_\",\"CurrentCultureIgnoreCase\")) \r\n        { \r\n            # Optional:\r\n            # Internal parameters are ignored (where name starts with INTERN_) \r\n            Write-Host \"Ignoring Package parameter\" $ParameterName \" (internal use only)\" \r\n        } \r\n        elseif ($Environment.Variables.Contains($Parameter.Name))\r\n        {\r\n            $ParameterCount = $ParameterCount + 1\r\n            Write-Host \"Package parameter\" $ParameterName \"from package\" $PackageName \"connected to environment\"\r\n            $Package.Parameters[$Parameter.Name].Set([Microsoft.SqlServer.Management.IntegrationServices.ParameterInfo+ParameterValueType]::Referenced, $Parameter.Name)\r\n            $Package.Alter()\r\n        }\r\n        else\r\n        {\r\n            # Variable with the name of the package parameter is not found in the environment\r\n            # Throw an exeception or remove next line to ignore parameter\r\n            Throw  [System.Exception]  \"Package parameter $ParameterName from package $PackageName doesn't exist in environment\"\r\n        }\r\n    }\r\n}\r\nWrite-Host \"Number of package parameters mapped:\" $ParameterCount\r\n\r\n\r\n###########################\r\n########## READY ##########\r\n###########################\r\n# Kill connection to SSIS\r\n$IntegrationServices = $null \r\n\r\n\r\nReturn \"Ready deploying $IspacFileName \"",
    "Octopus.Action.Script.ScriptFileName": null,
    "Octopus.Action.Package.NuGetFeedId": null,
    "Octopus.Action.Package.NuGetPackageId": null
  },
  "Parameters": [
    {
      "Name": "ISPAC_FILE_PATH",
      "Label": "Ispac file path",
      "HelpText": "Once the SSIS project is compiled \"ispac\" file gets created, this variable must hold the path of the ispac file.",
      "DefaultValue": null,
      "DisplaySettings": {}
    },
    {
      "Name": "deploy.dts.server",
      "Label": "SSIS Server name",
      "HelpText": "SSIS Server name where this ssis packages must be deployed.",
      "DefaultValue": null,
      "DisplaySettings": {}
    },
    {
      "Name": "SSIS_Folder",
      "Label": "SSIS Folder name",
      "HelpText": "SSIS folder name which is created under SSISDB",
      "DefaultValue": null,
      "DisplaySettings": {}
    },
    {
      "Name": "SSIS_Project",
      "Label": "Project Name",
      "HelpText": "SSIS Project name - this is the physical folder name where the OD is referring to .",
      "DefaultValue": null,
      "DisplaySettings": {}
    },
    {
      "Name": "Environment_Name",
      "Label": "Environment Name",
      "HelpText": "This is the environment name where variables exists.",
      "DefaultValue": null,
      "DisplaySettings": {}
    }
  ],
  "LastModifiedBy": "dorasaa",
  "$Meta": {
    "ExportedAt": "2016-07-20T10:15:20.241+00:00",
    "OctopusVersion": "3.3.10",
    "Type": "ActionTemplate"
  },
  "Category": "sql"
}