{
  "Id": "a24c6354-5612-4e2c-a0ff-9b5a329fc0e9",
  "Name": "Git - Create Pull Request",
  "Description": "Create a Pull or Merge Request for the repository",
  "ActionType": "Octopus.Script",
  "Version": 1,
  "CommunityActionTemplateId": null,
  "Packages": [],
  "Properties": {
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptBody": "# Check to see if $IsWindows is available
if ($null -eq $IsWindows) {
    Write-Host \"Determining Operating System...\"
    $IsWindows = ([System.Environment]::OSVersion.Platform -eq \"Win32NT\")
    $IsLinux = ([System.Environment]::OSVersion.Platform -eq \"Unix\")
}

# Fix ANSI Color on PWSH Core issues when displaying objects
if ($PSEdition -eq \"Core\") {
    $PSStyle.OutputRendering = \"PlainText\"
}

# Get variables
$gitUrl = $OctopusParameters['Template.Git.Repo.Url']
$gitUser = $OctopusParameters['Template.Git.User.Name']
$gitPassword = $OctopusParameters['Template.Git.User.Password']
$gitSourceBranch = $OctopusParameters['Template.Git.Source.Branch']
$gitDestinationBranch = $OctopusParameters['Template.Git.Destination.Branch']
$gitTech = $OctopusParameters['Template.Git.Repository.Technology']

# Convert url into uri object
$gitUri = [System.Uri]$gitUrl

switch ($gitTech)
{
    \"ado\"
    {

\t\t# Parse url
        $gitOrganization = $gitUri.AbsolutePath
        $gitOrganization = $gitOrganization.Substring(1)
\t\t$gitOrganization = $gitOrganization.Substring(0, $gitOrganization.IndexOf(\"/\"))
        
        # Encode personal access token
        $encodedPAT = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(\"`:$gitPassword\"))
        
        # Construct Headers
        $header = @{
        \tAuthorization = \"Basic $encodedPAT\"
        }
                
        $gitProject = $gitUri.AbsolutePath.Replace($gitOrganization, \"\").Replace(\"//\", \"\")
        $gitProject = $gitProject.Substring(0, $gitProject.IndexOf(\"/\"))
        
\t\t# Create pull request
        $jsonBody = @{
        \tsourceRefName = \"refs/heads/\" + $gitSourceBranch
            targetRefName = \"refs/heads/\" + $gitDestinationBranch
            title = \"PR from Octopus Deploy\"
            description = \"PR from #{Octopus.Project.Name} release version #{Octopus.Release.Number}\"
        }
        
        # Construct API call
        $adoApiUrl = \"{0}://{1}:{2}/{3}/{4}/_apis/git/repositories/{4}/pullrequests\" -f $gitUri.Scheme, $gitUri.Host, $gitUri.Port, $gitOrganization, $gitProject
        Invoke-RestMethod -Method Post -Uri ($adoApiUrl + \"?api-version=7.0\") -Body ($jsonBody | ConvertTo-Json -Depth 10) -Headers $header -ContentType \"application/json\"
    }
    \"bitbucket\"
    {
\t\t# Parse url
        $gitOrganization = $gitUri.AbsolutePath
        $gitOrganization = $gitOrganization.Substring(1)
\t\t$gitOrganization = $gitOrganization.Substring(0, $gitOrganization.IndexOf(\"/\"))
        $gitProject = $gitUri.AbsolutePath.Replace($gitOrganization, \"\").Replace(\"//\", \"\")
        
        # Check to see if Repo Name ends with .git
        if ($gitProject.EndsWith(\".git\"))
        {
        \t# Strip off the last part
            $gitProject = $gitProject.Replace(\".git\", \"\")
        }

        # Construct Headers
        $header = @{
        \tAuthorization = \"Bearer $gitPassword\"
        }
        
        # Construct API url
        $bitbucketApiUrl = \"{0}://api.{1}:{2}/2.0/repositories/{3}/{4}/pullrequests\" -f $gitUri.Scheme, $gitUri.Host, $gitUri.Port, $gitOrganization, $gitProject
        
\t\t# Construct json body
        $jsonBody = @{
        \ttitle = \"PR from Octopus Deploy\"
            source = @{
            \tbranch = @{
                \tname = $gitSourceBranch
                }
            }
            destination = @{
            \tbranch = @{
                \tname = $gitDestinationBranch
                }
            }
        }
        
        # Create PR
        Invoke-RestMethod -Method Post -Uri $bitbucketApiUrl -Headers $header -Body ($jsonBody | ConvertTo-Json -Depth 10) -ContentType \"application/json\"
    }
    \"github\"
    {
        # Parse URL
        $gitRepoOwner = $gitUri.AbsolutePath.Substring(1, $gitUri.AbsolutePath.LastIndexOf(\"/\") - 1)
        $gitRepoName = $gitUri.AbsolutePath.Substring($gitUri.AbsolutePath.LastIndexOf(\"/\") + 1 )
        
        # Check to see if Repo Name ends with .git
        if ($gitRepoName.EndsWith(\".git\"))
        {
        \t# Strip off the last part
            $gitRepoName = $gitRepoName.Replace(\".git\", \"\")
        }
        
        # Construct API endpoint
        $githubApiUrl = \"{0}://api.{1}:{2}/repos/{3}/{4}/pulls\" -f $gitUri.Scheme, $gitUri.Host, $gitUri.Port, $gitRepoOwner, $gitRepoName
        
        # Construct Headers
        $header = @{
        \tAuthorization = \"Bearer $gitPassword\"
            Accept = \"application/vnd.github+json\"
            \"X-Github-Api-Version\" = \"2022-11-28\"
        }
        
        # Construct body
        $jsonBody = @{
        \ttitle = \"PR from Octopus Deploy\"
            body = \"PR from #{Octopus.Project.Name} release version #{Octopus.Release.Number}\"
            head = $gitSourceBranch
            base = $gitDestinationBranch
        }
        
        # Create the pull request
        Invoke-RestMethod -Method Post -Uri $gitHubApiUrl -Headers $header -Body ($jsonBody | ConvertTo-Json -Depth 10)
    }
    \"gitlab\"
    {
\t\t# Get project name
        $gitlabProjectName = $gitUrl.SubString($gitUrl.LastIndexOf(\"/\") + 1)
        
        # Parse uri
        $gitlabApiUrl = \"{0}://{1}:{2}/api/v4/users/{3}/projects\" -f $gitUri.Scheme, $gitUri.Host, $gitUri.Port, $gitUser
        
        # Check to see if it ends in .git
        if ($gitlabProjectName.EndsWith(\".git\"))
        {
        \t# Strip that part off
            $gitlabProjectName = $gitlabProjectName.Replace(\".git\", \"\")
        }
        
        # Create header
        $header = @{ \"PRIVATE-TOKEN\" = $gitPassword }
        
        # Get the project
        $gitlabProject = (Invoke-RestMethod -Method Get -Uri $gitlabApiUrl -Headers $header) | Where-Object {$_.Name -eq $gitlabProjectName}
        
        # Create the merge request
         $gitlabApiUrl = \"{0}://{1}:{2}/api/v4/projects/{3}/merge_requests?source_branch={4}&target_branch={5}&target_project_id={3}&title={6}\" -f $gitUri.Scheme, $gitUri.Host, $gitUri.Port, $gitlabProject.id, $gitSourceBranch, $gitDestinationBranch, \"PR from #{Octopus.Project.Name} release version #{Octopus.Release.Number}\"
        Invoke-RestMethod -Method Post -Uri $gitlabApiUrl -Headers $header
    }
}

<#
# Set user
$gitAuthorName = $OctopusParameters['Octopus.Deployment.CreatedBy.DisplayName']
$gitAuthorEmail = $OctopusParameters['Octopus.Deployment.CreatedBy.EmailAddress']

# Check to see if user is system
if ([string]::IsNullOrWhitespace($gitAuthorEmail) -and $gitAuthorName -eq \"System\")
{
\t# Initiated by the Octopus server via automated process, put something in for the email address
    $gitAuthorEmail = \"system@octopus.local\"
}

# Configure user information
Invoke-Git -GitCommand \"config\" -AdditionalArguments @(\"user.name\", $gitAuthorName) #-GitFolder \"$($PWD)/$($folderName)\"
Invoke-Git -GitCommand \"config\" -AdditionalArguments @(\"user.email\", $gitAuthorEmail) #-GitFolder \"$($PWD)/$($folderName)\"


# Push the new tag
Invoke-Git -Gitcommand \"request-pull\" -AdditionalArguments @(\"$gitSourceBranch\", $gitUrl, \"$gitDestinationBranch\") -GitFolder \"$($PWD)/$($folderName)\"    
#>"
  },
  "Parameters": [
    {
      "Id": "674d5325-aa93-4779-a734-cee8e5690f17",
      "Name": "Template.Git.Repo.Url",
      "Label": "Git Repository URL",
      "HelpText": "The URL used for the `git clone` operation.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "f2d07c9c-85fc-485e-8057-5577efd9a26d",
      "Name": "Template.Git.User.Name",
      "Label": "Git Username",
      "HelpText": "Username of the credentials to use to log into git.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "597ae9a5-1ef4-4062-a435-2d9bb1fb16a2",
      "Name": "Template.Git.User.Password",
      "Label": "Git User Password",
      "HelpText": "Password for the git credential.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Id": "7cfa6ba5-76c6-4b15-a30c-593e2cd8f914",
      "Name": "Template.Git.Source.Branch",
      "Label": "Source Branch",
      "HelpText": "The source branch name to compare the repository with.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "2b0ee0d3-8542-4db2-87fc-52ee41e63cc6",
      "Name": "Template.Git.Destination.Branch",
      "Label": "Destination Branch",
      "HelpText": "The destination branch to create the pull/merge request against.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "74d8fc6d-2a4c-49ad-b7f8-248dcf44fc0f",
      "Name": "Template.Git.Repository.Technology",
      "Label": "Source Control Technology",
      "HelpText": "Select which source control technology to create the request on.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "ado|Azure DevOps
bitbucket|BitBucket
github|GitHub
gitlab|GitLab"
      }
    }
  ],
  "StepPackageId": "Octopus.Script",
  "$Meta": {
    "ExportedAt": "2023-09-12T15:32:53.416Z",
    "OctopusVersion": "2023.4.2661",
    "Type": "ActionTemplate"
  },
  "LastModifiedBy": "twerthi",
  "Category": "git"
}
