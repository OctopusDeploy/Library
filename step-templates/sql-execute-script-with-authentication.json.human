{
  "Id": "3ec610a8-f75c-43da-8d82-8c9b7b334084",
  "Name": "SQL - Execute SQL Script with SQL or Windows Authentication",
  "Description": "Executes SQL script file(s) against the specified database using either SQL or Windows authentication. SQL Scripts can be hardcoded value or can be from an extracted NuGet package.",
  "ActionType": "Octopus.Script",
  "Version": 169,
  "Properties": {
    "Octopus.Action.Script.ScriptBody": "function Get-DBConnection\r
{\r
    [CmdletBinding()]\r
    param\r
    (\r
        [Parameter(Position = 0)]\r
        [string]\r
        [ValidateNotNullorEmpty()]\r
        $serverInstance,\r
\r
        [switch]\r
        $SqlAuthentication,\r
\r
        [string]\r
        $Username,\r
\r
        [string]\r
        $Password\r
    )\r
    try\r
    {\r
        $connection = (New-Object Microsoft.SqlServer.Management.Smo.Server($serverInstance))\r
\r
        if ($SqlAuthentication)\r
        {\r
            $connection.ConnectionContext.LoginSecure = $false\r
            $connection.ConnectionContext.set_Login($Username)\r
            $securePassword = ConvertTo-SecureString $Password -AsPlainText -Force\r
            $connection.ConnectionContext.set_SecurePassword($securePassword)\r
        }\r
        \r
        $connection.Refresh()\r
        \r
        return $connection\r
    }\r
    catch\r
    {\r
        throw $_.Exception.ToString()\r
    }\r
        \r
}\r
\r
function Invoke-ExecuteSQLScript {\r
\r
    [CmdletBinding()]\r
    param\r
    (\r
        [parameter(Mandatory = $true, Position = 0)]\r
        [ValidateNotNullOrEmpty()]\r
        [string]\r
        $serverInstance,\r
\r
        [parameter(Mandatory = $true, Position = 1)]\r
        [ValidateNotNullOrEmpty()]\r
        [string]\r
        $dbName,\r
\r
        [string]\r
        $Authentication,\r
\r
        [string]\r
        $Username,\r
\r
        [string]\r
        $Password,\r
\r
        [string]\r
        $SQLScripts\r
    )\r
\r
    [System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.SMO\") | out-null\r
\r
    if ($Authentication -eq \"SqlAuthentication\")\r
    {\r
        $SqlServer = Get-DBConnection -serverInstance $serverInstance -SqlAuthentication -Username $Username -Password $Password\r
    }\r
    else\r
    {\r
        $SqlServer = Get-DBConnection -serverInstance $serverInstance\r
    }\r
\r
    if ($null -eq $SqlServer.Databases[$dbName])\r
    {\r
        throw \"Database $dbName does not exist on server $serverInstance\"\r
    }\r
    \r
    if ($null -ne $SqlServer)\r
    {\r
        foreach ($SQLScript in $SQLScripts.Split(\"`n\"))\r
        {\r
            try \r
            {\r
                $children = $SQLScript -replace \".*\\\\\"\r
                $replacematch = $children -replace \"\\*\",\"\\*\" -replace \"\\.\",\"\\.\"\r
                $parent = $SQLScript -replace $replacematch\r
\r
                $scripts = Get-ChildItem -Path $parent -Filter $children\r
\r
                foreach ($script in $scripts)\r
                {\r
                    $sr = New-Object System.IO.StreamReader($script.FullName)\r
                    $scriptContent = $sr.ReadToEnd()\r
                    $SqlServer.Databases[$dbName].ExecuteNonQuery($scriptContent)\r
                    $sr.Close()\r
\r
\t\t\t\t\twrite-verbose (\"Executed manual script - {0}\" -f $script.Name)\r
                }\r
            }\r
            catch \r
            {\r
                Write-Error $_.Exception\r
            }\r
        }\r
    }\r
}\r
\r
if (Test-Path Variable:OctopusParameters)\r
{\r
\tif ($null -ne $DacpacPackageExtractStepName -and $DacpacPackageExtractStepName -ne '')\r
    {\r
        Write-Verbose \"Dacpac Package Extract Step Name not empty. Locating scripts located in the Dacpac Extract Step.\"\r
        $installDirPathKey = 'Octopus.Action[{0}].Output.Package.InstallationDirectoryPath' -f $DacpacPackageExtractStepName\r
        $installDirPath = $OctopusParameters[$installDirPathKey]\r
        $ScriptsToExecute = Join-Path $installDirPath $SqlScripts\r
    }\r
    else\r
    {   \r
        Write-Verbose \"Locating scripts from the literal entry of Octopus Parameter SQLScripts\"\r
        $ScriptsToExecute = $OctopusParameters[\"SQLScripts\"]\r
    }\r
    if ($OctopusParameters[\"Authentication\"] -eq \"SqlAuthentication\")\r
    {\r
        Write-Verbose \"Using Sql Authentication\"\r
        Invoke-ExecuteSQLScript -serverInstance $OctopusParameters[\"serverInstance\"] `\r
                                -dbName $OctopusParameters[\"dbName\"] `\r
                                -Authentication $OctopusParameters[\"Authentication\"] `\r
                                -Username $OctopusParameters[\"Username\"] `\r
                                -Password $OctopusParameters[\"Password\"] `\r
                                -SQLScripts $ScriptsToExecute\r
    }\r
    else\r
    {\r
        Write-Verbose \"Using Windows Integrated Authentication\"\r
        Invoke-ExecuteSQLScript -serverInstance $OctopusParameters[\"serverInstance\"] `\r
                                -dbName $OctopusParameters[\"dbName\"] `\r
                                -SQLScripts $ScriptsToExecute\r
    }\r
}",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.RunOnServer": "false"
  },
  "Parameters": [
    {
      "Id": "0ac8c815-697d-4212-aa73-85e265bd1a7a",
      "Name": "serverInstance",
      "Label": "Server Instance Name",
      "HelpText": "The SQL Server Instance name",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "63a2671c-cd1e-4bd3-acad-59f656f9a698",
      "Name": "dbName",
      "Label": "Database Name",
      "HelpText": "The database name",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "bc768cdf-3d5f-4a94-8b08-647056eb3977",
      "Name": "Authentication",
      "Label": "Authentication",
      "HelpText": "The authentication method",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "SqlAuthentication
WindowsIntegrated"
      }
    },
    {
      "Id": "e4d6eca3-5de6-4901-8f94-5253c2aea18d",
      "Name": "Username",
      "Label": "Username",
      "HelpText": "The username to use to connect (only applies with SqlAuthentication selected)",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "d00b988d-bdf3-4376-aec7-90954e3cb635",
      "Name": "Password",
      "Label": "Password",
      "HelpText": "The password to use to connect (only applies with SqlAuthentication selected)",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "4de1507a-3824-46b0-bf11-126b953c73da",
      "Name": "SQLScripts",
      "Label": "SQL Scripts",
      "HelpText": "Full path to each script name on a new line
Wildcards are accepted, eg. C:\\Scripts\\*.sql, C:\\Scripts\\Deploy*.sql",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "MultiLineText"
      }
    },
    {
      "Id": "0fd3b146-02d1-41fc-9f5c-a830e062b239",
      "Name": "DacpacPackageExtractStepName",
      "Label": "DACPAC Package Extract Step Name",
      "HelpText": "Optional: The step in which the DACPAC package was installed. Can be left as blank if SQLScripts is a hardcoded value.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "StepName"
      }
    }
  ],
  "LastModifiedOn": "2021-09-16T08:42:00.000+00:00",
  "LastModifiedBy": "harrisonmeister",
  "$Meta": {
    "ExportedAt": "2021-09-16T08:42:00.000+00:00",
    "OctopusVersion": "2021.3.2156",
    "Type": "ActionTemplate"
  },
  "Category": "sql"
}
