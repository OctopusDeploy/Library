{
    "Id": "fc7272be-779c-4ef2-8051-0e7271471328",
    "Name": "MySQL - Add Database User To Role",
    "Description": "Adds a database user to a role",
    "Author": "twerthi",
    "ActionType": "Octopus.Script",
    "Version": 7,
    "CommunityActionTemplateId": null,
    "Packages": [],
    "Properties": {
        "Octopus.Action.Script.ScriptSource": "Inline",
        "Octopus.Action.Script.Syntax": "PowerShell",
        "Octopus.Action.Script.ScriptBody": "# Define variables
$connectionName = \"OctopusDeploy\"

# Define functions
function Get-ModuleInstalled
{
    # Define parameters
    param(
        $PowerShellModuleName
    )

    # Check to see if the module is installed
    if ($null -ne (Get-Module -ListAvailable -Name $PowerShellModuleName))
    {
        # It is installed
        return $true
    }
    else
    {
        # Module not installed
        return $false
    }
}

function Install-PowerShellModule
{
    # Define parameters
    param(
        $PowerShellModuleName,
        $LocalModulesPath
    )

\t# Check to see if the package provider has been installed
    if ((Get-NugetPackageProviderNotInstalled) -ne $false)
    {
    \t# Display that we need the nuget package provider
        Write-Host \"Nuget package provider not found, installing ...\"
        
        # Install Nuget package provider
        Install-PackageProvider -Name Nuget -Force
    }

\t# Save the module in the temporary location
    Save-Module -Name $PowerShellModuleName -Path $LocalModulesPath -Force
}

function Get-NugetPackageProviderNotInstalled
{
\t# See if the nuget package provider has been installed
    return ($null -eq (Get-PackageProvider -ListAvailable -Name Nuget -ErrorAction SilentlyContinue))
}

function Get-UserInRole
{
\t# Define parameters
    param ($UserHostname,
    $Username,
    $RoleHostName,
    $RoleName)
    
\t# Execute query
    $grants = Invoke-SqlQuery \"SHOW GRANTS FOR '$Username'@'$UserHostName';\" -ConnectionName $connectionName

    # Loop through Grants
    foreach ($grant in $grants.ItemArray)
    {
        # Check grant
        if ($grant -eq \"GRANT ``$RoleName``@``$RoleHostName`` TO ``$Username``@``$UserHostName``\")
        {
            # They're in the group
            return $true
        }
    }

    # Not found
    return $false
}

# Define PowerShell Modules path
$LocalModules = (New-Item \"$PSScriptRoot\\Modules\" -ItemType Directory -Force).FullName
$env:PSModulePath = \"$LocalModules$([System.IO.Path]::PathSeparator)$env:PSModulePath\"
$PowerShellModuleName = \"SimplySql\"

# Set secure protocols
[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls11 -bor [System.Net.SecurityProtocolType]::Tls12

# Check to see if SimplySql module is installed
if ((Get-ModuleInstalled -PowerShellModuleName $PowerShellModuleName) -ne $true)
{
    # Tell user what we're doing
    Write-Output \"PowerShell module $PowerShellModuleName is not installed, downloading temporary copy ...\"

    # Install temporary copy
    Install-PowerShellModule -PowerShellModuleName $PowerShellModuleName -LocalModulesPath $LocalModules
}

# Display
Write-Output \"Importing module $PowerShellModuleName ...\"

# Check to see if it was downloaded
if ((Test-Path -Path \"$LocalModules\\$PowerShellModuleName\") -eq $true)
{
\t# Import from specific location
    $PowerShellModuleName = \"$LocalModules\\$PowerShellModuleName\"
}

# Declare connection string
$connectionString = \"Server=$addMySQLServerName;Port=$addMySQLServerPort;\"

# Customize connection string based on authentication method
switch ($mySqlAuthenticationMethod) {
    \"awsiam\" {
        # Region is part of the RDS endpoint, extract
        $region = ($addMySQLServerName.Split(\".\"))[2]

        Write-Host \"Generating AWS IAM token ...\"
        $addLoginPasswordWithAddRoleRights = (aws rds generate-db-auth-token --hostname $addMySQLServerName --region $region --port $addMySQLServerPort --username $addLoginWithAddRoleRights)
        
        # Append remaining portion of connection string
        $connectionString += \";Uid=$addLoginWithAddRoleRights;Pwd=`\"$addLoginPasswordWithAddRoleRights`\";\"

        break
    }

    \"usernamepassword\" {
        # Append remaining portion of connection string
        $connectionString += \";Uid=$addLoginWithAddRoleRights;Pwd=`\"$addLoginPasswordWithAddRoleRights`\";\"
        
        break    
    }

    \"windowsauthentication\" {
        # Append remaining portion of connection string
        $connectionString += \";IntegratedSecurity=yes;Uid=$addLoginWithAddRoleRights;\"

        break
    }

    \"azuremanagedidentity\" {
        Write-Host \"Generating Azure Managed Identity token ...\"
        $token = Invoke-RestMethod -Method GET -Uri \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https://ossrdbms-aad.database.windows.net\" -Headers @{\"MetaData\" = \"true\" }

        $addLoginPasswordWithAddRoleRights = $token.access_token

        $connectionString += \";Uid=$addLoginWithAddRoleRights;Pwd=`\"$addLoginPasswordWithAddRoleRights`\";\"

        break
    }

    \"gcpserviceaccount\" {
        # Define header
        $header = @{ \"Metadata-Flavor\" = \"Google\" }

        # Retrieve service accounts
        $serviceAccounts = Invoke-RestMethod -Method Get -Uri \"http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/\" -Headers $header

        # Results returned in plain text format, get into array and remove empty entries
        $serviceAccounts = $serviceAccounts.Split([Environment]::NewLine, [StringSplitOptions]::RemoveEmptyEntries)

        # Retreive the specific service account assigned to the VM
        $serviceAccount = $serviceAccounts | Where-Object { $_.Contains(\"iam.gserviceaccount.com\") }

        if ([string]::IsNullOrWhiteSpace(($addLoginWithAddRoleRights))) {
            $addLoginWithAddRoleRights = $serviceAccount.SubString(0, $serviceAccount.IndexOf(\".gserviceaccount.com\"))
        }

        Write-Host \"Generating GCP IAM token ...\"
        # Retrieve token for account
        $token = Invoke-RestMethod -Method Get -Uri \"http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/$serviceAccount/token\" -Headers $header
        
        $addLoginPasswordWithAddRoleRights = $token.access_token
        $connectionString += \";Uid=$addLoginWithAddRoleRights;Pwd=`\"$addLoginPasswordWithAddRoleRights`\";\"

        break
    }
}


# Import the module
Import-Module -Name $PowerShellModuleName

try
{
    if ($addUseSSL -eq \"True\")
    {
    \t# Append to connection string
        $connectionString += \"SslMode=Required;\"
    }
    else
    {
    \t# Disable SSL
        $connectionString += \"SslMode=none;\"
    }
    
    if (![string]::IsNullOrWhitespace($mysqlAdditionalParameters))
    {
      foreach ($parameter in $mysqlAdditionalParameters.Split(\",\"))
      {
          # Check for delimiter
          if (!$connectionString.EndsWith(\";\") -and !$parameter.StartsWith(\";\"))
          {
              # Append delimeter
              $connectionString +=\";\"
          }

          $connectionString += $parameter.Trim()
      }
    }
   
    
    Open-MySqlConnection -ConnectionString $connectionString -ConnectionName $connectionName
    

    # See if database exists
    $userInRole = Get-UserInRole -UserHostname $addUserHostname -Username $addUsername -RoleHostName $addRoleHostName -RoleName $addRoleName

    if ($userInRole -eq $false)
    {
        # Create database
        Write-Output \"Adding user $addUsername@$addUserHostName to role $addRoleName@$addRoleHostName ...\"
        $executionResults = Invoke-SqlUpdate \"GRANT '$addRoleName'@'$addRoleHostName' TO '$addUsername'@'$addUserHostName';\" -ConnectionName $connectionName

        # See if it was created
        $userInRole = Get-UserInRole -UserHostname $addUserHostname -Username $addUsername -RoleHostName $addRoleHostName -RoleName $addRoleName
            
        # Check array
        if ($userInRole -eq $true)
        {
            # Success
            Write-Output \"$addUserName@$addUserHostName added to $addRoleName@$addRoleHostName successfully!\"
        }
        else
        {
            # Failed
            Write-Error \"Failure adding $addUserName@$addUserHostName to $addRoleName@$addRoleHostName!\"
        }
    }
    else
    {
    \t# Display message
        Write-Output \"User $addUsername@$addUserHostName is already in role $addRoleName@$addRoleHostName\"
    }
}
finally
{
\t# Close connection if open
    if ((Test-SqlConnection -ConnectionName $connectionName) -eq $true)
    {
    \tClose-SqlConnection -ConnectionName $connectionName
    }
}
"
    },
    "Parameters": [
        {
            "Id": "80bf18c2-a2ea-4499-a33d-eea226b9727a",
            "Name": "addMySQLServerName",
            "Label": "MySQL Server name",
            "HelpText": "Name of the MySQL database server",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "2eba54c0-293c-4009-aef0-077b91b568b4",
            "Name": "addMySQLServerPort",
            "Label": "Port",
            "HelpText": "Port the MySQL listens on.",
            "DefaultValue": "3306",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "c8732b96-bedd-4e4a-be2d-941315e1bddd",
            "Name": "addLoginWithAddRoleRights",
            "Label": "Login name",
            "HelpText": "Login name of a user that can add roles to other users.",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "4b669f8a-7309-4aed-81ff-cd5b3ebf5342",
            "Name": "addLoginPasswordWithAddRoleRights",
            "Label": "Login password",
            "HelpText": "Password for the login account.",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "Sensitive"
            }
        },
        {
            "Id": "7db3f187-ca97-42cc-a10e-fa5cc3f1382c",
            "Name": "addUsername",
            "Label": "User name",
            "HelpText": "Name of the user to add the role to.",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "052563dd-c831-4f09-8d59-1e54bc30afa0",
            "Name": "addUserHostname",
            "Label": "User Hostname",
            "HelpText": "Hostname for the user account.",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "885c5057-f859-4bed-a765-03c568f9e9a2",
            "Name": "addRoleName",
            "Label": "Role name",
            "HelpText": "Name of the role to add to the user.",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "302ac0ce-3128-45bc-8006-ac92a59b7141",
            "Name": "addRoleHostName",
            "Label": "Role hostname",
            "HelpText": "Hostname of the role.",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "a54387ea-9e98-45a2-93e9-214ff2fcf67f",
            "Name": "addUseSSL",
            "Label": "Use SSL",
            "HelpText": "Check this box to force the use of SSL.",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "Checkbox"
            }
        },
        {
            "Id": "89de7391-de67-46cf-b19c-a7b219280dc9",
            "Name": "mySqlAuthenticationMethod",
            "Label": "MySQL Authentication Method",
            "HelpText": "Authentication method used to connect with MySQL. Options include standard Username/Password, Windows Authentication, [AWS IAM Authentication](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html), [Azure Managed Identity](https://docs.microsoft.com/en-us/azure/mysql/single-server/how-to-connect-with-managed-identity), and [Google Cloud IAM for Cloud SQL ](https://cloud.google.com/sql/docs/mysql/iam-overview)",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "Select",
                "Octopus.SelectOptions": "awsiam|AWS IAM
usernamepassword|Username/password
windowsauthentication|Windows Authentication
azuremanagedidentity|Azure Managed Identity
gcpserviceaccount|GCP IAM"
            }
        },
        {
          "Id": "a97452b5-f7ef-4b72-ab2f-b440cda16343",
          "Name": "mysqlAdditionalParameters",
          "Label": "Additional connection string parameters",
          "HelpText": "A comma-delimited list of additional parameters to add to the connection string.  ex `AllowPublicKeyRetrieval=True`\"",
          "DefaultValue": "",
          "DisplaySettings": {
            "Octopus.ControlType": "SingleLineText"
          }
        }
    ],
    "StepPackageId": "Octopus.Script",
    "LastModifiedBy": "twerthi",
    "$Meta": {
      "ExportedAt": "2024-03-22T16:19:47.074Z",
      "OctopusVersion": "2024.1.12087",
      "Type": "ActionTemplate"
    },
    "Category": "mysql"
}
