{
  "Id": "6936e720-17a2-4a17-97d6-8f19ee040b01",
  "Name": "SQLAzure - Restore a SQL Azure database from a .bacpac located in Azure Storage",
  "Description": "Given an existing [.bacpac](https://msdn.microsoft.com/en-us/library/azure/hh335292.aspx) in Azure Storage this template restores a SQL Azure database.\n\n**Note** - The storage account used needs to reside in the the same subscription as the SQL Azure Server.",
  "ActionType": "Octopus.Script",
  "Version": 2,
  "Properties": {
    "Octopus.Action.Script.ScriptBody": "#Check for the PowerShell cmdlets\ntry{ \n    Import-Module Azure -ErrorAction Stop\n}catch{\n    \n    $azureServiceModulePath = \"C:\\Program Files (x86)\\Microsoft SDKs\\Azure\\PowerShell\\ServiceManagement\\Azure\\Azure.psd1\"\n    Write-Output \"Unable to find the module checking $azureServiceModulePath\" \n    \n    try{\n        Import-Module $azureServiceModulePath\n        \n    }\n    catch{\n        throw \"Windows Azure PowerShell not found! Please make sure to install them from http://www.windowsazure.com/en-us/downloads/#cmd-line-tools\" \n    }\n}\n\nfunction Set-TempAzureSubscription{\n    param(   \n        [Parameter(Mandatory=$true)][string] $subscriptionId,\n        [Parameter(Mandatory=$true)][string] $subscriptionName,\n        [Parameter(Mandatory=$true)][string] $managementCertificate\n    )\n\n    #Ensure no other subscriptions or accounts    \n    Get-AzureSubscription | ForEach-Object { \n        $id = $_.SubscriptionId \n        Write-Output \"Removing Subscription $id\"\n        Remove-AzureSubscription -SubscriptionId $id -Force\n    }\n\n    #Ensure there are no other \n    Get-AzureAccount | ForEach-Object { Remove-AzureAccount $_.ID -Force }\n   \n    [byte[]]$certificateData = [System.Convert]::FromBase64String($managementCertificate)\n    $certificate = [System.Security.Cryptography.X509Certificates.X509Certificate2] $certificateData\n\n    Set-AzureSubscription -Certificate $certificate -SubscriptionId $subscriptionId -SubscriptionName $subscriptionName\n    Select-AzureSubscription $subscriptionName\n\n    Write-Output \"Azure Subscription set Id: $subscriptionId Name: $subscriptionName \"\n\n    $subscription = Get-AzureSubscription -Current\n\n    return  $subscription\n}\n\n\nfunction Restore-SqlAzureDatabase{\n    Param(    \n    [Parameter(Mandatory=$true)][string]$databaseServerName,\n    [Parameter(Mandatory=$true)][string]$databaseName,\n    [Parameter(Mandatory=$true)][string]$edition,\n    [Parameter(Mandatory=$true)][string]$serviceObjectiveName, \n    [Parameter(Mandatory=$true)][string]$storageName,\n    [Parameter(Mandatory=$true)][string]$containerName,\n    [Parameter(Mandatory=$true)][string]$sqlAdminUser,                       \n    [Parameter(Mandatory=$true)][string]$sqlAdminPassword,\n    [Parameter(Mandatory=$true)][string]$bacpacFileName,    \n    [Parameter(Mandatory=$false)][bool]$errorIfDatabaseExists=$true\n    )\n\n    $subscription = Get-AzureSubscription -Current \n         \n    $storageKey = (Get-AzureStorageKey -StorageAccountName $storageName).Primary\n    $storageCtx = New-AzureStorageContext -storageaccountname $storageName -storageaccountkey $storageKey\n    $password = $sqlAdminPassword | ConvertTo-SecureString -asPlainText -Force                                                      \n    $sqlCred = New-Object System.Management.Automation.PSCredential($sqlAdminUser,$password)\n    $sqlCtx = New-AzureSqlDatabaseServerContext -ServerName $databaseServerName -Credential $sqlCred    \n  \n    $databases = Get-AzureSqlDatabase -ServerName $databaseServerName\n\n    #Check to see there is a database on the server\n    Foreach ($d in $databases){\n        if($d.Name -eq $databaseName){\n            $database = $d\n            break\n        }    \n    }\n\n    if ($database -eq $null) {\n        Write-Output \"The SQL Azure Database: $databaseName WAS NOT found on $databaseServerName\"  \n    }\n     \n    if($database -ne $null){\n        if ($errorIfDatabaseExists -eq $true) {\n            Write-Output \"A database named $databaseName already exists. If you wish to override this database set the -errorIfDatabaseExists parameter to false.\" \n            return;\n        } else {\n            #Delete the existing database.\n            Write-Output \"The SQL Azure Database: $databaseName WAS found on $databaseServerName\"  \n            Write-Output \"WARNING! Removing SQL Azure database: $databaseName\"\n            Remove-AzureSqlDatabase -ServerName $databaseServerName -DatabaseName $databaseName -Force\n        }\n    } \n\n    Write-Output \"Starting database import...\"\n    $importRequest = Start-AzureSqlDatabaseImport -SqlConnectionContext $sqlCtx -StorageContext $storageCtx -StorageContainerName $containerName -DatabaseName $databaseName -BlobName $bacpacFileName -Edition $edition\n    \n    Write-Output \"Database import request submitted.  Request Id: $($importRequest.RequestGuid)\"  \n\n    Write-Output \"Checking import status...\"\n    $status = Get-AzureSqlDatabaseImportExportStatus -Username $sqlAdminUser -Password $sqlAdminPassword -ServerName $databaseServerName -RequestId $importRequest.RequestGuid\n    Write-Output \"Status: $($status.Status)\"\n    \n    while($status.Status.StartsWith(\"Running\") -Or $status.Status.StartsWith(\"Pending\")){\n        Start-Sleep -s 10\n        Write-Output \"Checking import status...\"  \n        $status = Get-AzureSqlDatabaseImportExportStatus -Username $sqlAdminUser -Password $sqlAdminPassword -ServerName $databaseServerName -RequestId $importRequest.RequestGuid\n        Write-Output \"Status: $($status.Status)\" \n    }\n\n    Get-AzureSqlDatabaseImportExportStatus -Username $sqlAdminUser -Password $sqlAdminPassword -ServerName $databaseServerName -RequestId $importRequest.RequestGuid   \n\n    if ($status.Status -eq \"Completed\") {\n        Write-Output \"Updating database service objective...\"\n\n        #Get the service objective.\n        $serviceObjective = Get-AzureSqlDatabaseServiceObjective -ServerName $databaseServerName -ServiceObjectiveName $serviceObjectiveName\n        Set-AzureSqlDatabase -ConnectionContext $sqlCtx -DatabaseName $databaseName -Force -ServiceObjective $serviceObjective\n        \n        Write-Output \"Updated database service objective.\" \n    }\n\n    return $importRequest\n}\n\n\n#Set the Azure Subscription\n$subscription = Set-TempAzureSubscription -managementCertificate $AzureManagementCertificate -subscriptionId $AzureSubscriptionId -subscriptionName $AzureSubscriptionName \n\nWrite-Output \"=============================================================\"\nWrite-Output \"Using SQL Azure Server $SQLAzureServerName\"\nWrite-Output \"Using Azure Storage Account: $AzureStorageAccountName\"\nWrite-Output \"Using Azure Storeage Container: $AzureStorageContainerName\"\nWrite-Output \"Using bacpac file: $BacPacFileName\"\nWrite-Output \"=============================================================\"\n\nRestore-SqlAzureDatabase -databaseServerName $SQLAzureServerName `\n    -databaseName $databaseName `\n    -edition $SQLAzureDatabaseEdition `\n    -serviceObjectiveName $SQLAzureServiceObjective `\n    -storageName $AzureStorageAccountName `\n    -containerName $AzureStorageContainerName `\n    -sqlAdminUser $SqlAzureAdminUser `\n    -sqlAdminPassword $SqlAzureAdminUserPassword `\n    -bacpacFileName $BacPacFileName `\n    -errorIfDatabaseExists $false\n",
    "Octopus.Action.Script.Syntax": "PowerShell"
  },
  "SensitiveProperties": {},
  "Parameters": [
    {
      "Name": "AzureManagementCertificate",
      "Label": "The Azure management certificate associated with the subscription",
      "HelpText": "The Azure Management Certificate that can be sourced via https://manage.windowsazure.com/publishsettings",
      "DefaultValue": null,
      "DisplaySettings": {}
    },
    {
      "Name": "AzureSubscriptionId",
      "Label": "The Azure Subscription ID",
      "HelpText": "The Azure Subscription ID that can be sourced via the [Azure Portal](https://portal.azure.com) or https://manage.windowsazure.com/publishsettings",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "AzureSubscriptionName",
      "Label": "The Azure Subscription Name",
      "HelpText": "The Azure Subscription Name that can be sourced via the [Azure Portal](https://portal.azure.com) or https://manage.windowsazure.com/publishsettings",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "SqlAzureAdminUser",
      "Label": "The SQL Azure Server Admin User",
      "HelpText": "The SQL Azure Server Administrator User",
      "DefaultValue": null,
      "DisplaySettings": {}
    },
    {
      "Name": "SqlAzureAdminUserPassword",
      "Label": "The SQL Azure Admin Password",
      "HelpText": "The SQL Azure Server Administrator Password",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Name": "SQLAzureServerName",
      "Label": "The SQL Azure Server",
      "HelpText": "The name of the SQL Azure Server.  Just the server name e.g.  wyn4its2by",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "DatabaseName",
      "Label": "The SQL Azure Database used for the  bacpac restore",
      "HelpText": "The name of the SQL Azure Database to which you wish to restore the .bacpac file.",
      "DefaultValue": null,
      "DisplaySettings": {}
    },
    {
      "Name": "SQLAzureDatabaseEdition",
      "Label": "The SQL Azure database edition to use",
      "HelpText": "The [SQL Azure Database Edition](https://msdn.microsoft.com/en-us/library/dn546725.aspx) to use for the restore",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText",
        "Octopus.SelectOptions": "Web|Web\nBusiness|Business"
      }
    },
    {
      "Name": "SQLAzureServiceObjective",
      "Label": "The SQL Azure SQL Service Objective to use",
      "HelpText": "The [SQL Azure Database Objective](https://msdn.microsoft.com/en-us/library/dn546721.aspx) for the database being restored.\n\nBasic, S0, S1, S2, P1, P2, or P3.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "Basic|Basic\nS0|Standard (S0)\nS1|Standard (S1)\nS2|Standard (S2)\nS3|Standard (S3)\nP1|Premium (P1)\nP2|Premium (P2)\nP3|Premium (P3)"
      }
    },
    {
      "Name": "AzureStorageAccountName",
      "Label": "The Azure Storage Account where the .bacpac file is located",
      "HelpText": "The Azure Storage Account where the .bacpac file is located",
      "DefaultValue": null,
      "DisplaySettings": {}
    },
    {
      "Name": "AzureStorageContainerName",
      "Label": "The container name of the bacpac file",
      "HelpText": "The container in Azure storage where the .bacpac file is located.",
      "DefaultValue": null,
      "DisplaySettings": {}
    },
    {
      "Name": "BacPacFileName",
      "Label": "The name of the bacpac file to restore",
      "HelpText": "The name of the .bacpac file to restore.",
      "DefaultValue": null,
      "DisplaySettings": {}
    }
  ],
  "LastModifiedOn": "2015-04-01T11:36:28.847+00:00",
  "LastModifiedBy": "merbla",
  "$Meta": {
    "ExportedAt": "2015-04-01T11:36:52.686+00:00",
    "OctopusVersion": "2.6.5.1010",
    "Type": "ActionTemplate"
  },
  "Category": "sql"
}