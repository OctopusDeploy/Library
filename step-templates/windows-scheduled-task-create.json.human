{
  "Id": "17bc51d1-8b88-4aad-b188-24a0904d0bf2",
  "Name": "Windows Scheduled Task - Create",
  "Description": "Create Windows scheduled task. If the task exists it will be torn down and re-added to ensure consistency",
  "ActionType": "Octopus.Script",
  "Version": 22,
  "CommunityActionTemplateId": null,
  "Packages": [],
  "Properties": {
    "Octopus.Action.Script.ScriptBody": "$ErrorActionPreference = \"Stop\";
Set-StrictMode -Version \"Latest\";

# use http://msdn.microsoft.com/en-us/library/windows/desktop/bb736357(v=vs.85).aspx for API reference

Function Create-ScheduledTask($TaskName,$RunAsUser,$RunAsPassword,$TaskRun,$Arguments,$Schedule,$StartTime,$StartDate,$RunWithElevatedPermissions,$Days,$Interval,$Duration, $Modifier)
{

    # SCHTASKS /Create [/S system [/U username [/P [password]]]]
    #     [/RU username [/RP password]] /SC schedule [/MO modifier] [/D day]
    #     [/M months] [/I idletime] /TN taskname /TR taskrun [/ST starttime]
    #     [/RI interval] [ {/ET endtime | /DU duration} [/K] [/XML xmlfile] [/V1]]
    #     [/SD startdate] [/ED enddate] [/IT | /NP] [/Z] [/F] [/HRESULT] [/?]

    # note - /RL and /DELAY appear in the \"Parameter list\" for \"SCHTASKS /Create /?\" but not in the syntax above

    $argumentList = @();
    $argumentList += @( \"/Create\" );

    $argumentList += @( \"/RU\", \"`\"$RunAsUser`\"\" );
    
    if( -not (StringIsNullOrWhiteSpace($RunAsPassword)))
    {
    \t$RAP = $RunAsPassword -Replace \"`\"\",\"\\`\"\"
        $argumentList += @( \"/RP `\"$RAP`\"\"  );
    }

    $argumentList += @( \"/SC\", $Schedule );

    if( -not (StringIsNullOrWhiteSpace($Interval)) )
    {
        $argumentList += @( \"/RI\", $Interval );
    }

    if( -not (StringIsNullOrWhiteSpace($Modifier)))
    {
        switch -Regex ($Schedule)
        {
            \"MINUTE|HOURLY|DAILY|WEEKLY|MONTHLY|ONEVENT\" {
                $argumentList += @( \"/MO\", $Modifier );
            }
            \"ONCE|ONSTART|ONLOGON|ONIDLE\" {
                $argumentList += @( \"/MO\" );
        }
    }
    }

    if( -not (StringIsNullOrWhiteSpace($Days)))
    {
        if($Schedule -ne \"WEEKDAYS\") {
            $argumentList += @( \"/D\", $Days );
        } else {
            $argumentList += @( \"/D\", \"MON,TUE,WED,THU,FRI\" );
        }
    }

    $argumentList += @( \"/TN\", \"`\"$TaskName`\"\" );

    if( $Arguments )
    {
        $argumentList += @( \"/TR\", \"`\"'$TaskRun' $Arguments`\"\" );
    }
    else
    {
        $argumentList += @( \"/TR\", \"`\"'$TaskRun'`\"\" );
    }

    if( -not (StringIsNullOrWhiteSpace($StartTime)) )
    {
        $argumentList += @( \"/ST\", $StartTime );
    }

    if( -not (StringIsNullOrWhiteSpace($Duration)) )
    {
        $argumentList += @( \"/DU\", $Duration );
    }

    if( -not (StringIsNullOrWhiteSpace($StartDate)) )
    {
        $argumentList += @( \"/SD\", $StartDate );
    }

    $argumentList += @( \"/F\" );

    if( $RunWithElevatedPermissions )
    {
        $argumentList += @( \"/RL\", \"HIGHEST\" );
    }

    Invoke-CommandLine -FilePath     \"$($env:SystemRoot)\\System32\\schtasks.exe\" `
                       -ArgumentList $argumentList;

}

Function Delete-ScheduledTask($TaskName) {
    # SCHTASKS /Delete [/S system [/U username [/P [password]]]]
    #          /TN taskname [/F] [/HRESULT] [/?]
    Invoke-CommandLine -FilePath     \"$($env:SystemRoot)\\System32\\schtasks.exe\" `
                       -ArgumentList @( \"/Delete\", \"/S\", \"localhost\", \"/TN\", \"`\"$TaskName`\"\", \"/F\" );
}

Function Stop-ScheduledTask($TaskName) {
    # SCHTASKS /End [/S system [/U username [/P [password]]]]
    #          /TN taskname [/HRESULT] [/?]
    Invoke-CommandLine -FilePath     \"$($env:SystemRoot)\\System32\\schtasks.exe\" `
                       -ArgumentList @( \"/End\", \"/S\", \"localhost\", \"/TN\", \"`\"$TaskName`\"\" );
}

Function Start-ScheduledTask($TaskName) {
    # SCHTASKS /Run [/S system [/U username [/P [password]]]] [/I]
    #          /TN taskname [/HRESULT] [/?]
    Invoke-CommandLine -FilePath     \"$($env:SystemRoot)\\System32\\schtasks.exe\" `
                       -ArgumentList @( \"/Run\", \"/S\", \"localhost\", \"/TN\", \"`\"$TaskName`\"\" );
}

Function Enable-ScheduledTask($TaskName) {
    # SCHTASKS /Change [/S system [/U username [/P [password]]]] /TN taskname
    #      { [/RU runasuser] [/RP runaspassword] [/TR taskrun] [/ST starttime]
    #        [/RI interval] [ {/ET endtime | /DU duration} [/K] ]
    #        [/SD startdate] [/ED enddate] [/ENABLE | /DISABLE] [/IT] [/Z] }
    #        [/HRESULT] [/?]
    Invoke-CommandLine -FilePath     \"$($env:SystemRoot)\\System32\\schtasks.exe\" `
                       -ArgumentList @( \"/Change\", \"/S\", \"localhost\", \"/TN\", \"`\"$TaskName`\"\", \"/ENABLE\" );
}

Function Disable-ScheduledTask($TaskName) {
    # SCHTASKS /Change [/S system [/U username [/P [password]]]] /TN taskname
    #      { [/RU runasuser] [/RP runaspassword] [/TR taskrun] [/ST starttime]
    #        [/RI interval] [ {/ET endtime | /DU duration} [/K] ]
    #        [/SD startdate] [/ED enddate] [/ENABLE | /DISABLE] [/IT] [/Z] }
    #        [/HRESULT] [/?]
    Invoke-CommandLine -FilePath     \"$($env:SystemRoot)\\System32\\schtasks.exe\" `
                       -ArgumentList @( \"/Change\", \"/S\", \"localhost\", \"/TN\", \"`\"$TaskName`\"\", \"/DISABLE\" );
}

Function ScheduledTask-Exists($taskName) {
   $schedule = new-object -com Schedule.Service
   $schedule.connect()
   $tasks = $schedule.getfolder(\"\\\").gettasks(0)
   foreach ($task in ($tasks | select Name)) {
      #echo \"TASK: $($task.name)\"
      if($task.Name -eq $taskName) {
         #write-output \"$task already exists\"
         return $true
      }
   }
   return $false
}

Function StringIsNullOrWhitespace([string] $string)
{
    if ($string -ne $null) { $string = $string.Trim() }
    return [string]::IsNullOrEmpty($string)
}

function Invoke-CommandLine
{
    param
    (
        [Parameter(Mandatory=$true)]
        [string] $FilePath,
        [Parameter(Mandatory=$false)]
        [string[]] $ArgumentList = @( ),
        [Parameter(Mandatory=$false)]
        [string[]] $SuccessCodes = @( 0 )
    )
    $SanitizedArgList = $ArgumentList | ForEach-Object { if($_.StartsWith(\"/RP\")) { \"/RP ********\" } else { $_ } }
    Write-Host ($FilePath + \" \" + ($SanitizedArgList -Join \" \"));
    
    $process = Start-Process -FilePath $FilePath -ArgumentList $ArgumentList -Wait -NoNewWindow -PassThru;
    if( $SuccessCodes -notcontains $process.ExitCode )
    {
        throw new-object System.InvalidOperationException(\"process terminated with exit code '$($process.ExitCode)'.\");
    }
}

function Invoke-OctopusStep
{
    param
    (
        [Parameter(Mandatory=$true)]
        [hashtable] $OctopusParameters
    )

    $taskName = $OctopusParameters['TaskName']
    $runAsUser = $OctopusParameters['RunAsUser']
    $runAsPassword = $OctopusParameters['RunAsPassword']
    $command = $OctopusParameters['Command']
    $arguments = $OctopusParameters['Arguments']
    $schedule = $OctopusParameters['Schedule']
    $startTime = $OctopusParameters['StartTime']
    $startDate = $OctopusParameters['StartDate']

    if( $OctopusParameters.ContainsKey(\"RunWithElevatedPermissions\") )
    {
        $runWithElevatedPermissions = [boolean]::Parse($OctopusParameters['RunWithElevatedPermissions'])
    }
    else
    {
        $runWithElevatedPermissions = $false;
    }

    $days = $OctopusParameters['Days']
    $interval = $OctopusParameters['Interval']
    $duration = $OctopusParameters['Duration']
    $Modifier = $OctopusParameters['Modifier']

    if((ScheduledTask-Exists($taskName))){
        Write-Output \"$taskName already exists, Tearing down...\"
        Write-Output \"Stopping $taskName...\"
        Stop-ScheduledTask($taskName)
        Write-Output \"Successfully Stopped $taskName\"
        Write-Output \"Deleting $taskName...\"
        Delete-ScheduledTask($taskName)
        Write-Output \"Successfully Deleted $taskName\"
    }
    Write-Output \"Creating Scheduled Task - $taskName\"

    Create-ScheduledTask $taskName $runAsUser $runAsPassword $command $arguments $schedule $startTime $startDate $runWithElevatedPermissions $days $interval $duration $Modifier
    Write-Output \"Successfully Created $taskName\"

    if( $OctopusParameters.ContainsKey('TaskStatus') )
    {
        $taskStatus = $OctopusParameters['TaskStatus']
        if( -not (StringIsNullOrWhiteSpace($taskStatus)) )
        {
            if ( $taskStatus -eq \"ENABLE\" )
            {
                Enable-ScheduledTask($taskName)
                Write-Output \"$taskName enabled\"
            }
            elseif ( $taskStatus -eq \"DISABLE\" )
            {
                Disable-ScheduledTask($taskName)
                Write-Output \"$taskName disabled\"
            }
            else
            {
                Write-Output \"$taskName status unchanged (on create, will be enabled)\"
            }
        }
    }

    if( $OctopusParameters.ContainsKey(\"StartNewTaskNow\") )
    {
        $startNewTaskNow = [boolean]::Parse($OctopusParameters['StartNewTaskNow'])
    }
    else
    {
        $startNewTaskNow = $false;
    }

    if( $startNewTaskNow ) {
      Start-ScheduledTask($taskName)
    }
}


# only execute the step if it's called from octopus deploy,
# and skip it if we're runnning inside a Pester test
if( Test-Path -Path \"Variable:OctopusParameters\" )
{
    Invoke-OctopusStep -OctopusParameters $OctopusParameters;
}
",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptSource": "Inline"
  },
  "Parameters": [
    {
      "Name": "TaskName",
      "Label": "Name",
      "HelpText": "The name of the Scheduled Task",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "RunAsUser",
      "Label": "User",
      "HelpText": "The User that the task will run as",
      "DefaultValue": "System",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "RunAsPassword",
      "Label": "Password",
      "HelpText": "Specifying a password allows the task to run when the user is not logged on to the server.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Name": "Command",
      "Label": "Action",
      "HelpText": "The Action that the task executes. Usually a path to the executable",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "Arguments",
      "Label": "Arguments",
      "HelpText": "A value that specifies any arguments to be passed to run the task.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "Schedule",
      "Label": "Schedule",
      "HelpText": "When the Task is triggered",
      "DefaultValue": "DAILY",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "MINUTE|Every Minute
HOURLY|Hourly
DAILY|Daily
WEEKLY|Weekly
WEEKDAYS|Weekdays
ONCE|One off
ONSTART|On Start
ONLOGON|On Logon
ONIDLE|On Idle
MONTHLY|Monthly"
      }
    },
    {
      "Name": "StartTime",
      "Label": "Start Time",
      "HelpText": "The Time the task will run. Use the format HH:mm:ss",
      "DefaultValue": "12:00",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "StartDate",
      "Label": "Start Date",
      "HelpText": "The date the task will start running. use the format MM/dd/yyyy",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "Modifier",
      "Label": "Modifier",
      "HelpText": "A value that specifies how often the task runs within its schedule type. For ONCE, ONSTART, ONLOGON and ONIDLE any value can be used since it will be ignored (They do not use modifiers with MO).",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "Interval",
      "Label": "Interval",
      "HelpText": "A value that specifies the repetition interval in minutes.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "Duration",
      "Label": "Duration",
      "HelpText": "A value that specifies the duration to run the task. The time format is HH:mm (24-hour time).",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "RunWithElevatedPermissions",
      "Label": "RunWithElevatedPermissions",
      "HelpText": null,
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Name": "Days",
      "Label": "Days",
      "HelpText": "A value that specifies the day of the week to run the task. Valid values are: MON, TUE, WED, THU, FRI, SAT, SUN and for MONTHLY schedules 1 - 31 (days of the month). The wildcard character (*) specifies all days.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText",
        "Octopus.SelectOptions": ""
      }
    },
    {
      "Name": "StartNewTaskNow",
      "Label": "StartNewTaskNow",
      "HelpText": null,
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Name": "TaskStatus",
      "Label": "TaskStatus",
      "HelpText": "Whether the task is enabled, disabled, or left as-is when this step completes",
      "DefaultValue": "ENABLE",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "ENABLE|Enable
DISABLE|Disable
LEAVE|Leave Unchanged"
      },
      "Links": {}
    }
  ],
  "LastModifiedOn": "2022-03-29T11:49:45.384Z",
  "LastModifiedBy": "harrisonmeister",
  "$Meta": {
    "ExportedAt": "2022-03-29T11:49:45.384Z",
    "OctopusVersion": "2022.1.2152",
    "Type": "ActionTemplate"
  },
  "Category": "windows"
}
