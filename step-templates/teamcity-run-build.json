{
  "Id": "a7fa3e51-14aa-4bb9-8686-781adc9bf93e",
  "Name": "TeamCity - Run Build",
  "Description": "Trigger a specific Team City build from an Octopus Deploy process and wait for the result. The step will fail if the build fails.",
  "ActionType": "Octopus.Script",
  "Version": 2,
  "Properties": {
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptBody": "$teamCityBuildConfigId = $OctopusParameters['tcrb_TeamCityBuildConfigurationId']\r\n$teamCityUrl = $OctopusParameters['tcrb_TeamCityUrl']\r\n$teamCityUsername = $OctopusParameters['tcrb_TeamCityUsername']\r\n$teamCityPassword = $OctopusParameters['tcrb_TeamCityPassword']\r\n$teamCityInterval = [int]::Parse($OctopusParameters['tcrb_TeamCityInterval'])\r\n$teamCityBuildParams = $OctopusParameters['tcrb_BuildParams']\r\n\r\nfunction Start-TeamCityBuild($Url, $Username, $Password, $BuildConfigId, $BuildParams) {\r\n    $endpoint = \"${Url}/httpAuth/app/rest/buildQueue\"\r\n    $content = \"<build><buildType id=`\"${BuildConfigId}`\" /><properties>\"\r\n    if (-not [String]::IsNullOrEmpty($BuildParams)) {\r\n        foreach ($param in (ConvertFrom-Csv -Delimiter '=' -Header Name,Value -InputObject $BuildParams)) {\r\n            $name = $param.Name.Replace('\"', '&quot;')\r\n            $value = $param.Value.Replace('\"', '&quot;')\r\n            $content += \"<property name=`\"${name}`\" value=`\"${value}`\" />\"\r\n        }\r\n    }\r\n    $content += \"</properties></build>\"    \r\n    $encodedContent = [System.Text.Encoding]::UTF8.GetBytes($content)\r\n\r\n    Write-Host \"Triggering build with Id ${BuildConfigId} in TeamCity. Server: ${Url}\"\r\n\r\n    $req = [System.Net.WebRequest]::Create($endpoint)\r\n    $req.Credentials = New-Object System.Net.NetworkCredential($Username, $Password)\r\n    $req.Method = \"POST\"\r\n    $req.ContentType = \"application/xml\"\r\n\r\n    $req.ContentLength = $encodedContent.length\r\n    $requestStream = $req.GetRequestStream()\r\n    $requestStream.Write($encodedContent, 0, $encodedContent.length)\r\n    $requestStream.Close()\r\n\r\n    $resp = $req.GetResponse()\r\n    $reader = New-Object System.IO.StreamReader($resp.GetResponseStream())\r\n    $result = [xml]$reader.ReadToEnd()\r\n    $buildUrl = $result.build.webUrl\r\n\r\n    Write-Host $buildUrl\r\n    Write-Host \"================================================================================\"\r\n\r\n    return $result\r\n}\r\n\r\nfunction Get-TeamCityBuildState($Url, $Username, $Password, $BuildInfo) {\r\n    $href = $BuildInfo.href\r\n    $buildId = $BuildInfo.id\r\n    $endpoint = \"${Url}${href}\"\r\n\r\n    Write-Host \"Getting state of build ${buildId} in TeamCity. Server: ${Url}\"\r\n\r\n    $req = [System.Net.WebRequest]::Create($endpoint)\r\n    $req.Credentials = New-Object System.Net.NetworkCredential($Username, $Password)\r\n    $req.Method = \"GET\"\r\n\r\n    $resp = $req.GetResponse()\r\n    $reader = New-Object System.IO.StreamReader($resp.GetResponseStream())\r\n    return [xml]$reader.ReadToEnd();\r\n}\r\n\r\nfunction Invoke-TeamCityBuild ($Url, $Username, $Password, $BuildConfigId, $Interval, $BuildParams) {\r\n    $build = Start-TeamCityBuild -Url $Url -Username $Username -Password $Password -BuildConfigId $BuildConfigId -BuildParams $teamCityBuildParams\r\n    $buildInfo = $build.build\r\n\r\n    while ($true) {\r\n        $buildState = Get-TeamCityBuildState -Url $teamCityUrl -Username $teamCityUsername -Password $teamCityPassword -BuildInfo $buildInfo\r\n        Write-Host $buildState.build.state\r\n        if ($buildState.build.state -eq 'finished') {\r\n            return $buildState.build\r\n        }\r\n        \r\n        Start-Sleep -Seconds $Interval\r\n    }\r\n}\r\n\r\n$buildResult = Invoke-TeamCityBuild -Url $teamCityUrl -Username $teamCityUsername -Password $teamCityPassword -BuildConfigId $teamCityBuildConfigId -Interval $teamCityInterval -BuildParams $teamCityBuildParams\r\n$message = $buildResult.statusText\r\nWrite-Host \"================================================================================\"\r\nWrite-Host $buildResult.webUrl\r\nif ($buildResult.status -eq 'FAILURE') {\r\n    Write-Host \"Build failed: ${message}\"\r\n    exit 1\r\n}\r\nelseif ($message -eq 'Canceled') {\r\n    Write-Host \"Build canceled: ${message}\"\r\n    exit 2\r\n}\r\nelse {\r\n    Write-Host \"Build successful: ${message}\"\r\n    exit 0\r\n}\r\n"
  },
  "SensitiveProperties": {},
  "Parameters": [
    {
      "Name": "tcrb_TeamCityBuildConfigurationId",
      "Label": "BuildConfigurationId",
      "HelpText": "The Id of the build configuration to trigger.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "tcrb_TeamCityUrl",
      "Label": "TeamCityUrl",
      "HelpText": "The URL of the Team City server.\nE.g. `http://teamcity.example.com`",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "tcrb_TeamCityUsername",
      "Label": "TeamCityUsername",
      "HelpText": "The username to use for accessing TeamCity.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "tcrb_TeamCityPassword",
      "Label": "TeamCityPassword",
      "HelpText": "The password for the TeamCity user.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Name": "tcrb_TeamCityInterval",
      "Label": "TeamCityInterval",
      "HelpText": "Number of seconds to wait between each check of the build's state.",
      "DefaultValue": "5",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "tcrb_BuildParams",
      "Label": "BuildParameters",
      "HelpText": "Line-delimited list of parameters to add to the build in the form <name>=<value>\n<name> and <value> can be contained in quotes.\nE.g.\nparam1=param_value1\nenv.param2=\"env_param2\"\nsystem.param3=sys_param2",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "MultiLineText"
      }
    }
  ],
  "LastModifiedOn": "2017-09-15T09:34:00.000+00:00",
  "LastModifiedBy": "zappy-shu",
  "$Meta": {
    "ExportedAt": "2017-09-15T09:34:00.000+00:00",
    "OctopusVersion": "3.16.2",
    "Type": "ActionTemplate"
  },
  "Category": "teamcity"
}
