{
    "Id": "302a1282-c139-4e0f-9076-cd4b16d8b795",
    "Name": "AWS - Change EC2 Instance State",
    "Description": "This step can Start, Stop or Terminate an EC2 instance.

Works well with the \"_AWS - Launch EC2 Instance_\" Community Step Template.

[AWS Tools for Windows PowerShell](http://aws.amazon.com/powershell/) must be installed on the Server/Target you plan on running this step template on.",
    "ActionType": "Octopus.Script",
    "Version": 1,
    "CommunityActionTemplateId": null,
    "Properties": {
      "Octopus.Action.Script.Syntax": "PowerShell",
      "Octopus.Action.Script.ScriptSource": "Inline",
      "Octopus.Action.RunOnServer": "false",
      "Octopus.Action.Script.ScriptBody": "# Running outside octopus
param(
    [string]$odInstanceId,
    [string]$odState,
    [string]$odAccessKey,
    [string]$odSecretKey,
    [switch]$whatIf
) 

$ErrorActionPreference = \"Stop\" 

function Get-Param($Name, [switch]$Required, $Default) {
    $result = $null

    if ($OctopusParameters -ne $null) {
        $result = $OctopusParameters[$Name]
    }

    if ($result -eq $null) {
        $variable = Get-Variable $Name -EA SilentlyContinue   
        if ($variable -ne $null) {
            $result = $variable.Value
        }
    }

    if (!$result -or $result -eq $null) {
        if ($Default) {
            $result = $Default
        } elseif ($Required) {
            throw \"Missing parameter value $Name\"
        }
    }

    return $result
}


& {
    param(
        [string]$odInstanceId,
        [string]$odState,
        [string]$odAccessKey,
        [string]$odSecretKey
    )
    
    # If AWS key's are not provided as params, attempt to retrieve them from Environment Variables
    if ($odAccessKey -or $odSecretKey) {
        Set-AWSCredentials -AccessKey $odAccessKey -SecretKey $odSecretKey -StoreAs default
    } elseif (([Environment]::GetEnvironmentVariable(\"AWS_ACCESS_KEY\", \"Machine\")) -or ([Environment]::GetEnvironmentVariable(\"AWS_SECRET_KEY\", \"Machine\"))) {
        Set-AWSCredentials -AccessKey ([Environment]::GetEnvironmentVariable(\"AWS_ACCESS_KEY\", \"Machine\")) -SecretKey ([Environment]::GetEnvironmentVariable(\"AWS_SECRET_KEY\", \"Machine\")) -StoreAs default
    } else {
        throw \"AWS API credentials were not available/provided.\"
    }

    if ($odInstanceId) {
        $instanceObj = (Get-EC2Instance $odInstanceId | select -ExpandProperty Instances)
        $instanceCount = ($instanceObj | measure).Count

        if ($instanceCount -eq 1) {
            $instanceId = ($instanceObj).InstanceId
            
            Write-Output (\"------------------------------\")
            Write-Output (\"Checking/Setting the EC2 Instance state:\")
            Write-Output (\"------------------------------\")
            
            $currentState = (Get-EC2Instance $instanceId).Instances.State.Name

            if ($odState -eq \"running\" -and $currentState -ne \"running\") {
                $changeInstanceStateObj = (Start-EC2Instance -InstanceId $instanceId)
            }
            elseif ($odState -eq \"absent\" -and $currentState -ne \"terminated\") {
                $changeInstanceStateObj = (Remove-EC2Instance -InstanceId $instanceId -Force)
            }
            elseif ($odState -eq \"stopped\" -and $currentState -ne \"stopped\") {
                $changeInstanceStateObj = (Stop-EC2Instance -InstanceId $instanceId)
            }

            $timeout = new-timespan -Seconds 120
            $sw = [diagnostics.stopwatch]::StartNew()

            while ($true) {
                $currentState = (Get-EC2Instance $instanceId).Instances.State.Name

                if ($currentState -eq \"running\" -and $odState -eq \"running\") {
                    break
                }
                elseif ($currentState -eq \"terminated\" -and $odState -eq \"absent\") {
                    break
                }
                elseif ($currentState -eq \"stopped\" -and $odState -eq \"stopped\") {
                    break
                }

                Write-Output (\"$(Get-Date) | Waiting for Instance '$instanceId' to transition from state: $currentState\")

                if ($sw.elapsed -gt $timeout) { throw \"Timed out waiting for desired state\" }

                Sleep -Seconds 5
            }
 
            Write-Output (\"------------------------------\")
            Write-Output (\"$(Get-Date) | $($instanceId) state: $currentState\")
            Write-Output (\"------------------------------\")
        }
        else
        {
            Write-Output (\"Instance '$instanceId' could not be found...?\")
        }
    }
 } `
 (Get-Param 'odInstanceId' -Required) `
 (Get-Param 'odState' -Required) `
 (Get-Param 'odAccessKey') `
 (Get-Param 'odSecretKey')"
    },
    "Parameters": [
      {
        "Id": "3eec5a11-9095-40f6-bebb-71ccb94c73db",
        "Name": "odInstanceId",
        "Label": "Instance ID",
        "HelpText": "The EC2 Instance ID of the Instance you would like to add Tags to.",
        "DefaultValue": "i-xxxxxxxxxxxxxxxxx",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        },
        "Links": {}
      },
      {
        "Id": "94b68517-858c-4232-bd1a-c760a22750a1",
        "Name": "odState",
        "Label": "Instance State",
        "HelpText": "The State you would like the specified EC2 Instance to be in. For example \"Running\" (ie Start EC2 Instance).",
        "DefaultValue": "running",
        "DisplaySettings": {
          "Octopus.ControlType": "Select",
          "Octopus.SelectOptions": "running|Start EC2 Instance
stopped|Stop EC2 Instance
absent|Terminate EC2 Instance"
        },
        "Links": {}
      },
      {
        "Id": "e1c98924-6f3b-45fe-a4b8-16329a9a50ea",
        "Name": "odAccessKey",
        "Label": "Access Key (Kind-of Optional)",
        "HelpText": "An Access Key with permissions to create the desired EC2 instance.
Note: If empty, this step will attempt to use the value contained in the Machine Environment Variable \"AWS\\_ACCESS\\_KEY\".

Further Reading:
[https://docs.aws.amazon.com/general/latest/gr/managing-aws-access-keys.html](https://docs.aws.amazon.com/general/latest/gr/managing-aws-access-keys.html)",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        },
        "Links": {}
      },
      {
        "Id": "45557d48-5f1a-4523-9f42-f4a53571d0ce",
        "Name": "odSecretKey",
        "Label": "Secret Key (Kind-of Optional)",
        "HelpText": "The Secret Key associated with the above Access Key.
Note: If empty, this step will attempt to use the value contained in the Machine Environment Variable \"AWS\\_SECRET\\_KEY\".

Further Reading:
[https://docs.aws.amazon.com/general/latest/gr/managing-aws-access-keys.html](https://docs.aws.amazon.com/general/latest/gr/managing-aws-access-keys.html)",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        },
        "Links": {}
      }
    ],
    "LastModifiedBy": "tclydesdale",
    "$Meta": {
      "ExportedAt": "2018-01-30T13:25:57.198Z",
      "OctopusVersion": "4.1.9",
      "Type": "ActionTemplate"
    },
    "Category": "aws"
  }
  
