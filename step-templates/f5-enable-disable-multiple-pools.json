{
  "Id": "b3d76f46-e074-47ff-b800-3020c3f47866",
  "Name": "F5 - Enable or Disable Multiple Pools",
  "Description": "F5 - Enable, Disable, or Force Offline multiple pools with optional wait for connections to drop",
  "ActionType": "Octopus.Script",
  "Version": 2,
  "Properties": {
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.RunOnServer": "false",
    "Octopus.Action.Script.ScriptBody": "#region Verify variables\n\n#Verify RunCondition can be converted to boolean.\n$runCondition = $false\nIf ([string]::IsNullOrEmpty($OctopusParameters['RunCondition'])){\n    Throw \"Run Condition cannot be null.\"\n}\nElse{\n    Try{\n        $runCondition = [System.Convert]::ToBoolean($OctopusParameters['RunCondition'])\n        Write-Host (\"Run Condition: '\" + $OctopusParameters['RunCondition'] + \"' converts to boolean: \" + $runCondition + \".\")\n\n        #If run condition evaluates to false, just return/stop processing.\n        If (!$runCondition){\n            Write-Host \"Skipping step.\"\n            return\n        }\n    }\n    Catch{\n        Throw \"Cannot convert Run Condition: '\" + $OctopusParameters['RunCondition'] + \"' to boolean value.\"\n    }\n}\n\n#No need to verify WaitForConnections as this is a checkbox and will always have a boolean value. Report value back for logging.\nWrite-Host (\"Wait for connections to drop to 0: \" + $OctopusParameters['WaitForConnections'])\n\n#Verify MaxWaitTime can be converted to integer.\nIf ([string]::IsNullOrEmpty($OctopusParameters['MaxWaitTime'])){\n    Throw \"Maximum wait time in seconds cannot be null.\"\n}\n\n[int]$maxWaitTime = 0\n[bool]$result = [int]::TryParse($OctopusParameters['MaxWaitTime'], [ref]$maxWaitTime )\n\nIf ($result){\n    Write-Host (\"Maximum wait time in seconds: \" + $maxWaitTime)\n}\nElse{\n    Throw \"Cannot convert Maximum wait time in seconds: '\" + $OctopusParameters['MaxWaitTime'] + \"' to integer.\"\n}\n\n#No need to verify LtmStatus as this is a drop down box and will always have a value. Report back for logging.\nWrite-Host (\"LTM Status: \" + $OctopusParameters['LtmStatus'])\n\n<#\nVerify List of LTM info.\nLTM Info should contain a list of all Pools, IPs, and Ports. Each set should be delmited by carriage returns, each valude delimited by pipe (|).\nHere is an example:\nPool_192.168.103.226_443|192.168.103.174|443 \nPool_192.168.103.226_80|192.168.103.174|80\n#>\nIf ([string]::IsNullOrEmpty($OctopusParameters['LtmInfo'])){\n    Throw \"List of LTM info cannot be null.\"\n}\n#Write out LTM info. If the project is using variables (and it most likely is), it may be difficult to debug without seeing what it evaluated to.\nWrite-Host (\"List of LTM info: \" + [Environment]::NewLine + $OctopusParameters['LtmInfo'])\n$f5Pools = ($OctopusParameters['LtmInfo']).Split([Environment]::NewLine)\nForeach ($f5Pool in $f5Pools){\n    #Validate 3 values are passed in per line.\n    $poolInfo = $f5Pool.Split(\"|\")\n    If ($poolInfo.Count -ne 3){\n        Throw (\"Invalid pool info. Expecting 'PoolName|IpAddress|Port': '\" + $f5Pool + \"'.\")\n    }\n    \n    #Validate that each value is not null.\n    Foreach ($f5Parm in $poolInfo){\n        If ([string]::IsNullOrEmpty($f5Parm)){\n            Throw (\"Invalid pool info. Expecting 'PoolName|IpAddress|Port': '\" + $f5Pool + \"'. None can be empty.\")\n        }\n    }\n    \n    #Validate IP Address (second value).\n    If ( !($poolInfo[1] -as [ipaddress]) ){\n        Throw (\"Invalid IP Address: '\" + $poolInfo[1] + \"'.\")\n    }\n\n    #Validate Port (third value).\n    [int]$port = 0\n    [bool]$result = [int]::TryParse($poolInfo[2], [ref]$port )\n    \n    If ( !($result) ){\n        Throw (\"Invalid port (expecting integer): '\" + $poolInfo[2] + \"'.\")\n    }\n}\n\n#Verify HostName is not null.\nIf ([string]::IsNullOrEmpty($OctopusParameters['HostName'])){\n    Throw \"LTM Host name cannot be null.\"\n}\nWrite-Host (\"LTM Host: \" + $OctopusParameters['HostName'])\n\n#Verify Username is not null.\nIf ([string]::IsNullOrEmpty($OctopusParameters['Username'])){\n    Throw \"LTM username cannot be null.\"\n}\nWrite-Host (\"Username: \" + $OctopusParameters['Username'])\n\n#Verify Password is not null.\nIf ([string]::IsNullOrEmpty($OctopusParameters['Password'])){\n    Throw \"LTM password cannot be null.\"\n}\n\n#Verify ConnectionCount can be converted to integer.\nIf ([string]::IsNullOrEmpty($OctopusParameters['ConnectionCount'])){\n    Throw \"Kill connections when less than or equal to cannot be null.\"\n}\n\n[int]$killConnectionWhenLE = 0\n[bool]$result = [int]::TryParse($OctopusParameters['ConnectionCount'], [ref]$killConnectionWhenLE )\n\nIf ($result){\n    Write-Host (\"Kill connections when less than or equal to: \" + $killConnectionWhenLE)\n}\nElse{\n    Throw \"Cannot convert Kill connections when less than or equal to: '\" + $OctopusParameters['ConnectionCount'] + \"' to integer.\"\n}\n\n#endregion\n\n#region Functions\n\nFunction Set-F5PoolState{\n    param(\n        $f5Pools,\n        [switch]$forceOffline\n    )\n    \n    Foreach ($f5Pool in $f5Pools){\n        $poolInfo = $f5Pool.Split(\"|\")\n        \n        $poolName = $poolInfo[0]\n        $ipAddress = $poolInfo[1]\n        $port = $poolInfo[2]\n        \n        $member = ($ipAddress + \":\" + $port)\n        \n        $state = $OctopusParameters['LtmStatus']\n        If ($forceOffline){\n            $state = \"Offline\"\n        }\n        \n        Write-Host \"Setting '$ipAddress' to '$state' in '$poolName' pool.\"\n        Set-F5.LTMPoolMemberState -Pool $poolName -Member $member -state $state\n    }\n}\n\nFunction Wait-ConnectionCount(){\n    param(\n        $f5Pools,\n        [int]$maxWaitTime,\n        [int]$connectionCount\n    )\n    \n    #Start stop watch now.\n    $elapsed = [System.Diagnostics.Stopwatch]::StartNew()\n    \n    Foreach ($f5Pool in $f5Pools){\n        $poolInfo = $f5Pool.Split(\"|\")\n        \n        $poolName = $poolInfo[0]\n        $ipAddress = $poolInfo[1]\n        $port = $poolInfo[2]\n        \n        $MemberDef = New-Object -TypeName iControl.CommonIPPortDefinition\n        $MemberDef.address = $ipAddress\n        $MemberDef.port = $port\n        $MemberDefAofA = New-Object -TypeName \"iControl.CommonIPPortDefinition[][]\" 1,1\n        $MemberDefAofA[0][0] = $MemberDef\n        $cur_connections = 100\n        \n        Write-Host (\"Pool name: \" + $poolName)\n        Write-Host (\"IP Address: \" + $ipAddress)\n        Write-Host (\"Port: \" + $port)\n\n        While ($cur_connections -gt $connectionCount -and $elapsed.ElapsedMilliseconds -lt ($maxWaitTime * 1000)){\n            $MemberStatisticsA = (Get-F5.iControl).LocalLBPoolMember.get_statistics( (, $poolName), $MemberDefAofA)\n            $MemberStatisticEntry = $MemberStatisticsA[0].statistics[0]\n            $Statistics = $MemberStatisticEntry.statistics\n            \n            Foreach ($Statistic in $Statistics){\n                $type = $Statistic.type;\n                $value = $Statistic.value;\n                If ( $type -eq \"STATISTIC_SERVER_SIDE_CURRENT_CONNECTIONS\" ){\n                    #Just use the low value.  Odds are there aren't over 2^32 current connections. If your site is this big, you'll have to convert this to a 64 bit number.\n                    $cur_connections = $value.low; \n                    Write-Host \"Current Connections: $cur_connections\"\n                }\n            }\n            \n            If ($cur_connections -gt $connectionCount -and $elapsed.ElapsedMilliseconds -lt ($maxWaitTime * 1000)){\n                Start-Sleep -Seconds 5\n            }\n        }\n    }\n}\n\n#endregion\n\n#region Process\n\n#Load the F5 powershell iControl snapin\nAdd-PSSnapin iControlSnapin\nInitialize-F5.iControl -HostName $OctopusParameters['HostName'] -Username $OctopusParameters['Username'] -Password $OctopusParameters['Password']\n\nSet-F5PoolState -f5Pools $f5Pools\n\nIf (($OctopusParameters['LtmStatus'] -ne \"Enabled\") -and ($OctopusParameters['WaitForConnections'] -eq \"True\"))\n{\n    Write-Host \"Waiting for connections to drain before deploying.  This could take a while...\"\n    Wait-ConnectionCount -f5Pools $f5Pools -maxWaitTime $maxWaitTime -connectionCount $killConnectionWhenLE\n    \n    #We have now waited the desired amount, go ahead and force offline and move on with deployment.\n    Set-F5PoolState -f5Pools $f5Pools -forceOffline\n}\n\n\n#endregion\n\n",
    "Octopus.Action.Script.ScriptFileName": null,
    "Octopus.Action.Package.FeedId": null,
    "Octopus.Action.Package.PackageId": null
  },
  "Parameters": [
    {
      "Id": "83c45726-806c-4d06-8ae3-22b13b89d5a7",
      "Name": "RunCondition",
      "Label": "Run Condition",
      "HelpText": "Boolean value or expression that determines if this step should run.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      },
      "Links": {}
    },
    {
      "Id": "fb610f88-0d64-40cf-a74d-0bb8405755c8",
      "Name": "WaitForConnections",
      "Label": "Wait for connections to drop to 0?",
      "HelpText": "If checked, the deployment won't continue until current connections on the node = 0",
      "DefaultValue": "True",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      },
      "Links": {}
    },
    {
      "Id": "af92387f-ba2d-4b44-a8f1-7ebccf01032a",
      "Name": "MaxWaitTime",
      "Label": "Maximum wait time in seconds",
      "HelpText": "Maximum wait time (in seconds) before killing connections and moving on.",
      "DefaultValue": "300",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      },
      "Links": {}
    },
    {
      "Id": "d8c955b3-6c75-49cf-9396-25dc0fffb611",
      "Name": "LtmStatus",
      "Label": "LTM Status",
      "HelpText": "State member will be put into (Enabled, Disabled, Offline)  \n\n- **Disabled** continues to process persistent and active connections. It can accept new connections only if the connections belong to an existing persistence session.  \n\n- **Offline** allows existing connections to time out, but no new connections are allowed.",
      "DefaultValue": "Disabled",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "Enabled|Enable\nDisabled|Disable\nOffline|Forced Offline"
      },
      "Links": {}
    },
    {
      "Id": "57b114a3-fa6a-40d6-9c42-38ba80127fca",
      "Name": "LtmInfo",
      "Label": "List of LTM info",
      "HelpText": "Enter list of all Pools, IPs, and Ports. Each set delimited by carriage returns, each value delimited by pipe (|). Here is an example:\n\nPool\\_192.168.103.226\\_443|192.168.103.174|443  \nPool\\_192.168.103.226\\_80|192.168.103.174|80",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "MultiLineText"
      },
      "Links": {}
    },
    {
      "Id": "3fdbf9bc-9ee8-4610-9c34-24f1975cf8c7",
      "Name": "HostName",
      "Label": "LTM Host name",
      "HelpText": null,
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      },
      "Links": {}
    },
    {
      "Id": "61480ba0-f715-46ef-b5ad-1c6b6f580273",
      "Name": "ConnectionCount",
      "Label": "Kill connections when less than or equal to",
      "HelpText": "The default is to wait until there are no connections left on the node.  If you don't want to wait for zero connections before deploying, you can put a value here and when that number of connections is reached the deployment will happen killing the rest of the connected sessions.",
      "DefaultValue": "0",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      },
      "Links": {}
    },
    {
      "Id": "d0f276b6-ce27-4006-b3c2-00c669bfc42d",
      "Name": "Username",
      "Label": "LTM username",
      "HelpText": "Credential used to access F5 Soap API",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      },
      "Links": {}
    },
    {
      "Id": "921b6a08-0ffe-4945-91c3-8520a3052ce9",
      "Name": "Password",
      "Label": "LTM password",
      "HelpText": "Credential used to access F5 Soap API",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      },
      "Links": {}
    }
  ],
  "LastModifiedBy": "tbrasch",
  "$Meta": {
    "ExportedAt": "2017-06-02T14:54:52.840Z",
    "OctopusVersion": "3.13.6",
    "Type": "ActionTemplate"
  },
  "Category": "F5"
}


