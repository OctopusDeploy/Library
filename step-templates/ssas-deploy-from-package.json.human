{
  "Id": "1409c3dd-e87d-49f1-9b4f-382af800b75d",
  "Name": "Deploy SSAS from Package",
  "Description": "Deploys SSAS packages using Microsoft.AnalysisServices.Deployment.exe.",
  "ActionType": "Octopus.Script",
  "Version": 14,
  "CommunityActionTemplateId": null,
  "Properties": {
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptBody": "$ErrorActionPreference = 'Stop'

function Confirm-Argument($name, $value) {
    if (!$value) {
        throw ('Missing required value for parameter ''{0}''.' -f $name)
    }
    return $value
}

# Returns the Microsoft.AnalysisServices.Deployment.exe path
function Get-SSASexe
{
\t# Search for file
    $ssasExe = Get-ChildItem -Path \"C:\\Program Files (x86)\" -Recurse | Where-Object {$_.Name -eq \"Microsoft.AnalysisServices.Deployment.exe\"}
    
    # Check for null
    if ($null -eq $ssasExe)
    {
    \t# Display error
        Write-Error \"Unable to find Microsoft.AnalysisServices.Deployment.exe!\"
    }

    # Check for mulitple results
    if ($ssasExe.GetType().IsArray)
    {
        # Declare local variables
        $highestVersion = $null
        
        # Display multiple returned
        Write-Host \"Multiple files returned, finding highest version ...\"

        # Loop through results
        foreach ($file in $ssasExe)
        {
            # Check version 
            if (($null -eq $highestVersion) -or ([version]$file.VersionInfo.ProductVersion) -gt [version]$highestVersion.VersionInfo.ProductVersion)
            {
                # Assign it
                $highestVersion = $file
            }
        }

        # Overwrite original
        $ssasExe = $highestVersion
    }
    
    # Return the path
    return $ssasExe.FullName
}

# Update Deploy xml (.deploymenttargets)
function Update-Deploy {
\t[xml]$deployContent = Get-Content $file
\t$deployContent.DeploymentTarget.Database = $ssasDatabase 
\t$deployContent.DeploymentTarget.Server = $ssasServer
\t$deployContent.DeploymentTarget.ConnectionString = 'DataSource=' + $ssasServer + ';Timeout=0'
\t$deployContent.Save($file)
}
# Update Config xml (.configsettings)
function Update-Config {
\t[xml]$configContent = Get-Content $file
    $configContent.ConfigurationSettings.Database.DataSources.DataSource.ConnectionString = 'Provider=SQLNCLI11.1;Data Source=' + $dbServer + ';Integrated Security=SSPI;Initial Catalog=' + $dbDatabase
\t$configContent.Save($file)
}
# Update Config xml (.deploymentoptions)
function Update-Option {
\t[xml]$optionContent = Get-Content $file
    $optionContent.DeploymentOptions.ProcessingOption = 'DoNotProcess'
\t$optionContent.Save($file)
}

# Get arguments
$ssasPackageStepName = Confirm-Argument 'SSAS Package Step Name' $OctopusParameters['SsasPackageStepName']
$ssasServer = Confirm-Argument 'SSAS server name' $OctopusParameters['SsasServer']
$ssasDatabase = Confirm-Argument 'SSAS database name' $OctopusParameters['SsasDatabase']
$dbServer = Confirm-Argument 'SSAS source server' $OctopusParameters['SrcServer']
$dbDatabase = Confirm-Argument 'SSAS source database' $OctopusParameters['SrcDatabase']

# Set .NET CurrentDirectory to package installation path
$installDirPathFormat = 'Octopus.Action[{0}].Output.Package.InstallationDirectoryPath' -f $ssasPackageStepName
$installDirPath = $OctopusParameters[$installDirPathFormat]

Write-Verbose ('Setting CurrentDirectory to ''{0}''' -f $installDirPath)
[System.Environment]::CurrentDirectory = $installDirPath

# Get SSAS exe location
$exe = Get-SSASexe

$files = Get-ChildItem â€“Path $installDirPath\\* -Include *.deploymenttargets
foreach ($file in $files) {
  $name = [IO.Path]::GetFileNameWithoutExtension($file)

  Write-Host 'Updating' $file
  Update-Deploy
  $file = $installDirPath + '\\' + $name + '.configsettings'
  if(Test-Path $file) {
      Write-Host 'Updating' $file
      Update-Config
  } else {
    Write-Host \"Config settings doesn't exist. Skipping.\"
  }
  $file = $installDirPath + '\\' + $name + '.deploymentoptions'
  Write-Host 'Updating' $file
  Update-Option

  $ssasArguments = @()
  $ssasArguments += ('\"' + $installDirPath + '\\' + $name + '.asdatabase\"')
  $ssasArguments += '/s:\"' + $installDirPath + '\\Log.txt\"'
  
  Write-Host $exe $ssasArguments
  & $exe $ssasArguments
  
  # Get last exit code
  $ssasExitCode = $LastExitcode
  
  # Check to make sure log file exists
  if ((Test-Path -Path \"$installDirPath\\Log.txt\") -eq $true)
  {
    # Upload log as artifact
    New-OctopusArtifact -Path \"$installDirPath\\Log.txt\" -Name \"Log.txt\"
  }
  else
  {
    # Write error
    Write-Error \"Error: $installDirPath\\Log.txt not found!\"
  }
  
  # Check the code
  if ($ssasExitCode -ne 0)
  {
  \tWrite-Error \"Operation failed, see log for details.\"
  }
}
",
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.RunOnServer": "false",
    "Octopus.Action.Script.ScriptFileName": null,
    "Octopus.Action.Package.FeedId": null,
    "Octopus.Action.Package.PackageId": null
  },
  "Parameters": [
    {
      "Id": "435fbf52-470d-442f-88d3-0b708dfc3657",
      "Name": "SsasPackageStepName",
      "Label": "",
      "HelpText": null,
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "StepName"
      },
      "Links": { }
    },
    {
      "Id": "a0713297-cdeb-47cd-ac43-4bf9603c8052",
      "Name": "SsasServer",
      "Label": "Server",
      "HelpText": null,
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      },
      "Links": { }
    },
    {
      "Id": "7bf5ec64-3383-40ae-935e-e78c236cdf21",
      "Name": "SsasDatabase",
      "Label": "Database",
      "HelpText": null,
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      },
      "Links": { }
    },
    {
      "Id": "d7d4fcbc-d0d4-4a3b-b477-28d23fbe1f9b",
      "Name": "SrcServer",
      "Label": "Data Source - Server",
      "HelpText": null,
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      },
      "Links": { }
    },
    {
      "Id": "45b60a3f-9339-4c69-bc14-df94b47be9e7",
      "Name": "SrcDatabase",
      "Label": "Data Source - Database",
      "HelpText": null,
      "DefaultValue": "Warehouse",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      },
      "Links": { }
    }
  ],
  "LastModifiedOn": "2020-09-25T23:49:43.003Z",
  "LastModifiedBy": "twerthi",
  "$Meta": {
    "ExportedAt": "2020-09-25T23:49:43.003Z",
    "OctopusVersion": "2020.4.0",
    "Type": "ActionTemplate"
  },
  "Category": "sql"
}
