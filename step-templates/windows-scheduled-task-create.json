{
  "Id": "17bc51d1-8b88-4aad-b188-24a0904d0bf2",
  "Name": "Windows Scheduled Task - Create",
  "Description": "Create Windows scheduled task. If the task exists it will be torn down and re-added to ensure consistency",
  "ActionType": "Octopus.Script",
  "Version": 13,
  "Properties": {
    "Octopus.Action.Script.ScriptBody": "$ErrorActionPreference = \"Stop\";\r\nSet-StrictMode -Version \"Latest\";\r\n\r\n# use http://msdn.microsoft.com/en-us/library/windows/desktop/bb736357(v=vs.85).aspx for API reference\r\n\r\nFunction Create-ScheduledTask($TaskName,$RunAsUser,$RunAsPassword,$TaskRun,$Arguments,$Schedule,$StartTime,$StartDate,$RunWithElevatedPermissions,$Days,$Interval,$Duration)\r\n{\r\n\r\n    # SCHTASKS /Create [/S system [/U username [/P [password]]]]\r\n    #     [/RU username [/RP password]] /SC schedule [/MO modifier] [/D day]\r\n    #     [/M months] [/I idletime] /TN taskname /TR taskrun [/ST starttime]\r\n    #     [/RI interval] [ {/ET endtime | /DU duration} [/K] [/XML xmlfile] [/V1]]\r\n    #     [/SD startdate] [/ED enddate] [/IT | /NP] [/Z] [/F] [/HRESULT] [/?]\r\n\r\n    # note - /RL and /DELAY appear in the \"Parameter list\" for \"SCHTASKS /Create /?\" but not in the syntax above\r\n\r\n    $argumentList = @();\r\n    $argumentList += @( \"/Create\" );\r\n\r\n    $argumentList += @( \"/RU\", $RunAsUser );\r\n    $argumentList += @( \"/RP\", $RunAsPassword );\r\n\r\n    $argumentList += @( \"/SC\", $Schedule );\r\n\r\n    if( -not (StringIsNullOrWhiteSpace($Interval)) )\r\n    {\r\n        switch -Regex ($Schedule)\r\n        {\r\n            \"MINUTE|HOURLY|ONLOGON|ONIDLE\" {\r\n                $argumentList += @( \"/MO\", $Interval );\r\n            }\r\n            \"WEEKLY|MONTHLY\" {\r\n                $argumentList += @( \"/RI\", $Interval );\r\n            }\r\n            \"ONCE|ONSTART|ONEVENT\" {\r\n                # we don't currently support providing an XPATH query string\r\n                throw new-object System.NotImplementedException(\"Unsupported schedule option '$Schedule'.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    if( -not (StringIsNullOrWhiteSpace($Days)) -And $Schedule -Ne \"DAILY\" )\r\n    {\r\n        if($Schedule -ne \"WEEKDAYS\") {\r\n            $argumentList += @( \"/D\", $Days );\r\n        } else {\r\n            $argumentList += @( \"/D\", \"MON,TUE,WED,THU,FRI\" );\r\n        }\r\n    }\r\n\r\n    $argumentList += @( \"/TN\", \"`\"$TaskName`\"\" );\r\n\r\n    if( $Arguments )\r\n    {\r\n        $argumentList += @( \"/TR\", \"`\"'$TaskRun' '$Arguments'`\"\" );\r\n    }\r\n    else\r\n    {\r\n        $argumentList += @( \"/TR\", \"`\"'$TaskRun'`\"\" );\r\n    }\r\n\r\n    if( -not (StringIsNullOrWhiteSpace($StartTime)) )\r\n    {\r\n        $argumentList += @( \"/ST\", $StartTime );\r\n    }\r\n\r\n    if( -not (StringIsNullOrWhiteSpace($Duration)) )\r\n    {\r\n        $argumentList += @( \"/DU\", $Duration );\r\n    }\r\n\r\n    if( -not (StringIsNullOrWhiteSpace($StartDate)) )\r\n    {\r\n        $argumentList += @( \"/SD\", $StartDate );\r\n    }\r\n\r\n    $argumentList += @( \"/F\" );\r\n\r\n    if( $RunWithElevatedPermissions )\r\n    {\r\n        $argumentList += @( \"/RL\", \"HIGHEST\" );\r\n    }\r\n\r\n    Invoke-CommandLine -FilePath     \"$($env:SystemRoot)\\System32\\schtasks.exe\" `\r\n                       -ArgumentList $argumentList;\r\n\r\n}\r\n\r\nFunction Delete-ScheduledTask($TaskName) {\r\n    # SCHTASKS /Delete [/S system [/U username [/P [password]]]]\r\n    #          /TN taskname [/F] [/HRESULT] [/?]\r\n    Invoke-CommandLine -FilePath     \"$($env:SystemRoot)\\System32\\schtasks.exe\" `\r\n                       -ArgumentList @( \"/Delete\", \"/S\", \"localhost\", \"/TN\", \"`\"$TaskName`\"\", \"/F\" );\r\n}\r\n\r\nFunction Stop-ScheduledTask($TaskName) {\r\n    # SCHTASKS /End [/S system [/U username [/P [password]]]]\r\n    #          /TN taskname [/HRESULT] [/?]\r\n    Invoke-CommandLine -FilePath     \"$($env:SystemRoot)\\System32\\schtasks.exe\" `\r\n                       -ArgumentList @( \"/End\", \"/S\", \"localhost\", \"/TN\", \"`\"$TaskName`\"\" );\r\n}\r\n\r\nFunction Start-ScheduledTask($TaskName) {\r\n    # SCHTASKS /Run [/S system [/U username [/P [password]]]] [/I]\r\n    #          /TN taskname [/HRESULT] [/?]\r\n    Invoke-CommandLine -FilePath     \"$($env:SystemRoot)\\System32\\schtasks.exe\" `\r\n                       -ArgumentList @( \"/Run\", \"/S\", \"localhost\", \"/TN\", \"`\"$TaskName`\"\" );\r\n}\r\n\r\nFunction Enable-ScheduledTask($TaskName) {\r\n    # SCHTASKS /Change [/S system [/U username [/P [password]]]] /TN taskname\r\n    #      { [/RU runasuser] [/RP runaspassword] [/TR taskrun] [/ST starttime]\r\n    #        [/RI interval] [ {/ET endtime | /DU duration} [/K] ]\r\n    #        [/SD startdate] [/ED enddate] [/ENABLE | /DISABLE] [/IT] [/Z] }\r\n    #        [/HRESULT] [/?]\r\n    Invoke-CommandLine -FilePath     \"$($env:SystemRoot)\\System32\\schtasks.exe\" `\r\n                       -ArgumentList @( \"/Change\", \"/S\", \"localhost\", \"/TN\", \"`\"$TaskName`\"\", \"/ENABLE\" );\r\n}\r\n\r\nFunction ScheduledTask-Exists($taskName) {\r\n   $schedule = new-object -com Schedule.Service\r\n   $schedule.connect()\r\n   $tasks = $schedule.getfolder(\"\\\").gettasks(0)\r\n   foreach ($task in ($tasks | select Name)) {\r\n      #echo \"TASK: $($task.name)\"\r\n      if($task.Name -eq $taskName) {\r\n         #write-output \"$task already exists\"\r\n         return $true\r\n      }\r\n   }\r\n   return $false\r\n}\r\n\r\nFunction StringIsNullOrWhitespace([string] $string)\r\n{\r\n    if ($string -ne $null) { $string = $string.Trim() }\r\n    return [string]::IsNullOrEmpty($string)\r\n}\r\n\r\nfunction Invoke-CommandLine\r\n{\r\n    param\r\n    (\r\n        [Parameter(Mandatory=$true)]\r\n        [string] $FilePath,\r\n        [Parameter(Mandatory=$false)]\r\n        [string[]] $ArgumentList = @( ),\r\n        [Parameter(Mandatory=$false)]\r\n        [string[]] $SuccessCodes = @( 0 )\r\n    )\r\n    write-host ($FilePath + \" \" + ($ArgumentList -join \" \"));\r\n    $process = Start-Process -FilePath $FilePath -ArgumentList $ArgumentList -Wait -NoNewWindow -PassThru;\r\n    if( $SuccessCodes -notcontains $process.ExitCode )\r\n    {\r\n        throw new-object System.InvalidOperationException(\"process terminated with exit code '$($process.ExitCode)'.\");\r\n    }\r\n}\r\n\r\nfunction Invoke-OctopusStep\r\n{\r\n    param\r\n    (\r\n        [Parameter(Mandatory=$true)]\r\n        [hashtable] $OctopusParameters\r\n    )\r\n\r\n    $taskName = $OctopusParameters['TaskName']\r\n    $runAsUser = $OctopusParameters['RunAsUser']\r\n    $runAsPassword = $OctopusParameters['RunAsPassword']\r\n    $command = $OctopusParameters['Command']\r\n    $arguments = $OctopusParameters['Arguments']\r\n    $schedule = $OctopusParameters['Schedule']\r\n    $startTime = $OctopusParameters['StartTime']\r\n    $startDate = $OctopusParameters['StartDate']\r\n\r\n    if( $OctopusParameters.ContainsKey(\"RunWithElevatedPermissions\") )\r\n    {\r\n        $runWithElevatedPermissions = [boolean]::Parse($OctopusParameters['RunWithElevatedPermissions'])\r\n    }\r\n    else\r\n    {\r\n        $runWithElevatedPermissions = $false;\r\n    }\r\n\r\n    $days = $OctopusParameters['Days']\r\n    $interval = $OctopusParameters['Interval']\r\n    $duration = $OctopusParameters['Duration']\r\n\r\n    if((ScheduledTask-Exists($taskName))){\r\n        Write-Output \"$taskName already exists, Tearing down...\"\r\n        Write-Output \"Stopping $taskName...\"\r\n        Stop-ScheduledTask($taskName)\r\n        Write-Output \"Successfully Stopped $taskName\"\r\n        Write-Output \"Deleting $taskName...\"\r\n        Delete-ScheduledTask($taskName)\r\n        Write-Output \"Successfully Deleted $taskName\"\r\n    }\r\n    Write-Output \"Creating Scheduled Task - $taskName\"\r\n\r\n    Create-ScheduledTask $taskName $runAsUser $runAsPassword $command $arguments $schedule $startTime $startDate $runWithElevatedPermissions $days $interval $duration\r\n    Write-Output \"Successfully Created $taskName\"\r\n    Enable-ScheduledTask($taskName)\r\n    Write-Output \"$taskName enabled\"\r\n\r\n}\r\n\r\n\r\n# only execute the step if it's called from octopus deploy,\r\n# and skip it if we're runnning inside a Pester test\r\nif( Test-Path -Path \"Variable:OctopusParameters\" )\r\n{\r\n    Invoke-OctopusStep -OctopusParameters $OctopusParameters;\r\n}\r\n",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.ScriptFileName": "",
    "Octopus.Action.Package.NuGetFeedId": "",
    "Octopus.Action.Package.NuGetPackageId": ""
  },
  "Parameters": [
    {
      "Name": "TaskName",
      "Label": "Name",
      "HelpText": "The name of the Scheduled Task",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "RunAsUser",
      "Label": "User",
      "HelpText": "The User that the task will run as",
      "DefaultValue": "System",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "RunAsPassword",
      "Label": "Password",
      "HelpText": "Specifying a password allows the task to run when the user is not logged on to the server.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Name": "Command",
      "Label": "Action",
      "HelpText": "The Action that the task executes. Usually a path to the executable",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "Arguments",
      "Label": "Arguments",
      "HelpText": "A value that specifies any arguments to be passed to run the task.",
      "DefaultValue": null,
      "DisplaySettings": {}
    },
    {
      "Name": "Schedule",
      "Label": "Schedule",
      "HelpText": "When the Task is triggered",
      "DefaultValue": "DAILY",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "MINUTE|Every Minute\nHOURLY|Hourly\nDAILY|Daily\nWEEKLY|Weekly\nWEEKDAYS|Weekdays\nONCE|One off\nONSTART|On Start\nONLOGON|On Logon\nONIDLE|On Idle\nMONTHLY|Monthly"
      }
    },
    {
      "Name": "StartTime",
      "Label": "Start Time",
      "HelpText": "The Time the task will run. Use the format HH:mm:ss",
      "DefaultValue": "12:00",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "StartDate",
      "Label": "Start Date",
      "HelpText": "The date the task will start running. use the format MM/dd/yyyy",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "Interval",
      "Label": "Interval",
      "HelpText": "A value that specifies the repetition interval in minutes.",
      "DefaultValue": null,
      "DisplaySettings": {}
    },
    {
      "Name": "Duration",
      "Label": "Duration",
      "HelpText": "A value that specifies the duration to run the task. The time format is HH:mm (24-hour time).",
      "DefaultValue": null,
      "DisplaySettings": {}
    },
    {
      "Name": "RunWithElevatedPermissions",
      "Label": "RunWithElevatedPermissions",
      "HelpText": null,
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Name": "Days",
      "Label": "Days",
      "HelpText": "A value that specifies the day of the week to run the task. Valid values are: MON, TUE, WED, THU, FRI, SAT, SUN and for MONTHLY schedules 1 - 31 (days of the month). The wildcard character (*) specifies all days.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText",
        "Octopus.SelectOptions": ""
      }
    }
  ],
  "LastModifiedBy": "afmorris",
  "$Meta": {
    "ExportedAt": "2017-01-05T23:33:10.000Z",
    "OctopusVersion": "3.3.27",
    "Type": "ActionTemplate"
  },
  "Category": "windows"
}
