{
  "Id": "9E85B3EB-7C19-4F3A-9E9E-71923198EE09",
  "Name": "Variables - Substitute in Json file",
  "Description": "Use this step template after the Deploy API step template to substitute variables in a target json file like appsettings.json with Octopus scoped variables. Currently supported data types are string, boolean, interger, decimal and non-empty string arrays and can replace these types inside nested types as well as long as you name them like prop:subprop:subsubprop (like AppMetrics:GlobalTags:env) in octopus like we do today...this should be enough for most of the needs for files like appsettings.json",
  "ActionType": "Octopus.Script",
  "Version": 3,
  "Properties": {
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptBody": "function Get-Param($Name, [switch]$Required, $Default) {\n    $result = $null\n\n    if ($OctopusParameters -ne $null) {\n        $result = $OctopusParameters[$Name]\n    }\n\n    if ($result -eq $null) {\n        $variable = Get-Variable $Name -EA SilentlyContinue    \n        if ($variable -ne $null) {\n            $result = $variable.Value\n        }\n    }\n\n    if ($result -eq $null) {\n        if ($Required) {\n            throw \"Missing parameter value $Name\"\n        } else {\n            $result = $Default\n        }\n    }\n\n    return $result\n}\n\n$ErrorActionPreference = \"Stop\"\n\nfunction UpdateJsonFile ([hashtable]$variables, [string]$fullpath) {\n    Write-Host 'Starting the json file variable substitution' $variables.Count\n    if ($variables -eq $null) {\n        throw \"Missing parameter value $variables\"\n    }\n\n\t$pathExists = Test-Path $fullpath\n\tif(!$pathExists) {\n\t\tWrite-Host 'ERROR: Path '$fullpath ' does not exist'\n\t\tExit 1\n\t}\n\n\t$json = Get-Content $fullpath -Raw | ConvertFrom-Json\n    Write-Host 'Json content read from file'\n\n\tforeach($variable in $variables.GetEnumerator()) {\n\t\t$key = $variable.Key\n        Write-Host 'Processing' $key\n        $keys = $key.Split(':')\n\t\t$sub = $json\n\t\t$pre = $json\n\t\t$found = $true\n\t\t$lastKey = ''\n\t\tforeach($k in $keys) {\n\t\t\tif($sub | Get-Member -name $k -Membertype Properties){\n\t\t\t\t$pre = $sub\n\t\t\t\t$sub = $sub.$k\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$found = $false\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\t$lastKey = $k\n\t\t}\n\n\t\tif($found) {\n            Write-Host $key 'found in Json content'\n            if($pre.$lastKey -eq $null) {\n                Write-Host $key 'is null in the original source json...values CANNOT be null on the source json file...exiting with 1'\n                Exit 1\n            }\n\n\t\t\t$typeName = $pre.$lastKey.GetType().Name\n\t\t\t[bool]$b = $true\n\t\t\t[int]$i = 0\n\t\t\t[decimal]$d = 0.0\n\t\t\tif($typeName -eq 'String'){\n\t\t\t\t$pre.$lastKey = $variable.Value\n\t\t\t}\n\t\t\telseif($typeName -eq 'Boolean' -and [bool]::TryParse($variable.Value, [ref]$b)) {\n\t\t\t\t$pre.$lastKey = $b\n\t\t\t}\n\t\t\telseif($typeName -eq 'Int32' -and [int]::TryParse($variable.Value, [ref]$i)){\n\t\t\t\t$pre.$lastKey = $i\n\t\t\t}\n\t\t\telseif($typeName -eq 'Decimal' -and [decimal]::TryParse($variable.Value, [ref]$d)){\n\t\t\t\t$pre.$lastKey = $d\n\t\t\t}\n\t\t\telseif($typeName -eq 'Object[]') {\n                if($pre.$lastKey.Length -ne 0 -and $pre.$lastKey[0].GetType().Name -eq 'String') {\n\t\t\t\t    $pre.$lastKey = $variable.Value.TrimStart('[').TrimEnd(']').Split(',')\n                }\n                else {\n                    Write-Host 'ERROR: Cannot handle ' $key ' with type ' $typeName \n\t\t\t\t    'Only nonempty string arrays are supported at the moment meaning that it has to be a \n\t\t\t\t    string array with atleast one element in it in the original source appsettings.json \n\t\t\t\t    file...Skipping update and exiting with 1'\n\t\t\t\t    Exit 1\n                }\n\t\t\t}\n\t\t\telse {\n\t\t\t\tWrite-Host 'ERROR: Cannot handle ' $key ' with type ' $typeName \n\t\t\t\t'Only string, boolean, interger, decimal and non-empty string arrays are supported at the moment\n                ...Skipping update and exiting with 1'\n\t\t\t\tExit 1\n\t\t\t}\n\n            Write-Host $key 'updated in json content with value' $pre.$lastKey \n\n\t\t}\n        else {\n            Write-Host $key 'not found in Json content...skipping it'\n        }\n\t}\n    \n\t$json | ConvertTo-Json | Set-Content $fullpath\n\n    \n    Write-Host $fullpath 'file variables updated successfully...Done'\n}\n\n\nif($OctopusParameters -eq $null) {\n    Write-Host 'OctopusParameters is null...exiting with 1'\n    Exit 1    \n}\n\nfunction ConvertListToHashtable([object[]]$list) {\n    $h = @{}\n    foreach ($element in $list) {\n\t    $h.Add($element.Key, $element.Value)\n    }\n    return $h\n}\n\n$oParams = $OctopusParameters.getenumerator() | where-object {$_.key -notlike \"Octopus*\" -and $_.key -notlike \"env:*\"}\n\nUpdateJsonFile `\n(ConvertListToHashtable $oParams) `\n(Get-Param \"JsonFilePath\" -Required)\n"
  },
  "SensitiveProperties": {},
  "Parameters": [
    {
      "Name": "JsonFilePath",
      "Label": "Path to the json file",
      "HelpText": "For example if your appsettings.json file is in \nc:\\web\\site1\\appsettings.json then set this value to\n**c:\\web\\site1\\appsettings.json**. You can use Octopus \nvariables here like \n**#{Deployment_InstallationPath}\\\\#{Octopus.Release.Number}\\appsettings.json** as the value of this variable. A good idea is to copy the value from the Install to variable in the Deploy API step template and add \\appsettings.json if that is your target json file",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LastModifiedBy": "kazizahir",
  "$Meta": {
    "ExportedAt": "2017-05-29T11:51:18.310Z",
    "OctopusVersion": "3.2.11",
    "Type": "ActionTemplate"
  },
  "Category": "Octopus"
}
