{
  "Id": "5b3e7576-44f8-4852-ae09-a45bd985c549",
  "Name": "IIS Application - Create",
  "Description": "Create an IIS virtual application (a virtual directory with an application pool)",
  "ActionType": "Octopus.Script",
  "Version": 34,
  "Properties": {
    "Octopus.Action.Script.ScriptBody": "## --------------------------------------------------------------------------------------\n## Input\n## --------------------------------------------------------------------------------------\n\n$isEnabled = $OctopusParameters[\"CreateOrUpdateIisApp\"]\nif (!$isEnabled -or ![boolean]::Parse($isEnabled))\n{\n   exit 0\n}\n\n$virtualPath = $OctopusParameters['VirtualPath']\n$physicalPath = $OctopusParameters['PhysicalPath']\n$applicationPoolName = $OctopusParameters['ApplicationPoolName']\n$appPoolFrameworkVersion = $OctopusParameters[\"ApplicationPoolFrameworkVersion\"]\n$applicationPoolIdentityType = $OctopusParameters[\"ApplicationPoolIdentityType\"]\n$applicationPoolUsername = $OctopusParameters[\"ApplicationPoolUsername\"]\n$applicationPoolPassword = $OctopusParameters[\"ApplicationPoolPassword\"]\n\n$parentSite = $OctopusParameters['ParentSite']\n$bindingProtocols = $OctopusParameters['BindingProtocols']\n$authentication = $OctopusParameters['AuthenticationType']\n$requireSSL = $OctopusParameters['RequireSSL']\n\n$preloadEnabled = [boolean]::Parse($OctopusParameters['PreloadEnabled'])\n$enableAnonymous = [boolean]::Parse($OctopusParameters['EnableAnonymous'])\n$enableBasic = [boolean]::Parse($OctopusParameters['EnableBasic'])\n$enableWindows = [boolean]::Parse($OctopusParameters['EnableWindows'])\n\n## --------------------------------------------------------------------------------------\n## Helpers\n## --------------------------------------------------------------------------------------\n# Helper for validating input parameters\nfunction Validate-Parameter($foo, [string[]]$validInput, $parameterName) {\n    Write-Host \"${parameterName}: ${foo}\"\n    if (! $foo) {\n        throw \"$parameterName cannot be empty, please specify a value\"\n    }\n    \n    if ($validInput) {\n        @($foo) | % { \n                if ($validInput -notcontains $_) {\n                    throw \"'$_' is not a valid input for '$parameterName'\"\n                }\n             }  \n        }   \n}\n\n# Helper to run a block with a retry if things go wrong\n$maxFailures = 5\n$sleepBetweenFailures = Get-Random -minimum 1 -maximum 4\nfunction Execute-WithRetry([ScriptBlock] $command) {\n    $attemptCount = 0\n    $operationIncomplete = $true\n\n    while ($operationIncomplete -and $attemptCount -lt $maxFailures) {\n        $attemptCount = ($attemptCount + 1)\n\n        if ($attemptCount -ge 2) {\n            Write-Output \"Waiting for $sleepBetweenFailures seconds before retrying...\"\n            Start-Sleep -s $sleepBetweenFailures\n            Write-Output \"Retrying...\"\n        }\n\n        try {\n            & $command\n\n            $operationIncomplete = $false\n        } catch [System.Exception] {\n            if ($attemptCount -lt ($maxFailures)) {\n                Write-Output (\"Attempt $attemptCount of $maxFailures failed: \" + $_.Exception.Message)\n            \n            }\n            else {\n                throw \"Failed to execute command\"\n            }\n        }\n    }\n}\n\n## --------------------------------------------------------------------------------------\n## Configuration\n## --------------------------------------------------------------------------------------\nValidate-Parameter $virtualPath -parameterName \"Virtual path\"\nValidate-Parameter $physicalPath -parameterName \"Physical path\"\nValidate-Parameter $applicationPoolName -parameterName \"Application pool\"\nValidate-Parameter $parentSite -parameterName \"Parent site\"\n\n\nAdd-PSSnapin WebAdministration -ErrorAction SilentlyContinue\nImport-Module WebAdministration -ErrorAction SilentlyContinue\n\n\n## --------------------------------------------------------------------------------------\n## Run\n## --------------------------------------------------------------------------------------\n\nWrite-Host \"Getting web site $parentSite\"\n# Workaround to bug in Get-WebSite cmdlet which would return all sites\n# See http://forums.iis.net/p/1167298/1943273.aspx / http://stackoverflow.com/a/6832577/785750\n$site = Get-WebSite  | where { $_.Name -eq $parentSite }\nif (!$site) {\n    throw \"The web site '$parentSite' does not exist. Please create the site first.\"\n}\n\n$path = $site.PhysicalPath;\n$parts = $virtualPath -split \"[/\\\\]\"\n$name = \"\"\n\nfor ($i = 0; $i -lt $parts.Length; $i++) {\n    $name = $name + \"/\" + $parts[$i]\n    $name = $name.TrimStart('/').TrimEnd('/')\n    if ($i -eq $parts.Length - 1) {\n        \n    }\n    elseif ([string]::IsNullOrEmpty($name) -eq $false -and $name -ne \"\") {\n        Write-Host \"Ensuring parent exists: $name\"\n        \n        $path = [IO.Path]::Combine($path, $parts[$i])\n        $app = Get-WebApplication -Name $name -Site $parentSite\n\n        if (!$app) {\n            $vdir = Get-WebVirtualDirectory -Name $name -site $parentSite\n            if (!$vdir) {\n                Write-Verbose \"The application or virtual directory '$name' does not exist\"\n                if([IO.Directory]::Exists([System.Environment]::ExpandEnvironmentVariables($path)) -eq $true)\n                {\n                    Write-Verbose \"Using physical path '$path' as parent\"\n                }\n                else\n                {\n                    throw \"Failed to ensure parent\"\n                }\n            }\n            else\n            {\n                $path = $vdir.PhysicalPath\n            }\n        }\n        else\n        {\n            $path = $app.PhysicalPath\n        }\n    }\n}\n\n$existing = Get-WebApplication -site $parentSite -Name $name\n\n# Set App Pool\nExecute-WithRetry { \n\tWrite-Verbose \"Loading Application pool\"\n\t$pool = Get-Item \"IIS:\\AppPools\\$ApplicationPoolName\" -ErrorAction SilentlyContinue\n\tif (!$pool) { \n\t\tWrite-Host \"Application pool `\"$ApplicationPoolName`\" does not exist, creating...\" \n\t\tnew-item \"IIS:\\AppPools\\$ApplicationPoolName\" -confirm:$false\n\t\t$pool = Get-Item \"IIS:\\AppPools\\$ApplicationPoolName\"\n\t} else {\n\t\tWrite-Host \"Application pool `\"$ApplicationPoolName`\" already exists\"\n\t}\n}\n\n# Set App Pool Identity\nExecute-WithRetry { \n\tWrite-Host \"Set application pool identity: $applicationPoolIdentityType\"\n\tif ($applicationPoolIdentityType -eq \"SpecificUser\") {\n\t\tSet-ItemProperty \"IIS:\\AppPools\\$ApplicationPoolName\" -name processModel -value @{identitytype=\"SpecificUser\"; username=\"$applicationPoolUsername\"; password=\"$applicationPoolPassword\"}\n\t} else {\n\t\tSet-ItemProperty \"IIS:\\AppPools\\$ApplicationPoolName\" -name processModel -value @{identitytype=\"$applicationPoolIdentityType\"}\n\t}\n}\n\n# Set .NET Framework\nExecute-WithRetry { \n\tWrite-Host \"Set .NET framework version: $appPoolFrameworkVersion\" \n\tif($appPoolFrameworkVersion -eq \"No Managed Code\")\n\t{\n\t\tSet-ItemProperty \"IIS:\\AppPools\\$ApplicationPoolName\" managedRuntimeVersion \"\"\n\t}\n\telse\n\t{\n\t\tSet-ItemProperty \"IIS:\\AppPools\\$ApplicationPoolName\" managedRuntimeVersion $appPoolFrameworkVersion\n\t}\n}\n\nExecute-WithRetry { \n    ## Check if the physical path exits\n    if(!(Test-Path -Path $physicalPath)) {\n        Write-Host \"Creating physical path '$physicalPath'\"\n        New-Item -ItemType directory -Path $physicalPath\n    }\n\n    if (!$existing) {\n        Write-Host \"Creating web application '$name'\"\n        New-WebApplication -Site $parentSite -Name $name -ApplicationPool $applicationPoolName -PhysicalPath $physicalPath\n        Write-Host \"Web application created\"\n    } else {\n        Write-Host \"The web application '$name' already exists. Updating physical path:\"\n\n        Set-ItemProperty IIS:\\\\Sites\\\\$parentSite\\\\$name -name physicalPath -value $physicalPath\n        Write-Host \"Physical path changed to: $physicalPath\"\n\n        Set-ItemProperty IIS:\\\\Sites\\\\$parentSite\\\\$name -Name applicationPool -Value $applicationPoolName\n        Write-Output \"ApplicationPool changed to: $applicationPoolName\"\n    }\n    \n    Write-Host \"Enabling '$bindingProtocols' protocols\"\n    Set-ItemProperty IIS:\\\\Sites\\\\$parentSite\\\\$name -name enabledProtocols -value $bindingProtocols\n\n    $enabledIisAuthenticationOptions = $Authentication -split '\\\\s*[,;]\\\\s*'\n\n    try {\n\n    Execute-WithRetry { \n        Write-Output \"Anonymous authentication enabled: $enableAnonymous\"\n        Set-WebConfigurationProperty -filter /system.webServer/security/authentication/anonymousAuthentication -name enabled -value \"$enableAnonymous\" -PSPath IIS:\\\\ -location $parentSite/$virtualPath\n    }    \n    \n    Execute-WithRetry { \n        Write-Output \"Windows authentication enabled: $enableWindows\"\n        Set-WebConfigurationProperty -filter /system.WebServer/security/authentication/windowsAuthentication -name enabled -value \"$enableWindows\" -PSPath IIS:\\\\ -location $parentSite/$virtualPath\n    }\n\n    Execute-WithRetry { \n        Write-Output \"Basic authentication enabled: $enableBasic\"\n        Set-WebConfigurationProperty -filter /system.webServer/security/authentication/basicAuthentication -name enabled -value \"$enableBasic\" -PSPath IIS:\\\\ -location $parentSite/$virtualPath\n    }\n\n    } catch [System.Exception] {\n        Write-Output \"Authentication options could not be set. This can happen when there is a problem with your application's web.config. For example, you might be using a section that requires an extension that is not installed on this web server (such as URL Rewrtiting). It can also happen when you have selected an authentication option and the appropriate IIS module is not installed (for example, for Windows authentication, you need to enable the Windows Authentication module in IIS/Windows first)\"\n        throw\n    }\n\n    Set-WebConfiguration -value \"None\" -filter \"system.webserver/security/access\" -location $parentSite/$virtualPath -PSPath IIS:\\\\ \n    if ($requireSSL -ieq \"True\")\n    {\n        Write-Output \"Require SSL enabled: $requireSSL\"\n        Set-WebConfiguration -value \"Ssl\" -filter \"system.webserver/security/access\" -location $parentSite/$virtualPath -PSPath IIS:\\\\ \n    }\n    \n    try {\n        Set-ItemProperty IIS:\\\\Sites\\\\$parentSite\\\\$name -name preloadEnabled -value $preloadEnabled\n        Write-Output \"Preload Enabled: $preloadEnabled\"\n    } catch [System.Exception] {\n       if ($preloadEnabled) {\n            Write-Output \"Preload Enabled: $preloadEnabled Could not be set. You may to install the Application Initialization feature\"\n            throw\n       }\n    }\n}\n",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.ScriptFileName": null,
    "Octopus.Action.Package.NuGetFeedId": null,
    "Octopus.Action.Package.NuGetPackageId": null
  },
  "Parameters": [
    {
      "Name": "CreateOrUpdateIisApp",
      "Label": "Create or update an IIS virtual application and Application Pool",
      "HelpText": "If true, This step will create or update an IIS Application.",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Name": "VirtualPath",
      "Label": "Virtual path",
      "HelpText": "The name of the application to create. For example, to serve an application that will be available at `/myapp`, enter `myapp`. To create an application under a parent virtual directory or application, separate with slashes - for example: `/applications/myapp`",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "PhysicalPath",
      "Label": "Physical path",
      "HelpText": "Physical folder that the application will serve files from. Example: `C:\\MyApp`.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "ParentSite",
      "Label": "Parent site",
      "HelpText": "The name of the IIS web site to attach the application to. For example, to put the application under the default web site, enter:\n\n    Default Web Site",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "BindingProtocols",
      "Label": "Protocols",
      "HelpText": "The protocols to use for the application",
      "DefaultValue": "http",
      "DisplaySettings": {}
    },
    {
      "Name": "RequireSSL",
      "Label": "Require SSL",
      "HelpText": "Web site SSL settings",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Name": "PreloadEnabled",
      "Label": "Preload Enabled",
      "HelpText": "If true, sets the application to enable preloading.",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Name": "EnableAnonymous",
      "Label": "Enable Anonymous authentication",
      "HelpText": "Whether IIS should allow anonymous authentication",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Name": "EnableBasic",
      "Label": "Enable Basic authentication",
      "HelpText": "Whether IIS should allow basic authentication with a 401 challenge.",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Name": "EnableWindows",
      "Label": "Enable Windows authentication",
      "HelpText": "Whether IIS should allow integrated Windows authentication with a 401 challenge.",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Name": "ApplicationPoolName",
      "Label": "Application pool",
      "HelpText": "The name of the application pool that the application will run under.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "ApplicationPoolFrameworkVersion",
      "Label": "Application Pool .NET CLR Version",
      "HelpText": "The version of the .NET common language runtime that this application pool will use.",
      "DefaultValue": "v4.0",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "v2.0|CLR v2.0 (.NET 2.0, 3.0, 3.5)\nv4.0|CLR v4.0 (.NET 4.0, 4.5, 4.6)\nNo Managed Code"
      }
    },
    {
      "Name": "ApplicationPoolIdentityType",
      "Label": "Application Pool Identity",
      "HelpText": "Which built-in account will the application pool run under.",
      "DefaultValue": "ApplicationPoolIdentity",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "ApplicationPoolIdentity|Application Pool Identity\nLocalService|Local Service\nLocalSystem|Local System\nNetworkService|Network Service\nSpecificUser|Custom user ..."
      }
    },
    {
      "Name": "ApplicationPoolUsername",
      "Label": "Application Pool Username",
      "HelpText": "The Windows/domain account of the custom user that the application pool will run under. Example: YOURDOMAIN\\\\YourAccount. You will need to ensure that this user has permissions to run as an application pool.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "ApplicationPoolPassword",
      "Label": "Application Pool Password",
      "HelpText": "The password for the custom account given above.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    }
  ],
  "LastModifiedOn": "2016-08-19T21:40:33.114+00:00",
  "LastModifiedBy": "ievgent",
  "$Meta": {
    "ExportedAt": "2016-08-19T21:40:33.114+00:00",
    "OctopusVersion": "3.3.27",
    "Type": "ActionTemplate"
  },
  "Category": "iis"
}