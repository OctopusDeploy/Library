{
  "Id": "5c4fbed9-dbba-4139-8440-d8e27318772e",
  "Name": "Azure AppConfig KV - Retrieve Values",
  "Description": "This step retrieves one or more key/values from an Azure App Configuration store and creates [output variables](https://octopus.com/docs/projects/variables/output-variables) for each value retrieved. These values can be used in other deployment or runbook process steps.

You can retrieve individual keys that match a specific name and you can choose a custom output variable name for each key.

Wildcard search is also supported using the `*` notation in the **Key Names** parameter. Note: Combining a wildcard search with custom output variable names is not supported.

Authentication is performed using an Azure Service Principal.

---

**Required:** 
- An Azure account with permissions to retrieve key/values from the Azure App Config store.
- The `az` CLI on the target or worker. If the CLI can't be found, the step will fail. 

Notes:

- Tested on Octopus `2024.1` using az version `2.38.0`
- Tested with both Windows PowerShell and PowerShell Core (on Linux).

",
  "ActionType": "Octopus.AzurePowerShell",
  "Version": 2,
  "CommunityActionTemplateId": null,
  "Packages": [],
  "GitDependencies": [],
  "Properties": {
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "OctopusUseBundledTooling": "False",
    "Octopus.Action.Azure.AccountId": "#{Azure.AppConfig.KV.RetrieveValues.AzureAccount}",
    "Octopus.Action.Script.ScriptBody": "$ErrorActionPreference = 'Stop'

# Variables
$global:AzureAppConfigStoreName = $OctopusParameters[\"Azure.AppConfig.KV.RetrieveValues.ConfigStoreName\"]
$global:AzureAppConfigStoreEndpoint = $OctopusParameters[\"Azure.AppConfig.KV.RetrieveValues.ConfigStoreEndpoint\"]
$global:AzureAppConfigRetrievalMethod = $OctopusParameters[\"Azure.AppConfig.KV.RetrieveValues.RetrievalMethod\"]
$ConfigStoreKeyNames = $OctopusParameters[\"Azure.AppConfig.KV.RetrieveValues.KeyNames\"]
$global:ConfigStoreLabels = $OctopusParameters[\"Azure.AppConfig.KV.RetrieveValues.Labels\"]
$PrintVariableNames = $OctopusParameters[\"Azure.AppConfig.KV.RetrieveValues.PrintVariableNames\"]
$SaveValuesAsSensitiveVariables = $OctopusParameters[\"Azure.AppConfig.KV.RetrieveValues.SaveAsSensitiveVariables\"] -ieq \"True\"
$global:SuppressWarnings = $OctopusParameters[\"Azure.AppConfig.KV.RetrieveValues.SuppressWarnings\"] -ieq \"True\"
$global:TreatWarningsAsErrors = $OctopusParameters[\"Azure.AppConfig.KV.RetrieveValues.TreatWarningsAsErrors\"] -ieq \"True\"
$global:CreateAppSettingsJson = $OctopusParameters[\"Azure.AppConfig.KV.RetrieveValues.CreateAppSettingsJson\"] -ieq \"True\"

# Validation
if ([string]::IsNullOrWhiteSpace($global:AzureAppConfigStoreName) -and [string]::IsNullOrWhiteSpace($global:AzureAppConfigStoreEndpoint)) {
    throw \"Either parameter ConfigStoreName or ConfigStoreEndpoint not specified\"
}

if ([string]::IsNullOrWhiteSpace($global:AzureAppConfigRetrievalMethod)) {
    throw \"Required parameter Azure.AppConfig.KV.RetrieveValues.RetrievalMethod not specified\"
}

if ([string]::IsNullOrWhiteSpace($ConfigStoreKeyNames) -and [string]::IsNullOrWhiteSpace($global:ConfigStoreLabels)) {
    throw \"Either Azure.AppConfig.KV.RetrieveValues.KeyNames or Azure.AppConfig.KV.RetrieveValues.Labels not specified\"
}

$RetrieveAllKeys = $global:AzureAppConfigRetrievalMethod -ieq \"all\"
$global:ConfigStoreParameters = \"\"
if (-not [string]::IsNullOrWhiteSpace($global:AzureAppConfigStoreName)) {
    $global:ConfigStoreParameters += \" --name \"\"$global:AzureAppConfigStoreName\"\"\"
}
if (-not [string]::IsNullOrWhiteSpace($global:AzureAppConfigStoreEndpoint)) {
    $global:ConfigStoreParameters += \" --endpoint \"\"$global:AzureAppConfigStoreEndpoint\"\"\"
}

### Helper functions
function Test-ForAzCLI() {
    $oldPreference = $ErrorActionPreference
    $ErrorActionPreference = \"Stop\"
    try { 
        if (Get-Command \"az\") {
            return $True
        }
    }
    catch { 
        return $false
    }
    finally { 
        $ErrorActionPreference = $oldPreference 
    }
}

function Write-OctopusWarning(
    [string] $Message
) {
    if ($global:TreatWarningsAsErrors) {
        throw \"Error: $($Message)\"
    }
    else {
        if ($global:SuppressWarnings -eq $False) {
            Write-Warning -Message $Message
        }
        else {
            Write-Verbose -Message $Message
        }
    }
}


function Save-OctopusVariable(
    [string]$variableName, 
    [string]$variableValue) {

    $VariableParams = @{name = $variableName; Value = $variableValue } 
                    
    if ($SaveValuesAsSensitiveVariables) {
        $VariableParams.Sensitive = $True
    }

    Set-OctopusVariable @VariableParams

    $global:VariablesCreated += 1

    if ($global:CreateAppSettingsJson) {
        $global:AppSettingsVariables += [PsCustomObject]@{name = $variableName; value = $variableValue; slotSetting = $false }
    }

    if ($PrintVariableNames) {
        Write-Host \"Created output variable: ##{Octopus.Action[$StepName].Output.$variableName}\"
    }
}

function Find-AzureAppConfigMatchesFromKey(
    [string]$KeyName,
    [bool]$IsWildCard,
    [string]$VariableName,
    [PsCustomObject]$AppConfigValues) {

    if ($IsWildCard -eq $False) {
        Write-Verbose \"Finding exact match for: $($keyName)\"
        $matchingAppConfigKeys = $appConfigValues | Where-Object { $_.key -ieq $keyName }
        if ($null -eq $matchingAppConfigKeys -or $matchingAppConfigKeys.Count -eq 0) {
            Write-OctopusWarning \"Unable to find a matching key in Azure App Config for: $($keyName)\"
        }
        else {
            if ($matchingAppConfigKeys.Count -gt 1) {
                Write-OctopusWarning \"Found multiple matching keys ($($matchingAppConfigKeys.Count)) in Azure App Config for: $($keyName). This is usually due to multiple values with labels\"

                foreach ($matchingAppConfigKey in $matchingAppConfigKeys) {
                    Write-Verbose \"Found match for $($keyName) $(if(![string]::IsNullOrWhiteSpace($matchingAppConfigKey.label)) {\"(label: $($matchingAppConfigKey.label))\"})\"
                    $variableValue = $matchingAppConfigKey.value
                    
                    if ([string]::IsNullOrWhiteSpace($variableName)) {
                        $variableName = $keyName.Trim()
                    }
                    
                    if (![string]::IsNullOrWhiteSpace($matchingAppConfigKey.label)) {
                        $variableName = \"$($keyName.Trim())-$($matchingAppConfigKey.label)\"
                        Write-Verbose \"Appending label to variable name to avoid duplicate output name: $variableName\"
                    }

                    Save-OctopusVariable -variableName $variableName -variableValue $variableValue
                }
            } 
            else {
                $matchingAppConfigKey = $matchingAppConfigKeys | Select-Object -First 1

                Write-Verbose \"Found match for $($keyName)\"
                $variableValue = $matchingAppConfigKey.value
    
                if ([string]::IsNullOrWhiteSpace($variableName)) {
                    $variableName = \"$($keyName.Trim())\"
                }
    
                Save-OctopusVariable -variableName $variableName -variableValue $variableValue
            }
        }
    }
    else {
        Write-Verbose \"Finding wildcard match for: $($keyName)\"
        $matchingAppConfigKeys = @($appConfigValues | Where-Object { $_.key -ilike $keyName })
        if ($matchingAppConfigKeys.Count -eq 0) {
            Write-OctopusWarning \"Unable to find any matching keys in Azure App Config for wildcard: $($keyName)\"
        }
        else {
            foreach ($match in $matchingAppConfigKeys) {
                # Have to explicitly set variable Name here as its a wildcard match
                $variableName = $match.key
                $variableValue = $match.value
                Write-Verbose \"Found wildcard match '$variableName' $(if(![string]::IsNullOrWhiteSpace($matchingAppConfigKey.content_type)) {\"($($matchingAppConfigKey.content_type))\"})\"
                Save-OctopusVariable -variableName $variableName -variableValue $variableValue
            }
        }
    }
}

function Find-AzureAppConfigMatchesFromLabels() {
    
    Write-Verbose \"Retrieving values matching labels: $($global:ConfigStoreLabels)\"
    $command = \"az appconfig kv list $($global:ConfigStoreParameters) --label \"\"$global:ConfigStoreLabels\"\" --auth-mode login\"
            
    Write-Verbose \"Invoking expression: $command\"
    $appConfigResponse = Invoke-Expression -Command $command
    $ExitCode = $LastExitCode
    Write-Verbose \"az exit code: $ExitCode\"
    if ($ExitCode -ne 0) {
        throw \"Error retrieving appsettings. ExitCode: $ExitCode\"
    }

    if ([string]::IsNullOrWhiteSpace($appConfigResponse)) {
        Write-OctopusWarning \"Null or empty response received from Azure App Configuration service\"
    }
    else {
        $appConfigValues = $appConfigResponse | ConvertFrom-Json
        if ($appConfigValues.Count -eq 0) {
            Write-OctopusWarning \"Unable to find any matching keys in Azure App Config for labels: $($global:ConfigStoreLabels)\"
        }
        else {
            Write-Verbose \"Finding match(es) for labels: $($global:ConfigStoreLabels)\"
            foreach ($appConfigValue in $appConfigValues) {
                # Have to explicitly set variable Name here as its a match based on label alone
                $variableName = $appConfigValue.key
                Write-Verbose \"Found label match '$($appConfigValue.key)' $(if(![string]::IsNullOrWhiteSpace($appConfigValue.content_type)) {\"($($appConfigValue.content_type))\"})\"
                if (![string]::IsNullOrWhiteSpace($appConfigValue.label)) {
                    $variableName = \"$($variableName)-$($appConfigValue.label)\"
                    Write-Verbose \"Appending label to variable name to avoid duplicate output name: $variableName\"
                }
                $variableValue = $appConfigValue.value
                
                Save-OctopusVariable -variableName $variableName -variableValue $variableValue
            }
        }
    }
}

# Check if Az cli is installed.
$azCliAvailable = Test-ForAzCLI
if ($azCliAvailable -eq $False) {
    throw \"Cannot find the Azure CLI (az) on the machine. This must be available to continue.\"\t
}

$Keys = @()
$global:VariablesCreated = 0
$global:AppSettingsVariables = @()
$StepName = $OctopusParameters[\"Octopus.Step.Name\"]

# Extract key names+optional custom variable name
@(($ConfigStoreKeyNames -Split \"`n\").Trim()) | ForEach-Object {
    if (![string]::IsNullOrWhiteSpace($_)) {
        Write-Verbose \"Working on: '$_'\"
        $keyDefinition = ($_ -Split \"\\|\")
        $keyName = $keyDefinition[0].Trim()
        $KeyIsWildcard = $keyName.EndsWith(\"*\")
        $variableName = $null
        if ($keyDefinition.Count -gt 1) {
            if ($KeyIsWildcard) {
                throw \"Key definition: '$_' evaluated as a wildcard with a custom variable name. This is not supported.\"
            }
            $variableName = $keyDefinition[1].Trim()
        }

        if ([string]::IsNullOrWhiteSpace($keyName)) {
            throw \"Unable to establish key name from: '$($_)'\"
        }

        $key = [PsCustomObject]@{
            KeyName       = $keyName
            KeyIsWildcard = $KeyIsWildcard
            VariableName  = if (![string]::IsNullOrWhiteSpace($variableName)) { $variableName } else { \"\" }
        }
        $Keys += $key
    }
}

$LabelsArray = $global:ConfigStoreLabels -Split \",\" | Where-Object { [string]::IsNullOrWhiteSpace($_) -eq $False }

Write-Verbose \"Azure AppConfig Retrieval Method: $global:AzureAppConfigRetrievalMethod\"
if (![string]::IsNullOrWhiteSpace($global:AzureAppConfigStoreName)) {
    Write-Verbose \"Azure AppConfig Store Name: $global:AzureAppConfigStoreName\"
}
if (![string]::IsNullOrWhiteSpace($global:AzureAppConfigStoreEndpoint)) {
    Write-Verbose \"Azure AppConfig Store Endpoint: $global:AzureAppConfigStoreEndpoint\"
}
Write-Verbose \"Save sensitive variables: $SaveValuesAsSensitiveVariables\"
Write-Verbose \"Treat warnings as errors: $global:TreatWarningsAsErrors\"
Write-Verbose \"Suppress warnings: $global:SuppressWarnings\"
Write-Verbose \"Print variables: $PrintVariableNames\"
Write-Verbose \"Keys to retrieve: $($Keys.Count)\"
Write-Verbose \"Labels to retrieve: $($LabelsArray.Count)\"

$appConfigResponse = $null

# Retrieving all keys should be more performant, but may have a larger payload response.
if ($RetrieveAllKeys) {
    
    if ($Keys.Count -gt 0) {
        Write-Host \"Retrieving ALL config values from store\"
        $command = \"az appconfig kv list $($global:ConfigStoreParameters) --all --auth-mode login\"
    
        if (![string]::IsNullOrWhiteSpace($global:ConfigStoreLabels)) {
            $command += \" --label \"\"$($global:ConfigStoreLabels)\"\" \"
        }
        Write-Verbose \"Invoking expression: $command\"
        $appConfigResponse = Invoke-Expression -Command $command
        $ExitCode = $LastExitCode
        Write-Verbose \"az exit code: $ExitCode\"
        if ($ExitCode -ne 0) {
            throw \"Error retrieving appsettings. ExitCode: $ExitCode\"
        }
    
        if ([string]::IsNullOrWhiteSpace($appConfigResponse)) {
            Write-OctopusWarning \"Null or empty response received from Azure App Configuration service\"
        }
        else {
            $appConfigValues = $appConfigResponse | ConvertFrom-Json
        }

        foreach ($key in $Keys) {
            $keyName = $key.KeyName
            $KeyIsWildcard = $key.KeyIsWildcard
            $variableName = $key.VariableName
        
            Find-AzureAppConfigMatchesFromKey -KeyName $keyName -IsWildcard $KeyIsWildcard -VariableName $variableName -AppConfigValues $appConfigValues
        }
    }
    # Possible that ONLY labels have been provided
    elseif ($LabelsArray.Count -gt 0) {
        Find-AzureAppConfigMatchesFromLabels 
    }
}
# Loop through and get keys based on the supplied names
else {
    
    Write-Host \"Retrieving keys based on supplied names...\"
    if ($Keys.Count -gt 0) {
        foreach ($key in $Keys) {
            $keyName = $key.KeyName
            $KeyIsWildcard = $key.KeyIsWildcard
            $variableName = $key.VariableName

            if ([string]::IsNullOrWhiteSpace($variableName)) {
                $variableName = \"$($keyName.Trim())\"
            }

            Write-Verbose \"Retrieving values matching key: $($keyName) from store\"
            $command = \"az appconfig kv list $($global:ConfigStoreParameters) --key \"\"$keyName\"\" --auth-mode login\"
            
            if (![string]::IsNullOrWhiteSpace($global:ConfigStoreLabels)) {
                $command += \" --label \"\"$($global:ConfigStoreLabels)\"\" \"
            }
            Write-Verbose \"Invoking expression: $command\"

            $appConfigResponse = Invoke-Expression -Command $command
            $ExitCode = $LastExitCode
            Write-Verbose \"az exit code: $ExitCode\"
            if ($ExitCode -ne 0) {
                throw \"Error retrieving appsettings. ExitCode: $ExitCode\"
            }

            if ([string]::IsNullOrWhiteSpace($appConfigResponse)) {
                Write-OctopusWarning \"Null or empty response received from Azure App Configuration service\"
            }
            else {
                $appConfigValues = $appConfigResponse | ConvertFrom-Json
                if ($appConfigValues.Count -eq 0) {
                    Write-OctopusWarning \"Unable to find a matching key in Azure App Config for: $($keyName)\"
                }
                else {
                    Write-Verbose \"Finding match(es) for: $($keyName)\"
                    Find-AzureAppConfigMatchesFromKey -KeyName $keyName -IsWildcard $KeyIsWildcard -VariableName $variableName -AppConfigValues $appConfigValues
                }
            }
        }
    }
}

if ($global:AppSettingsVariables.Count -gt 0 -and $global:CreateAppSettingsJson) {
    Write-Verbose \"Creating AppSettings JSON output variable\"
    $AppSettingsJson = ($global:AppSettingsVariables | Sort-Object -Property * -Unique) | ConvertTo-Json -Compress -Depth 10
    if ($SaveValuesAsSensitiveVariables) {
        Set-OctopusVariable -Name \"AppSettingsJson\" -Value $AppSettingsJson -Sensitive
    }
    else {
        Set-OctopusVariable -Name \"AppSettingsJson\" -Value $AppSettingsJson 
    }
    $global:VariablesCreated += 1
    if ($PrintVariableNames) {
        Write-Host \"Created output variable: ##{Octopus.Action[$StepName].Output.AppSettingsJson}\"
    }
}

Write-Host \"Created $global:VariablesCreated output variable(s)\""
  },
  "Parameters": [
    {
      "Id": "4bc809d3-71d5-4f05-ba0e-994ef6649db0",
      "Name": "Azure.AppConfig.KV.RetrieveValues.AzureAccount",
      "Label": "Azure Account",
      "HelpText": "An Azure account with permissions to retrieve values from the Azure App Config store",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "AzureAccount"
      }
    },
    {
      "Id": "2b53fffb-cef1-4c3b-a070-aa6448fe84b0",
      "Name": "Azure.AppConfig.KV.RetrieveValues.ConfigStoreName",
      "Label": "Config Store Name",
      "HelpText": "The name of the Azure App Configuration store. Provide this or the **Config store endpoint**.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "41f5fa14-c1ce-4a27-9e63-06419e96f095",
      "Name": "Azure.AppConfig.KV.RetrieveValues.ConfigStoreEndpoint",
      "Label": "Config Store Endpoint",
      "HelpText": "The endpoint for the Azure App Configuration Store. Provide this or the **Config store name**.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "39d76051-4ede-47dd-8139-57f3801d215e",
      "Name": "Azure.AppConfig.KV.RetrieveValues.RetrievalMethod",
      "Label": "Retrieval Method",
      "HelpText": "Choose how the step calls the az cli. Either:
- `All`: Retrieve all configuration values in one call
- `Individually`: Retrieve configuration values in multiple calls; one for each key specified in the **Key Names** parameter.

Default: `All`",
      "DefaultValue": "all",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "all|All
individual|Individually"
      }
    },
    {
      "Id": "02d67ef3-d990-499c-bdbd-226d583ccdc0",
      "Name": "Azure.AppConfig.KV.RetrieveValues.KeyNames",
      "Label": "Key Names",
      "HelpText": "Specify the names of the keys to be returned from Azure App Configuration in the format `KeyName | OutputVariableName` where:

- `KeyName` is the key to retrieve. Wildcards are supported by adding `*` at the end of the key name.
- `OutputVariableName` is the _optional_ Octopus [output variable](https://octopus.com/docs/projects/variables/output-variables) name to store the key's value in. *If this value isn't specified, an output name will be generated dynamically*.

**Note:** Multiple keys can be retrieved by entering each one on a new line. Note: Combining a wildcard search with custom output variable names is not supported.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "MultiLineText"
      }
    },
    {
      "Id": "b97ff62d-6b14-4baa-abc2-9065632f5118",
      "Name": "Azure.AppConfig.KV.RetrieveValues.Labels",
      "Label": "Labels",
      "HelpText": "Labels are an attribute on keys. Provide one or more labels in the format `label1,label2` to retrieve only selected keys that are tagged with those labels.

**Note:** You can include both label values *and* specify key names if you want.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "a5dfafc4-743e-4a56-8c89-cd001dc73af3",
      "Name": "Azure.AppConfig.KV.RetrieveValues.SaveAsSensitiveVariables",
      "Label": "Save sensitive output variables",
      "HelpText": "Set the Octopus [output variables](https://octopus.com/docs/projects/variables/output-variables) to Sensitive values. Default: `False`.",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "c93c377c-e557-4b8a-a918-ee0c47f80c1b",
      "Name": "Azure.AppConfig.KV.RetrieveValues.SuppressWarnings",
      "Label": "Suppress warnings",
      "HelpText": "Suppress warnings from being written to the task log. For example, when a supplied key can't be found in the Azure App Configuration store.",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "c51f515f-c749-4c00-90b3-fdc09b2cd426",
      "Name": "Azure.AppConfig.KV.RetrieveValues.TreatWarningsAsErrors",
      "Label": "Treat Warnings as Errors",
      "HelpText": "Treats warnings as errors. If enabled, the **Suppress Warnings** parameter is ignored. ",
      "DefaultValue": "True",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "166f88c8-2fb0-4a3c-a0dc-c4087a5ebc76",
      "Name": "Azure.AppConfig.KV.RetrieveValues.CreateAppSettingsJson",
      "Label": "Create AppSettings JSON",
      "HelpText": "Create an Azure App Service AppSettings JSON output variable called `AppSettingsJson`. This can be useful when using the Octopus **Azure App Service** step and you want to dynamically create the JSON app settings.",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "159858de-5a33-4111-a059-de261f687b08",
      "Name": "Azure.AppConfig.KV.RetrieveValues.PrintVariableNames",
      "Label": "Print output variable names",
      "HelpText": "Write out the Octopus [output variable](https://octopus.com/docs/projects/variables/output-variables) names to the task log. Default: `False`.",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    }
  ],
  "StepPackageId": "Octopus.AzurePowerShell",
  "$Meta": {
    "ExportedAt": "2023-11-30T15:10:08.828Z",
    "OctopusVersion": "2024.1.2702",
    "Type": "ActionTemplate"
  },
  "LastModifiedAt": "2023-11-30T15:10:08.828Z",
  "LastModifiedBy": "harrisonmeister",
  "Category": "azure"
}
