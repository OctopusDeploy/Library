{
  "Id": "6db15b08-f6c6-4a6e-833c-773eb38ec0f0",
  "Name": "Git - Clone, copy, push to another repo",
  "Description": "Clones both a source and destination repository, copies files from the `Source Path` to the `Destination Path` then commits to the destination repository.",
  "ActionType": "Octopus.Script",
  "Version": 2,
  "CommunityActionTemplateId": null,
  "Packages": [],
  "Properties": {
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptBody": "Function Invoke-Git
{
\t# Define parameters
    param (
    \t$GitRepositoryUrl,
        $GitFolder,
        $GitUsername,
        $GitPassword,
        $GitCommand,
        $AdditionalArguments
    )
    
    # Get current work folder
    $workDirectory = Get-Location

\t# Check to see if GitFolder exists
    if (![String]::IsNullOrWhitespace($GitFolder) -and (Test-Path -Path $GitFolder) -eq $false)
    {
    \t# Create the folder
        New-Item -Path $GitFolder -ItemType \"Directory\" -Force | Out-Null
        
        # Set the location to the new folder
        Set-Location -Path $GitFolder
    }
    
    # Create arguments array
    $gitArguments = @()
    $gitArguments += $GitCommand
    
    # Check for url
    if (![string]::IsNullOrWhitespace($GitRepositoryUrl))
    {
      # Convert url to URI object
      $gitUri = [System.Uri]$GitRepositoryUrl
      $gitUrl = \"{0}://{1}:{2}@{3}:{4}{5}\" -f $gitUri.Scheme, $GitUsername, $GitPassword, $gitUri.Host, $gitUri.Port, $gitUri.PathAndQuery
      $gitArguments += $gitUrl

      # Get the newly created folder name
      $gitFolderName = $GitRepositoryUrl.SubString($GitRepositoryUrl.LastIndexOf(\"/\") + 1)
      if ($gitFolderName.Contains(\".git\"))
      {
          $gitFolderName = $gitFolderName.SubString(0, $gitFolderName.IndexOf(\".\"))
      }
    }
   
    
    # Check for additional arguments
    if ($null -ne $AdditionalArguments)
    {
 \t\t# Add the additional arguments
        $gitArguments += $AdditionalArguments
    }
    
    # Execute git command
    $results = Execute-Command -commandPath \"git\" -commandArguments $gitArguments -workingDir $GitFolder
    
    Write-Host $results.stdout
    Write-Host $results.stderr
    
    # Return the foldername
    Set-Location -Path $workDirectory
    
    # Check to see if GitFolder is null
    if ($null -ne $GitFolder)
    {
    \treturn Join-Path -Path $GitFolder -ChildPath $gitFolderName
    }
}

# Check to see if $IsWindows is available
if ($null -eq $IsWindows) {
    Write-Host \"Determining Operating System...\"
    $IsWindows = ([System.Environment]::OSVersion.Platform -eq \"Win32NT\")
    $IsLinux = ([System.Environment]::OSVersion.Platform -eq \"Unix\")
}

Function Copy-Files
{
\t# Define parameters
    param (
    \t$SourcePath,
        $DestinationPath
    )
    
    # Copy the items from source path to destination path
    $copyArguments = @{}
    $copyArguments.Add(\"Path\", $SourcePath)
    $copyArguments.Add(\"Destination\", $DestinationPath)
    
    # Check to make sure destination exists
    if ((Test-Path -Path $DestinationPath) -eq $false)
    {
    \t# Create the destination path
        New-Item -Path $DestinationPath -ItemType \"Directory\" | Out-Null
    }
    
    # Check for wildcard
    if ($SourcePath.EndsWith(\"/*\") -or $SourcePath.EndsWith(\"\\*\"))
    {
\t\t# Add recurse argument
\t\t$copyArguments.Add(\"Recurse\", $true)
    }
    
    # Force overwrite
    $copyArguments.Add(\"Force\", $true)
    
    # Copy files
    Copy-Item @copyArguments
}

Function Execute-Command
{
\tparam (
    \t$commandPath,
        $commandArguments,
        $workingDir
    )

\t$gitExitCode = 0
    $executionResults = $null

  Try {
    $pinfo = New-Object System.Diagnostics.ProcessStartInfo
    $pinfo.FileName = $commandPath
    $pinfo.WorkingDirectory = $workingDir
    $pinfo.RedirectStandardError = $true
    $pinfo.RedirectStandardOutput = $true
    $pinfo.UseShellExecute = $false
    $pinfo.Arguments = $commandArguments
    $p = New-Object System.Diagnostics.Process
    $p.StartInfo = $pinfo
    $p.Start() | Out-Null
    $executionResults = [pscustomobject]@{
        stdout = $p.StandardOutput.ReadToEnd()
        stderr = $p.StandardError.ReadToEnd()
        ExitCode = $null
    }
    $p.WaitForExit()
    $gitExitCode = [int]$p.ExitCode
    $executionResults.ExitCode = $gitExitCode
    
    if ($gitExitCode -ge 2) 
    {
\t\t# Fail the step
        throw
    }
    
    return $executionResults
  }
  Catch {
    # Check exit code
    Write-Error -Message \"$($executionResults.stderr)\" -ErrorId $gitExitCode
    exit $gitExitCode
  }

}

Function Get-GitExecutable
{
\t# Define parameters
    param (
    \t$WorkingDirectory
    )
      
    # Define variables
    $gitExe = \"PortableGit-2.41.0.3-64-bit.7z.exe\"
    $gitDownloadUrl = \"https://github.com/git-for-windows/git/releases/download/v2.41.0.windows.3/$gitExe\"
    $gitDownloadArguments = @{}
    $gitDownloadArguments.Add(\"Uri\", $gitDownloadUrl)
    $gitDownloadArguments.Add(\"OutFile\", \"$WorkingDirectory/git/$gitExe\")
    
    # This makes downloading faster
    $ProgressPreference = 'SilentlyContinue'
    
    # Check to see if git subfolder exists
    if ((Test-Path -Path \"$WorkingDirectory/git\") -eq $false)
    {
    \t# Create subfolder
        New-Item -Path \"$WorkingDirectory/git\"  -ItemType Directory
    }
    
    # Check PowerShell version
    if ($PSVersionTable.PSVersion.Major -lt 6)
    {
    \t# Use basic parsing is required
        $gitDownloadArguments.Add(\"UseBasicParsing\", $true)
    }
    
    # Download Git
    Write-Host \"Downloading Git ...\"
    Invoke-WebRequest @gitDownloadArguments
    
    # Extract Git
    $gitExtractArguments = @()
    $gitExtractArguments += \"-o\"
    $gitExtractArguments += \"$WorkingDirectory\\git\"
    $gitExtractArguments += \"-y\"
    $gitExtractArguments += \"-bd\"

    Write-Host \"Extracting Git download ...\"
    & \"$WorkingDirectory\\git\\$gitExe\" $gitExtractArguments

    # Wait until unzip action is complete
    while ($null -ne (Get-Process | Where-Object {$_.ProcessName -eq ($gitExe.Substring(0, $gitExe.LastIndexOf(\".\")))}))
    {
        Start-Sleep 5
    }
    
    # Add bin folder to path
    $env:PATH = \"$WorkingDirectory\\git\\bin$([IO.Path]::PathSeparator)\" + $env:PATH
    
    # Disable promopt for credential helper
    Invoke-Git -GitCommand \"config\" -AdditionalArguments @(\"--system\", \"--unset\", \"credential.helper\")
}

# Get variables
$sourceGitUrl = $OctopusParameters['Template.Git.Source.Repo.Url']
$destinationGitUrl = $OctopusParameters['Template.Git.Destination.Repo.Url']
$gitSourceUser = $OctopusParameters['Template.Git.Source.User.Name']
$gitSourcePassword = $OctopusParameters['Template.Git.Source.User.Password']
$gitDestinationUser = $OctopusParameters['Template.Git.Destination.User.Name']
$gitDestinationPassword = $OctopusParameters['Template.Git.Destination.User.Password']
$sourceItems = $OctopusParameters['Template.Git.Source.Path']
$destinationPath = $OctopusParameters['Template.Git.Destination.Path']
$gitTag = $OctopusParameters['Template.Git.Tag']
$gitSource = $null
$gitDestination = $null

# Check to see if it's Windows
if ($IsWindows -and $OctopusParameters['Octopus.Workerpool.Name'] -eq \"Hosted Windows\")
{
\t# Dynamic worker don't have git, download portable version and add to path for execution
    Write-Host \"Detected usage of Windows Dynamic Worker ...\"
    Get-GitExecutable -WorkingDirectory $PWD
}

# Clone destination repository
$destinationFolderName = Invoke-Git -GitRepositoryUrl $destinationGitUrl -GitUsername $gitDestinationUser -GitPassword $gitDestinationPassword -GitCommand \"clone\" -GitFolder \"$($PWD)/destination/default\"

# Check for tag
if (![String]::IsNullOrWhitespace($gitTag))
{
    $sourceFolderName = Invoke-Git -GitRepositoryUrl $sourceGitUrl -GitUsername $gitSourceUser -GitPassword $gitSourcePassword -GitCommand \"clone\" -GitFolder \"$($PWD)/source/tags/$gitTag\" -AdditionalArguments @(\"-b\", \"$gitTag\")
}
else
{
\t$sourceFolderName = Invoke-Git -GitRepositoryUrl $sourceGitUrl -GitUsername $gitSourceUser -GitPassword $gitSourcePassword -GitCommand \"clone\" -GitFolder \"$($PWD)/source/default\"
}

# Copy files from source to destination
Copy-Files -SourcePath \"$($sourceFolderName)$($sourceItems)\" -DestinationPath \"$($destinationFolderName)$($destinationPath)\"

# Set user
$gitAuthorName = $OctopusParameters['Octopus.Deployment.CreatedBy.DisplayName']
$gitAuthorEmail = $OctopusParameters['Octopus.Deployment.CreatedBy.EmailAddress']

# Check to see if user is system
if ([string]::IsNullOrWhitespace($gitAuthorEmail) -and $gitAuthorName -eq \"System\")
{
\t# Initiated by the Octopus server via automated process, put something in for the email address
    $gitAuthorEmail = \"system@octopus.local\"
}

Invoke-Git -GitCommand \"config\" -AdditionalArguments @(\"user.name\", $gitAuthorName) -GitFolder \"$($destinationFolderName)\" | Out-Null
Invoke-Git -GitCommand \"config\" -AdditionalArguments @(\"user.email\", $gitAuthorEmail) -GitFolder \"$($destinationFolderName)\" | Out-Null

# Commit changes
Invoke-Git -GitCommand \"add\" -GitFolder \"$destinationFolderName\" -AdditionalArguments @(\".\") | Out-Null
Invoke-Git -GitCommand \"commit\" -GitFolder \"$destinationFolderName\" -AdditionalArguments @(\"-m\", \"`\"Commit from #{Octopus.Project.Name} release version #{Octopus.Release.Number}`\"\") | Out-Null

# Push the changes back to git
Invoke-Git -GitCommand \"push\" -GitFolder \"$destinationFolderName\" | Out-Null

"
  },
  "Parameters": [
    {
      "Id": "674d5325-aa93-4779-a734-cee8e5690f17",
      "Name": "Template.Git.Source.Repo.Url",
      "Label": "Source Git Repository URL",
      "HelpText": "The URL used for the `git clone` operation.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "f2d07c9c-85fc-485e-8057-5577efd9a26d",
      "Name": "Template.Git.Source.User.Name",
      "Label": "Source Git Username",
      "HelpText": "Username of the credentials to use to log into git.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "597ae9a5-1ef4-4062-a435-2d9bb1fb16a2",
      "Name": "Template.Git.Source.User.Password",
      "Label": "Source Git User Password",
      "HelpText": "Password for the git credential.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Id": "5c080713-029f-4f9b-8037-234c7dd579bc",
      "Name": "Template.Git.Source.Path",
      "Label": "Source Path",
      "HelpText": "Relative path to the folder or items to copy.  This field can take wildcards, eg - `/MyPath/*`",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "5fa438c9-2aa7-476f-ae79-bd77cdc22ccc",
      "Name": "Template.Git.Tag",
      "Label": "Tag",
      "HelpText": "**(Optional)** Checkout the code for `SourcePath` from a specific tag.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "6d3f8f4f-8e02-48bc-b473-817693aaf835",
      "Name": "Template.Git.Destination.Repo.Url",
      "Label": "Destination Git Repository URL",
      "HelpText": "The destination repository to copy and push files to.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "59590dd8-6698-46f8-884c-78ad9f4b7c2e",
      "Name": "Template.Git.Destination.User.Name",
      "Label": "Destination Git Username",
      "HelpText": "Username of the credentials to log into destination git repo.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "d81e0a3d-5eb9-4dd3-a197-e5bf0c48cdf1",
      "Name": "Template.Git.Destination.User.Password",
      "Label": "Destination Git User Password",
      "HelpText": "Password for the destination git credential.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Id": "f9a2141a-bcfa-4e53-862b-429b4f9892d9",
      "Name": "Template.Git.Destination.Path",
      "Label": "Destination Path",
      "HelpText": "Relative path to the folder to copy items to.  This is the folder name only.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "StepPackageId": "Octopus.Script",
  "$Meta": {
    "ExportedAt": "2023-09-12T15:32:07.199Z",
    "OctopusVersion": "2023.4.2661",
    "Type": "ActionTemplate"
  },
  "LastModifiedBy": "twerthi",
  "Category": "git"
}
