{
  "Id": "34b4fa10-329f-4c50-ab7c-d6b047264b83",
  "Name": "SQL - Backup Database",
  "Description": "Backup a MS SQL Server database to the file system.",
  "ActionType": "Octopus.Script",
  "Version": 12,
  "Properties": {
    "Octopus.Action.Script.ScriptBody": "$ErrorActionPreference = \"Stop\"

function ConnectToDatabase() {
  param($server, $SqlLogin, $SqlPassword, $ConnectionTimeout)

  $server.ConnectionContext.StatementTimeout = $ConnectionTimeout

  if ($null -ne $SqlLogin) {

    if ($null -eq $SqlPassword) {
      throw \"SQL Password must be specified when using SQL authentication.\"
    }

    $server.ConnectionContext.LoginSecure = $false
    $server.ConnectionContext.Login = $SqlLogin
    $server.ConnectionContext.Password = $SqlPassword

    Write-Host \"Connecting to server using SQL authentication as $SqlLogin.\"
    $server = New-Object Microsoft.SqlServer.Management.Smo.Server $server.ConnectionContext
  }
  else {
    Write-Host \"Connecting to server using Windows authentication.\"
  }

  try {
    $server.ConnectionContext.Connect()
  }
  catch {
    Write-Error \"An error occurred connecting to the database server!`r`n$($_.Exception.ToString())\"
  }
}

function AddPercentHandler {
  param($smoBackupRestore, $action)

  $percentEventHandler = [Microsoft.SqlServer.Management.Smo.PercentCompleteEventHandler] { Write-Host $dbName $action $_.Percent \"%\" }
  $completedEventHandler = [Microsoft.SqlServer.Management.Common.ServerMessageEventHandler] { Write-Host $_.Error.Message }

  $smoBackupRestore.add_PercentComplete($percentEventHandler)
  $smoBackupRestore.add_Complete($completedEventHandler)
  $smoBackupRestore.PercentCompleteNotification = 10
}

function CreateDevice {
  param($smoBackupRestore, $directory, $name)

  $devicePath = [System.IO.Path]::Combine($directory, $name)
  $smoBackupRestore.Devices.AddDevice($devicePath, \"File\")
  return $devicePath
}

function CreateDevices {
  param($smoBackupRestore, $devices, $directory, $dbName, $incremental, $timestamp)

  $targetPaths = New-Object System.Collections.Generic.List[System.String]

  $extension = \".bak\"

  if ($incremental -eq $true) {
    $extension = \".trn\"
  }

  if ($devices -eq 1) {
    $deviceName = $dbName + \"_\" + $timestamp + $extension
    $targetPath = CreateDevice $smoBackupRestore $directory $deviceName
    $targetPaths.Add($targetPath)
  }
  else {
    for ($i = 1; $i -le $devices; $i++) {
      $deviceName = $dbName + \"_\" + $timestamp + \"_\" + $i + $extension
      $targetPath = CreateDevice $smoBackupRestore $directory $deviceName
      $targetPaths.Add($targetPath)
    }
  }
  return $targetPaths
}

function BackupDatabase {
  param (
    [Microsoft.SqlServer.Management.Smo.Server]$server,
    [string]$dbName,
    [string]$BackupDirectory,
    [int]$devices,
    [int]$compressionOption,
    [boolean]$incremental,
    [boolean]$copyonly,
    [string]$timestamp,
    [string]$timestampFormat,
    [boolean]$RetentionPolicyEnabled,
    [int]$RetentionPolicyCount
  )

  $smoBackup = New-Object Microsoft.SqlServer.Management.Smo.Backup
  $targetPaths = CreateDevices $smoBackup $devices $BackupDirectory $dbName $incremental $timestamp

  Write-Host \"Attempting to backup database $server.Name.$dbName to:\"
  $targetPaths | ForEach-Object { Write-Host $_ }
  Write-Host \"\"

  if ($incremental -eq $true) {
    $smoBackup.Action = \"Log\"
    $smoBackup.BackupSetDescription = \"Log backup of \" + $dbName
    $smoBackup.LogTruncation = \"Truncate\"
  }
  else {
    $smoBackup.Action = \"Database\"
    $smoBackup.BackupSetDescription = \"Full Backup of \" + $dbName
  }

  $smoBackup.BackupSetName = $dbName + \" Backup\"
  $smoBackup.MediaDescription = \"Disk\"
  $smoBackup.CompressionOption = $compressionOption
  $smoBackup.CopyOnly = $copyonly
  $smoBackup.Initialize = $true
  $smoBackup.Database = $dbName

  try {
    AddPercentHandler $smoBackup \"backed up\"
    $smoBackup.SqlBackup($server)
    Write-Host \"Backup completed successfully.\"

    if ($RetentionPolicyEnabled -eq $true) {
      ApplyRetentionPolicy $BackupDirectory $dbName $RetentionPolicyCount $Incremental $Devices $timestampFormat
    }
  }
  catch {
    Write-Error \"An error occurred backing up the database!`r`n$($_.Exception.ToString())\"
  }
}

function ApplyRetentionPolicy {
  param (
      [string]$BackupDirectory,
      [string]$dbName,
      [int]$RetentionPolicyCount,
      [boolean]$Incremental,
      [int]$Devices,
      [string]$timestampFormat
  )

  if ($RetentionPolicyCount -le 0) {
      Write-Host \"RetentionPolicyCount must be greater than 0. Exiting.\"
      return
  }

  $extension = if ($Incremental) { '.trn' } else { '.bak' }
  # This pattern helps to isolate the timestamp and possible device part from the filename
  $pattern = '^' + [regex]::Escape($dbName) + '_(\\d{4}-\\d{2}-\\d{2}-\\d{6})(?:_(\\d+))?' + [regex]::Escape($extension) + '$'

  $allBackups = Get-ChildItem -Path $BackupDirectory -File | Where-Object { $_.Name -match $pattern }

  # Group backups by their base name (assuming base name includes date but not part number)
  $backupGroups = $allBackups | Group-Object { if ($_ -match $pattern) { $Matches[1] } }

  # Sort groups by the latest file within each group, assuming the filename includes a sortable date
  $sortedGroups = $backupGroups | Sort-Object { [DateTime]::ParseExact($_.Name, \"yyyy-MM-dd-HHmmss\", $null) } -Descending

  # Select the latest groups based on retention policy count
  $groupsToKeep = $sortedGroups | Select-Object -First $RetentionPolicyCount

  # Flatten the list of files to keep
  $filesToKeep = $groupsToKeep | ForEach-Object { $_.Group } | ForEach-Object { $_.FullName }

  # Identify files to remove
  $filesToRemove = $allBackups | Where-Object { $filesToKeep -notcontains $_.FullName }

  foreach ($file in $filesToRemove) {
      Remove-Item $file.FullName -Force
      Write-Host \"Removed old backup file: $($file.Name)\"
  }

  Write-Host \"Retention policy applied successfully. Retained the most recent $RetentionPolicyCount backups.\"
}


function Invoke-SqlBackupProcess {
  param (
    [hashtable]$OctopusParameters
  )

  # Extracting parameters from the hashtable
  $ServerName = $OctopusParameters['Server']
  $DatabaseName = $OctopusParameters['Database']
  $BackupDirectory = $OctopusParameters['BackupDirectory']
  $CompressionOption = [int]$OctopusParameters['Compression']
  $Devices = [int]$OctopusParameters['Devices']
  $Stamp = $OctopusParameters['Stamp']
  $UseSqlServerTimeStamp = $OctopusParameters['UseSqlServerTimeStamp']
  $SqlLogin = $OctopusParameters['SqlLogin']
  $SqlPassword = $OctopusParameters['SqlPassword']
  $ConnectionTimeout = $OctopusParameters['ConnectionTimeout']
  $Incremental = [boolean]::Parse($OctopusParameters['Incremental'])
  $CopyOnly = [boolean]::Parse($OctopusParameters['CopyOnly'])
  $RetentionPolicyEnabled = [boolean]::Parse($OctopusParameters['RetentionPolicyEnabled'])
  $RetentionPolicyCount = [int]$OctopusParameters['RetentionPolicyCount']

  [System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.SMO\") | Out-Null
  [System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.SmoExtended\") | Out-Null
  [System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.ConnectionInfo\") | Out-Null
  [System.Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.SmoEnum\") | Out-Null

  $server = New-Object Microsoft.SqlServer.Management.Smo.Server $ServerName

  ConnectToDatabase $server $SqlLogin $SqlPassword $ConnectionTimeout

  $database = $server.Databases | Where-Object { $_.Name -eq $DatabaseName }
  $timestampFormat = \"yyyy-MM-dd-HHmmss\"
  if ($UseSqlServerTimeStamp -eq $true) {
    $timestampFormat = \"yyyyMMdd_HHmmss\"
  }
  $timestamp = if (-not [string]::IsNullOrEmpty($Stamp)) { $Stamp } else { Get-Date -format $timestampFormat }

  if ($null -eq $database) {
    Write-Error \"Database $DatabaseName does not exist on $ServerName\"
  }

  if ($Incremental -eq $true) {
    if ($database.RecoveryModel -eq 3) {
      write-error \"$DatabaseName has Recovery Model set to Simple. Log backup cannot be run.\"
    }

    if ($database.LastBackupDate -eq \"1/1/0001 12:00 AM\") {
      write-error \"$DatabaseName has no Full backups. Log backup cannot be run.\"
    }
  }

  if ($RetentionPolicyEnabled -eq $true -and $RetentionPolicyCount -gt 0) {
    if (-not [int]::TryParse($RetentionPolicyCount, [ref]$null) -or $RetentionPolicyCount -le 0) {
      Write-Error \"RetentionPolicyCount must be an integer greater than zero.\"
    }
  }

  BackupDatabase $server $DatabaseName $BackupDirectory $Devices $CompressionOption $Incremental $CopyOnly $timestamp $timestampFormat $RetentionPolicyEnabled $RetentionPolicyCount
}

if (Test-Path -Path \"Variable:OctopusParameters\") {
  Invoke-SqlBackupProcess -OctopusParameters $OctopusParameters
}
",
    "Octopus.Action.Script.Syntax": "PowerShell"
  },
  "SensitiveProperties": {},
  "Parameters": [
    {
      "Name": "Server",
      "Label": "Server",
      "HelpText": "The name of the SQL Server instance that the database resides in.",
      "DefaultValue": ".",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "Database",
      "Label": "Database",
      "HelpText": "The name of the database to back up.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "BackupDirectory",
      "Label": "Backup Directory",
      "HelpText": "The output directory to drop the database backup into.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "SqlLogin",
      "Label": "SQL login",
      "HelpText": "The SQL auth login to connect with. If specified, the SQL Password must also be entered.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "SqlPassword",
      "Label": "SQL password",
      "HelpText": "The password for the SQL auth login to connect with. Only used if SQL Login is specified.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Name": "Compression",
      "Label": "Compression Option",
      "HelpText": "- 0  -   Use the default backup compression server configuration
- 1  -   Enable the backup compression
- 2  -   Disable the backup compression",
      "DefaultValue": "1",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "0|Default
1|Enabled
2|Disabled"
      }
    },
    {
      "Name": "Devices",
      "Label": "Devices",
      "HelpText": "The number of backup devices to use for the backup.",
      "DefaultValue": "1",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "1|1
2|2
3|3
4|4"
      }
    },
    {
      "Name": "Stamp",
      "Label": "Backup file suffix",
      "HelpText": "Specify a suffix to add to the backup file names. If left blank the backup will use the current timestamp.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "UseSqlServerTimeStamp",
      "Label": "Use SQL Server timestamp format",
      "HelpText": "If no suffix is specified, use the MSSQL timestamp format.",
      "DefaultValue": "false",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Name": "ConnectionTimeout",
      "Label": "Connection Timeout",
      "HelpText": "Specify the connection timeout settings (in seconds) for the SQL connection. If the backup takes longer than this value, the backup will fail.",
      "DefaultValue": "36000",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "Incremental",
      "Label": "Backup Action",
      "HelpText": "Specify the Database backup action",
      "DefaultValue": "false",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "false|Full
true|Log (Incremental)"
      }
    },
    {
      "Name": "CopyOnly",
      "Label": "Copy Only",
      "HelpText": "Specify whether the backup is Copy Only",
      "DefaultValue": "true",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Name": "RetentionPolicyEnabled",
      "Label": "Retention Policy Enabled",
      "HelpText": "Specify if a limit should be imposed on retaining older backups. Will only be applied if Retention Policy Count is set, and is greater than 0.",
      "DefaultValue": "false",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Name": "RetentionPolicyCount",
      "Label": "Retention Policy Count",
      "HelpText": "Specify how many old copies of the DB should be retained",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LastModifiedOn": "2024-03-26T09:30:00.0000000-07:00",
  "LastModifiedBy": "bcullman",
  "$Meta": {
    "ExportedAt": "2024-03-26T09:30:00.0000000-07:00",
    "OctopusVersion": "2022.3.10640",
    "Type": "ActionTemplate"
  },
  "Category": "sql"
}
