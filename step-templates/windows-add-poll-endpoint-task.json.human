{
  "Id": "0ad0ad00-adad-adad-adad-000000000002",
  "Name": "Windows - Add poll rest endpoint scheduled task",
  "Description": "Adds a scheduled task that polls a specified endpoint at a specific interval using the provided HTTP method",
  "ActionType": "Octopus.Script",
  "Version": 1,
  "Properties": {
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptBody": "# Running outside octopus
Param(
    [string] $AD_PollRestEndpoint_Uri,
    [string] $AD_PollRestEndpoint_Name = \"Polling task for endpoint\",
    [string] $AD_PollRestEndpoint_HttpMethod = \"GET\",
    [string] $AD_PollRestEndpoint_Interval = 60,
    [Int16] $AD_PollRestEndpoint_Attempts = 5,
    [switch] $WhatIf
)

$ErrorActionPreference = \"Stop\"

function Get-Param($Name, [switch]$Required, $Default) {
    $result = $null

    if ($null -ne $OctopusParameters) {
        $result = $OctopusParameters[$Name]
    }

    if ($null -eq $result) {
        $variable = Get-Variable $Name -EA SilentlyContinue
        if ($null -ne $variable) {
            $result = $variable.Value
        }
    }

    if ($null -eq $result) {
        if ($Required) {
            throw \"Missing parameter value $Name\"
        }
        else {
            $result = $Default
        }
    }

    return $result
}
function Execute(
    [Parameter(Mandatory = $true)][string] $Uri,
    [Parameter(Mandatory = $false)][string] $Name = \"Polling task for endpoint\",
    [Parameter(Mandatory = $false)][string] $HttpMethod = \"GET\",
    [Parameter(Mandatory = $false)][string] $Interval = 60,
    [Parameter(Mandatory = $false)][Int16] $Attempts = 5
) {
    $attemptCount = 0
    $operationIncomplete = $true
    $maxFailures = $Attempts
    $sleepBetweenFailures = 1

    $script = '-noprofile -executionpolicy bypass -command \"& { Invoke-RestMethod -Uri ' + $Uri + ' -Method ' + $HttpMethod + ' }\"'
    $repeat = (New-TimeSpan -Seconds $Interval)

    $action = New-ScheduledTaskAction \"powershell.exe\" -Argument  \"$script\"
    $duration = (New-TimeSpan -Days 9999)
    $trigger = New-ScheduledTaskTrigger -Once -At (Get-Date).Date -RepetitionInterval $repeat -RepetitionDuration $duration
    $settings = New-ScheduledTaskSettingsSet -StartWhenAvailable -DontStopOnIdleEnd

    while ($operationIncomplete -and $attemptCount -lt $maxFailures) {
        $attemptCount = ($attemptCount + 1)
        if ($attemptCount -ge 2) {
            Write-Output \"Waiting for $sleepBetweenFailures seconds before retrying...\"
            Start-Sleep -s $sleepBetweenFailures
            Write-Output \"Retrying...\"
            $sleepBetweenFailures = ($sleepBetweenFailures * 2)
        }
        try {
            $task = Get-ScheduledTask -TaskName $Name -ErrorAction SilentlyContinue
            Write-Output $task
            $msg = \"Task '$Name'\"
            if ($null -ne $task) {
                Write-Output \"$msg already exists - DELETING...\"
                if (-Not ($WhatIf)) {
                    Unregister-ScheduledTask -TaskName $name -Confirm:$false
                }
                Write-Output \"$msg - DELETED\"
            }
            Write-Output \"$msg - ADDING...\"
            if (-Not ($WhatIf)) {
                Register-ScheduledTask -TaskName $Name -Action $action -Trigger $trigger -RunLevel Highest -Settings $settings -User \"System\"
            }
            Write-Output \"$msg - ADDED\"
            $operationIncomplete = $false
        }
        catch [System.Exception] {
            if ($attemptCount -lt ($maxFailures)) {
                Write-Host (\"Attempt $attemptCount of $maxFailures failed: \" + $_.Exception.Message)
            }
            else {
                throw
            }
        }
    }
}
& Execute `
(Get-Param 'AD_PollRestEndpoint_Uri' -Required)`
(Get-Param 'AD_PollRestEndpoint_Name')`
(Get-Param 'AD_PollRestEndpoint_HttpMethod')`
(Get-Param 'AD_PollRestEndpoint_Interval')`
(Get-Param 'AD_PollRestEndpoint_Attempts')
"
  },
  "Parameters": [
    {
      "Name": "AD_PollRestEndpoint_Uri",
      "Label": "Endpoint Uri",
      "HelpText": "The endpoint uri to poll",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "AD_PollRestEndpoint_Name",
      "Label": "Task name",
      "HelpText": "Task name without any special characters",
      "DefaultValue": "Polling task for endpoint",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "AD_PollRestEndpoint_HttpMethod",
      "Label": "HTTP Method",
      "HelpText": "The HTTP method to be used for calling the endpoint",
      "DefaultValue": "GET",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "GET
POST
PUT
DELETE
PATCH"
      }
    },
    {
      "Name": "AD_PollRestEndpoint_Interval",
      "Label": "Polling interval",
      "HelpText": "Polling interval in seconds",
      "DefaultValue": "60",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "AD_PollRestEndpoint_Attempts",
      "Label": "Attempts",
      "HelpText": "Number of retry attempts in case the scheduling fails",
      "DefaultValue": "5",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LastModifiedBy": "anatolie-darii",
  "$Meta": {
    "ExportedAt": "2018-07-17T10:18:23.003Z",
    "OctopusVersion": "2018.2.8",
    "Type": "ActionTemplate"
  },
  "Category": "windows"
}
