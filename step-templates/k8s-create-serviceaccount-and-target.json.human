{
  "Id": "05d2d9a8-3862-49ff-97d6-5f08935f6fa3",
  "Name": "Kubernetes - Create Service Account and Target",
  "Description": "Create a service account with a role granting full access to everything in the namespace, and create a Kubernetes target with the new account in Octopus",
  "ActionType": "Octopus.KubernetesRunScript",
  "Version": 14,
  "CommunityActionTemplateId": null,
  "Packages": [],
  "Properties": {
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptBody": "if ([string]::IsNullOrWhitespace($CreateK8sTargetNamespace)) {
\tWrite-Error \"The namespace variable must be defined\"
    exit 1
}

if ([string]::IsNullOrWhitespace($CreateK8sTargetRole)) {
\tWrite-Error \"The role variable must be defined\"
    exit 1
}

$target = if ([string]::IsNullOrEmpty($CreateK8sTargetName)) {\"$($CreateK8sTargetNamespace)-k8s\"} else {$CreateK8sTargetName}
$serviceaccount = \"$($CreateK8sTargetNamespace)-deployer\"
$rolename = \"$($CreateK8sTargetNamespace)-deployer-role\"
$binding = \"$($CreateK8sTargetNamespace)-deployer-binding\"

$count = (kubectl get namespaces -o json |
\tConvertFrom-JSON |
    Select-Object -ExpandProperty items |
    ? {$_.metadata.name -eq $CreateK8sTargetNamespace}).Count
    
if ($count -eq 0) {
  Set-Content -Path namespace.yaml -Value @\"
  apiVersion: v1
  kind: Namespace
  metadata:
    name: $CreateK8sTargetNamespace
\"@

  if (![string]::IsNullOrWhitespace($CreateK8sTargetNamespaceAnnotations)) {
  \tAdd-Content -Path namespace.yaml -Value @\"
    annotations:
\"@
\t$annotations = ($CreateK8sTargetNamespaceAnnotations -split '\\r?\
').Trim()
    foreach ($annotation in $annotations) {
        Add-Content -Path namespace.yaml -Value @\"
      $annotation
\"@
    }
  }

  kubectl apply -f namespace.yaml
}

Set-Content -Path serviceaccount.yaml -Value @\"
apiVersion: v1
kind: ServiceAccount
metadata:
  name: $serviceaccount
  namespace: $CreateK8sTargetNamespace 
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: $CreateK8sTargetNamespace 
  name: $rolename
rules:
- apiGroups: [\"*\"]
  resources: [\"*\"]
  verbs: [\"*\"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: $binding
  namespace: $CreateK8sTargetNamespace 
subjects:
- kind: ServiceAccount
  name: $serviceaccount
  apiGroup: \"\"
roleRef:
  kind: Role
  name: $rolename
  apiGroup: \"\"
\"@

kubectl apply -f serviceaccount.yaml
 
Set-Content -Path secret.yaml -Value @\"
apiVersion: v1
kind: Secret
type: kubernetes.io/service-account-token
metadata:
  name: $serviceaccount
  namespace: $CreateK8sTargetNamespace
  annotations:
    kubernetes.io/service-account.name: \"$serviceaccount\"
\"@

kubectl apply -f secret.yaml

$data = kubectl get secret $serviceaccount -o jsonpath=\"{.data.token}\" --namespace=$CreateK8sTargetNamespace 

$token = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($data))
$url = (kubectl config view -o json | ConvertFrom-Json).clusters[0].cluster.server

New-OctopusTokenAccount -Name $target -token $token -updateIfExisting

if ([string]::IsNullOrEmpty(\"#{Octopus.Action.Kubernetes.CertificateAuthority}\") -or \"#{Octopus.Action.Kubernetes.AksAdminLogin}\" -ieq \"True\") {
\tNew-OctopusKubernetesTarget `
\t\t-name $target `
\t\t-clusterUrl $url `
\t\t-octopusRoles $CreateK8sTargetRole `
\t\t-octopusAccountIdOrName $target `
\t\t-namespace $CreateK8sTargetNamespace `
\t\t-updateIfExisting `
\t\t-skipTlsVerification True `
\t\t-octopusDefaultWorkerPoolIdOrName \"#{Octopus.WorkerPool.Id}\" `
        -healthCheckContainerImageFeedIdOrName \"$CreateK8sTargetContainerImageFeed\" `
    \t-healthCheckContainerImage \"$CreateK8sTargetContainerImage\"
} else {
\tNew-OctopusKubernetesTarget `
\t\t-name $target `
\t\t-clusterUrl $url `
\t\t-octopusRoles $CreateK8sTargetRole `
\t\t-octopusAccountIdOrName $target `
\t\t-namespace $CreateK8sTargetNamespace `
\t\t-updateIfExisting `
        -octopusServerCertificateIdOrName \"#{Octopus.Action.Kubernetes.CertificateAuthority}\" `
\t\t-octopusDefaultWorkerPoolIdOrName \"#{Octopus.WorkerPool.Id}\" `
        -healthCheckContainerImageFeedIdOrName \"$CreateK8sTargetContainerImageFeed\" `
    \t-healthCheckContainerImage \"$CreateK8sTargetContainerImage\"
}"
  },
  "Parameters": [
    {
      "Id": "66047c5e-8827-4bce-85ef-98466e656d0e",
      "Name": "CreateK8sTargetName",
      "Label": "Target name",
      "HelpText": "The optional name of the target. Defaults to \"<namespace>-k8s\" if no value is defined.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "1505ab59-1b6b-497e-9aa5-888f583c2cb2",
      "Name": "CreateK8sTargetRole",
      "Label": "Target Role",
      "HelpText": "The role to assign to the new Kubernetes target",
      "DefaultValue": "k8s",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "e0dc3fc2-b422-4b27-8353-efee0233cf7f",
      "Name": "CreateK8sTargetNamespace",
      "Label": "Target Namespace",
      "HelpText": "The namespace that the service account is granted access to, as well as the default namespace on the target.",
      "DefaultValue": "#{Octopus.Environment.Name | ToLower}",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "34a94173-611f-4cbf-b30a-66fb9456d1cf",
      "Name": "CreateK8sTargetNamespaceAnnotations",
      "Label": "Namespace annotations",
      "HelpText": "An optional list of annotations to apply to the namespace",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "MultiLineText"
      }
    },
    {
      "Id": "f14880f9-5a57-4469-85d7-5e68e090ed43",
      "Name": "CreateK8sTargetContainerImageFeed",
      "Label": "Container Image Feed",
      "HelpText": "The optional name of the Docker feed where the container image is sourced from.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "8d8d4317-af86-4a2a-9c04-eef1d8624e4a",
      "Name": "CreateK8sTargetContainerImage",
      "Label": "Container image",
      "HelpText": "The optional name of the health check container image.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "$Meta": {
    "ExportedAt": "2023-03-07T11:26:30.753Z",
    "OctopusVersion": "2023.1.9608",
    "Type": "ActionTemplate"
  },
  "LastModifiedBy": "isaaccalligeros",
  "Category": "k8s"
}
