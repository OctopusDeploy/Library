{
    "Id": "21583723-1283-46aa-bb7b-121d365837cb",
    "Name": "Lets Encrypt - DNSimple",
    "Description": "Request (or renew) a X.509 SSL Certificate from the [Let's Encrypt Certificate Authority](https://letsencrypt.org/). 

#### Features

- ACME v2 protocol support which allows generating wildcard certificates (*.example.com)
- [DNSimple](https://dnsimple.com/) Challenge for TLD, CNAME and Wildcard domains. 
- Publishes/Updates SSL Certificates in the [Octopus Deploy Certificate Store](https://octopus.com/docs/deployment-examples/certificates). 
- Verified to work on both Windows (PowerShell 5+) and Linux (PowerShell 6+) deployment Targets or Workers.",
    "ActionType": "Octopus.Script",
    "Version": 7,
    "CommunityActionTemplateId": null,
    "Packages": [
        
    ],
    "Properties":{
        "Octopus.Action.Script.ScriptSource": "Inline",
        "Octopus.Action.Script.Syntax": "PowerShell",
        "Octopus.Action.Script.ScriptBody": "###############################################################################
# TLS 1.2
###############################################################################
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

###############################################################################
# Required Modules folder
###############################################################################
Write-Host \"Checking for required powershell modules folder\"
$ModulesFolder = \"$HOME\\Documents\\WindowsPowerShell\\Modules\"
if ($PSEdition -eq \"Core\") {
    if ($PSVersionTable.Platform -eq \"Unix\") {
        $ModulesFolder = \"$HOME/.local/share/powershell/Modules\"
    }
    else {
        $ModulesFolder = \"$HOME\\Documents\\PowerShell\\Modules\"
    }
}
$PSModuleFolderExists = (Test-Path $ModulesFolder)
if ($PSModuleFolderExists -eq $False) {
\tWrite-Host \"Creating directory: $ModulesFolder\"
\tNew-Item $ModulesFolder -ItemType Directory -Force
    $env:PSModulePath = $ModulesFolder + [System.IO.Path]::PathSeparator + $env:PSModulePath
}

###############################################################################
# Required Modules
###############################################################################
Write-Host \"Checking for required modules.\"
$required_posh_acme_version = 3.12.0
$module_check = Get-Module -ListAvailable -Name Posh-Acme | Where-Object { $_.Version -ge $required_posh_acme_version }

if (-not ($module_check)) {
    Write-Host \"Ensuring NuGet provider is bootstrapped.\"
    Get-PackageProvider NuGet -ForceBootstrap | Out-Null
    Write-Host \"Installing Posh-ACME.\"
    Install-Module -Name Posh-ACME -MinimumVersion 3.12.0 -Scope CurrentUser -Force
}

Import-Module Posh-ACME

###############################################################################
# DebugOutput
###############################################################################
if ($OctopusParameters[\"LE_DNSimple_Debug_Output\"] -eq $True) {
\tWrite-Host \"Setting DebugPreference to Continue\"
    $DebugPreference = 'Continue'
}

###############################################################################
# Constants
###############################################################################
$LE_DNSimple_CertificateDomain = $OctopusParameters[\"LE_DNSimple_CertificateDomain\"]
$LE_DNSimple_CertificateName = \"Lets Encrypt - $($LE_DNSimple_CertificateDomain)\"

# Issuer used in a cert could be one of multiple, including ones no longer supported by Let's Encrypt
$LE_DNSimple_Fake_Issuers = @(\"Fake LE Intermediate X1\", \"(STAGING) Artificial Apricot R3\", \"(STAGING) Ersatz Edamame E1\")
$LE_DNSimple_Issuers = @(\"Let's Encrypt Authority X3\", \"E1\", \"E2\", \"R3\", \"R4\", \"R5\", \"R6\", \"R10\", \"R11\")


###############################################################################
# Helpers
###############################################################################
function Get-WebRequestErrorBody {
    param (
        $RequestError
    )

    # Powershell < 6 you can read the Exception
    if ($PSVersionTable.PSVersion.Major -lt 6) {
        if ($RequestError.Exception.Response) {
            $reader = New-Object System.IO.StreamReader($RequestError.Exception.Response.GetResponseStream())
            $reader.BaseStream.Position = 0
            $reader.DiscardBufferedData()
            $response = $reader.ReadToEnd()

            return $response | ConvertFrom-Json
        }
    }
    else {
        return $RequestError.ErrorDetails.Message
    }
}

###############################################################################
# Functions
###############################################################################
function Get-LetsEncryptCertificate {
    Write-Debug \"Entering: Get-LetsEncryptCertificate\"

    if ($OctopusParameters[\"LE_DNSimple_Use_Staging\"] -eq $True) {
        Write-Host \"Using Lets Encrypt Server: Staging\"
        Set-PAServer LE_STAGE;
    }
    else {
        Write-Host \"Using Lets Encrypt Server: Production\"
        Set-PAServer LE_PROD;
    }

    # Clobber account if it exists.
    $le_account = Get-PAAccount
    if ($le_account) {
        Remove-PAAccount $le_account.Id -Force
    }

\t$dnsimple_args = @{}
    # DNSimple requires a token. If it's windows, Secure-String is supported.
    if ($IsWindows -and 'Desktop' -eq $PSEdition) {
        $token = ConvertTo-SecureString -String $OctopusParameters[\"LE_DNSimple_Token\"] -AsPlainText -Force
    \t$dnsimple_args = @{
        \tDSToken = $token
    \t}
    }
    else {
    \t$token = $OctopusParameters[\"LE_DNSimple_Token\"]
    \t$dnsimple_args = @{
        \tDSTokenInsecure = $token
    \t}
    }
       
    try {

        $DnsPlugins = @(\"DNSimple\")
        $DomainList = @($LE_DNSimple_CertificateDomain)
        
        # If domain is a wildcard e.g. *.example-domain.com, check if a SAN has been requested e.g. example-domain.com.
        if ($LE_DNSimple_CertificateDomain -match \"\\*.\" -and $OctopusParameters[\"LE_DNSimple_CreateWildcardSAN\"] -eq $True) {
            $LE_DNSimple_Certificate_SAN = $LE_DNSimple_CertificateDomain.Replace(\"*.\",\"\")
            $DomainList += $LE_DNSimple_Certificate_SAN
            # Include additional DnsPlugin of same type to surpress warning.
            $DnsPlugins += \"DNSimple\"
        }

        $Cert_Params = @{
            Domain = $DomainList
            AcceptTOS = $True;
            Contact = $OctopusParameters[\"LE_DNSimple_ContactEmailAddress\"];
            DnsPlugin = $DnsPlugins;
            PluginArgs = $dnsimple_args;
            PfxPass = $OctopusParameters[\"LE_DNSimple_PfxPassword\"];
            Force = $True;
        }

        return New-PACertificate @Cert_Params
    }
    catch {
        Write-Host \"Failed to Create Certificate. Error Message: $($_.Exception.Message). See Debug output for details.\"
        Write-Debug (Get-WebRequestErrorBody -RequestError $_)
        exit 1
    }
}

function Get-OctopusCertificates {
    Write-Debug \"Entering: Get-OctopusCertificates\"

    $octopus_uri = $OctopusParameters[\"Octopus.Web.ServerUri\"]
    $octopus_space_id = $OctopusParameters[\"Octopus.Space.Id\"]
    $octopus_headers = @{ \"X-Octopus-ApiKey\" = $OctopusParameters[\"LE_DNSimple_Octopus_APIKey\"] }
    $octopus_certificates_uri = \"$octopus_uri/api/$octopus_space_id/certificates?search=$($LE_DNSimple_CertificateDomain)\"

    try {
        # Get a list of certificates that match our domain search criteria.
        $certificates_search = Invoke-WebRequest -Uri $octopus_certificates_uri -Method Get -Headers $octopus_headers -UseBasicParsing -ErrorAction Stop | ConvertFrom-Json | Select-Object -ExpandProperty Items

        # We don't want to confuse Production and Staging Lets Encrypt Certificates.
        $possible_issuers = $LE_DNSimple_Issuers
        if ($OctopusParameters[\"LE_DNSimple_Use_Staging\"] -eq $True) {
            $possible_issuers = $LE_DNSimple_Fake_Issuers
        }

        return $certificates_search | Where-Object {
            $_.SubjectCommonName -eq $LE_DNSimple_CertificateDomain -and
            $possible_issuers -contains $_.IssuerCommonName -and
            $null -eq $_.ReplacedBy -and
            $null -eq $_.Archived
        }
    }
    catch {
        Write-Host \"Could not retrieve certificates from Octopus Deploy. Error: $($_.Exception.Message). See Debug output for details.\"
        Write-Debug (Get-WebRequestErrorBody -RequestError $_)
        exit 1
    }
}

function Publish-OctopusCertificate {
    param (
        [string] $JsonBody
    )

    Write-Debug \"Entering: Publish-OctopusCertificate\"

    if (-not ($JsonBody)) {
        Write-Host \"Existing Certificate is required.\"
        exit 1
    }

    $octopus_uri = $OctopusParameters[\"Octopus.Web.ServerUri\"]
    $octopus_space_id = $OctopusParameters[\"Octopus.Space.Id\"]
    $octopus_headers = @{ \"X-Octopus-ApiKey\" = $OctopusParameters[\"LE_DNSimple_Octopus_APIKey\"] }
    $octopus_certificates_uri = \"$octopus_uri/api/$octopus_space_id/certificates\"

    try {
        Invoke-WebRequest -Uri $octopus_certificates_uri -Method Post -Headers $octopus_headers -Body $JsonBody -UseBasicParsing
        Write-Host \"Published $($LE_DNSimple_CertificateDomain) certificate to the Octopus Deploy Certificate Store.\"
    }
    catch {
        Write-Host \"Failed to publish $($LE_DNSimple_CertificateDomain) certificate. Error: $($_.Exception.Message). See Debug output for details.\"
        Write-Debug (Get-WebRequestErrorBody -RequestError $_)
        exit 1
    }
}

function Update-OctopusCertificate {
    param (
        [string]$Certificate_Id,
        [string]$JsonBody
    )

    Write-Debug \"Entering: Update-OctopusCertificate\"

    if (-not ($Certificate_Id -and $JsonBody)) {
        Write-Host \"Existing Certificate Id and a replace Certificate are required.\"
        exit 1
    }

    $octopus_uri = $OctopusParameters[\"Octopus.Web.ServerUri\"]
    $octopus_space_id = $OctopusParameters[\"Octopus.Space.Id\"]
    $octopus_headers = @{ \"X-Octopus-ApiKey\" = $OctopusParameters[\"LE_DNSimple_Octopus_APIKey\"] }
    $octopus_certificates_uri = \"$octopus_uri/api/$octopus_space_id/certificates/$Certificate_Id/replace\"

    try {
        Invoke-WebRequest -Uri $octopus_certificates_uri -Method Post -Headers $octopus_headers -Body $JsonBody -UseBasicParsing
        Write-Host \"Replaced $($LE_DNSimple_CertificateDomain) certificate in the Octopus Deploy Certificate Store.\"
    }
    catch {
        Write-Error \"Failed to replace $($LE_DNSimple_CertificateDomain) certificate. Error: $($_.Exception.Message)\"
        exit 1
    }
}

function Get-NewCertificatePFXAsJson {
    param (
        $Certificate
    )

    Write-Debug \"Entering: Get-NewCertificatePFXAsJson\"

    if (-not ($Certificate)) {
        Write-Host \"Certificate is required.\"
        Exit 1
    }

    [Byte[]]$certificate_buffer = [System.IO.File]::ReadAllBytes($Certificate.PfxFullChain)
    $certificate_base64 = [convert]::ToBase64String($certificate_buffer)

    $certificate_body = @{
        Name            = \"$LE_DNSimple_CertificateName\";
        Notes           = \"\";
        CertificateData = @{
            HasValue = $true;
            NewValue = $certificate_base64;
        };
        Password        = @{
            HasValue = $true;
            NewValue = $OctopusParameters[\"LE_DNSimple_PfxPassword\"];
        };
    }

    return $certificate_body | ConvertTo-Json
}

function Get-ReplaceCertificatePFXAsJson {
    param (
        $Certificate
    )

    Write-Debug \"Entering: Get-ReplaceCertificatePFXAsJson\"

    if (-not ($Certificate)) {
        Write-Host \"Certificate is required.\"
        Exit 1
    }

    [Byte[]]$certificate_buffer = [System.IO.File]::ReadAllBytes($Certificate.PfxFullChain)
    $certificate_base64 = [convert]::ToBase64String($certificate_buffer)

    $certificate_body = @{
        CertificateData = $certificate_base64;
        Password        = $OctopusParameters[\"LE_DNSimple_PfxPassword\"];
    }

    return $certificate_body | ConvertTo-Json
}

###############################################################################
# DO THE THING | MAIN |
###############################################################################
Write-Debug \"Do the Thing\"

Write-Host \"Checking for existing Lets Encrypt Certificates in the Octopus Deploy Certificates Store.\"
$certificates = Get-OctopusCertificates

# Check for PFX & PEM
if ($certificates) {

    # Handle weird behavior between Powershell 5 and Powershell 6+
    $certificate_count = 1
    if ($certificates.Count -ge 1) {
        $certificate_count = $certificates.Count
    }

    Write-Host \"Found $certificate_count for $($LE_DNSimple_CertificateDomain).\"
    Write-Host \"Checking to see if any expire within $($OctopusParameters[\"LE_DNSimple_ReplaceIfExpiresInDays\"]) days.\"

    # Check Expiry Dates
    $expiring_certificates = $certificates | Where-Object { [DateTime]$_.NotAfter -lt (Get-Date).AddDays($OctopusParameters[\"LE_DNSimple_ReplaceIfExpiresInDays\"]) }

    if ($expiring_certificates) {
        Write-Host \"Found certificates that expire with $($OctopusParameters[\"LE_DNSimple_ReplaceIfExpiresInDays\"]) days. Requesting new certificates for $($LE_DNSimple_CertificateDomain) from Lets Encrypt\"
        $le_certificate = Get-LetsEncryptCertificate

        # PFX
        $existing_certificate = $certificates | Where-Object { $_.CertificateDataFormat -eq \"Pkcs12\" } | Select-Object -First 1
        $certificate_as_json = Get-ReplaceCertificatePFXAsJson -Certificate $le_certificate
        Update-OctopusCertificate -Certificate_Id $existing_certificate.Id -JsonBody $certificate_as_json
    }
    else {
        Write-Host \"Nothing to do here...\"
    }

    exit 0
}

# No existing Certificates - Lets get some new ones.
Write-Host \"No existing certificates found for $($LE_DNSimple_CertificateDomain).\"
Write-Host \"Request New Certificate for $($LE_DNSimple_CertificateDomain) from Lets Encrypt\"

# New Certificate..
$le_certificate = Get-LetsEncryptCertificate

Write-Host \"Publishing: LetsEncrypt - $($LE_DNSimple_CertificateDomain) (PFX)\"
$certificate_as_json = Get-NewCertificatePFXAsJson -Certificate $le_certificate
Publish-OctopusCertificate -JsonBody $certificate_as_json

Write-Host \"GREAT SUCCESS\"
",
        "Octopus.Action.SubstituteInFiles.Enabled": "True"
    },
    "Parameters": [
        {
            "Id": "d0984e44-0783-4ddc-8a57-8008997edb2a",
            "Name": "LE_DNSimple_CertificateDomain",
            "Label": "Certificate Domain",
            "HelpText": "Domain (TLD, CNAME or Wildcard) to create a certificate for. ",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "c68389d4-17e4-491b-a6ce-ee6b09ae1579",
            "Name": "LE_DNSimple_PfxPassword",
            "Label": "PFX Password",
            "HelpText": "Password to use when converting to / from PFX. ",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "Sensitive"
            }
        },
        {
            "Id": "0bce1a67-4981-474d-8b93-873fa3b28712",
            "Name": "LE_DNSimple_ReplaceIfExpiresInDays",
            "Label": "Replace expiring certificate before N days",
            "HelpText": "Replace the certificate if it expiries within N days",
            "DefaultValue": "30",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "f1f25997-9733-4882-a546-ef6c76b7c7f1",
            "Name": "LE_DNSimple_Token",
            "Label": "DNSimple API Token",
            "HelpText": "DNSimple API Token created from your [DNSimple account](https://github.com/rmbolger/Posh-ACME/blob/master/Posh-ACME/DnsPlugins/DNSimple-Readme.md#setup)",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "Sensitive"
            }
        },
        {
            "Id": "1addd2e6-782d-4a1f-bd12-480a9dd964cd",
            "Name": "LE_DNSimple_Octopus_APIKey",
            "Label": "Octopus Deploy API key",
            "HelpText": "A Octopus Deploy API key with access to change Certificates in the Certificate Store. ",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "Sensitive"
            }
        },
        {
            "Id": "ad07684b-93ea-4d65-b2a8-395e3bbfdaf8",
            "Name": "LE_DNSimple_Use_Staging",
            "Label": "Use Lets Encrypt Staging",
            "HelpText": "Should the Certificate be generated using the Lets Encrypt Staging infrastructure?",
            "DefaultValue": "false",
            "DisplaySettings": {
                "Octopus.ControlType": "Checkbox"
            }
        },
        {
            "Id": "9a358e2e-07df-42d1-9f0a-04cbc800dacf",
            "Name": "LE_DNSimple_ContactEmailAddress",
            "Label": "Contact Email Address",
            "HelpText": "Email Address",
            "DefaultValue": "#{Octopus.Deployment.CreatedBy.EmailAddress}",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "3a9e5773-9fbb-4dd4-a9c2-0f66a36b74a2",
            "Name": "LE_DNSimple_Debug_Output",
            "Label": "Debug Output",
            "HelpText": "Tick this to provide debug information in the output",
            "DefaultValue": "false",
            "DisplaySettings": {
                "Octopus.ControlType": "Checkbox"
            }
        },
        {
            "Id": "2dc7d9bc-9eee-4ee0-a33c-ef9371ed69f1",
            "Name": "LE_DNSimple_CreateWildcardSAN",
            "Label": "Create Wildcard SAN",
            "HelpText": "Should the certificate have a Subject Alternative Name (SAN) excluding the wildcard?

e.g. a certificate domain of `*.internal.example-domain.com` could also have a SAN of `internal.example-domain.com`",
            "DefaultValue": "false",
            "DisplaySettings": {
              "Octopus.ControlType": "Checkbox"
            }
        }
    ],
    "LastModifiedAt": "2022-02-07T09:38:11.788Z",  
    "$Meta": {
        "ExportedAt": "2024-06-24T06:57:36.821Z",
        "OctopusVersion": "2024.3.4152",
        "Type": "ActionTemplate"
      },
      "LastModifiedBy": "benjimac93",
    "Category": "lets-encrypt"
}
