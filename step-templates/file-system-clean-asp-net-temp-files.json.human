{
  "Id": "47fa89d0-fffd-4686-978d-4d54d944df55",
  "Name": "File System - Clean ASP.NET Temp Files",
  "Description": "Most ASP.NET websites today make use of dynamic compilation. 
The dynamically compiled assemblies are stored in the Temporary ASP.NET files directory.
However, files in this directory are not automatically removed and may build up over time.
This script will clean out all files in this directory.
You should note that this may cause running websites to be restarted.",
  "ActionType": "Octopus.Script",
  "Version": 9,
  "Properties": {
    "Octopus.Action.Script.ScriptBody": "# Running outside octopus\r
param(\r
\t[string]$frameworkVersion,\r
\t[int]$daysToKeep,\r
\t[switch]$whatIf\r
) \r
\r
$ErrorActionPreference = \"Stop\"\r
\r
function Get-Param($Name, [switch]$Required, $Default) {\r
\t$result = $null\r
\t\r
\tif ($OctopusParameters -ne $null) {\r
\t\t$result = $OctopusParameters[$Name]\r
\t}\r
\r
\tif ($result -eq $null) {\r
\t\t$variable = Get-Variable $Name -EA SilentlyContinue\t\r
\t\tif ($variable -ne $null) {\r
\t\t\t$result = $variable.Value\r
\t\t}\r
\t}\r
\t\r
\tif ($result -eq $null) {\r
\t\tif ($Required) {\r
\t\t\tthrow \"Missing parameter value $Name\"\r
\t\t} else {\r
\t\t\t$result = $Default\r
\t\t}\r
\t}\r
\r
\treturn $result\r
}\r
\r
function RemoveSafely-Item($folder, $Old, [switch]$whatIf) {\r
\t\r
\tif ($folder.LastWriteTime -lt $old) {\r
\t\t\r
\t\ttry {\r
\t\t\tWrite-Host \"Removing: $($folder.FullName)\"\r
\t\t\t$folder | Remove-Item -Recurse -Force -WhatIf:$whatIf -EA Stop\r
\t\t} catch {\r
\t\t\t$message = $_.Exception.Message\r
\t\t\tWrite-Host \"Info: Could not remove $itemName. $message\"\r
\t\t}\r
\t}\r
}\r
\r
& {\r
\tparam(\r
\t\t[string]$frameworkVersion,\r
\t\t[int]$daysToKeep\r
\t) \r
\r
\tWrite-Host \"Cleaning Temporary ASP.NET files directory\"\r
\t\r
\tif ([string]::IsNullOrEmpty($frameworkVersion)) {\r
\t\tthrow \"You need to specify the frameworkVersion parameter\"\r
\t}\r
\t\r
\tWrite-Host \"FrameworkVersion: $frameworkVersion\"\r
\t\r
\t$dotnetPath = [System.Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory() | Split-Path | Split-Path\r
\t$bitnessValues = @(\"Framework\", \"Framework64\")\r
\t$versionStart = \"v\"\r
\t$versionFilter = \"$versionStart\"\r
\t$tempDir = \"Temporary ASP.NET Files\"\r
\t\r
\t$directoriesToClean = @()\r
\t\r
\tif ($frameworkVersion -ne \"All\") {\r
\t\r
\t\t# Starts with v\r
\t\tif ($frameworkVersion.StartsWith($versionStart, \"CurrentCultureIgnoreCase\")) {\r
\t\t\t$versionFilter = $frameworkVersion\r
\t\t\tif ($frameworkVersion -contains \"\\\") {\r
\t\t\t\tthrow \"Framework version cannot contain '\\'\"\r
\t\t\t}\r
\t\t} else {\r
\t\t\r
\t\t\t# Includes one \\\r
\t\t\t$firstSlash = $frameworkVersion.IndexOf(\"\\\")\r
\t\t\t\r
\t\t\t$NotAVersion = -1\r
\t\t\tif ($firstSlash -eq $NotAVersion) {\r
\t\t\t\t$bitnessValues = @($frameworkVersion)\r
\t\t\t} else {\r
\t\t\t\r
\t\t\t\t$secondSlash = $frameworkVersion.IndexOf(\"\\\", $firstSlash)\r
\t\t\t\t\r
\t\t\t\t$NoExtraSlash = -1\r
\t\t\t\tif ($secondSlash -ne $NoExtraSlash) {\r
\t\t\t\t\t\r
\t\t\t\t\t$bitnessValues = @($frameworkVersion | Split-Path)\r
\t\t\t\t\t$versionFilter = @($frameworkVersion | Split-Path -Leaf)\r
\r
\t\t\t\t} else {\r
\t\t\t\t\tthrow \"Includes more than one '\\'\"\r
\t\t\t\t}\r
\t\t\t}\r
\t\t}\r
\t}\r
\t\r
\tif (!$versionFilter.StartsWith($versionStart, \"CurrentCultureIgnoreCase\")) {\r
\t\tthrow \"Version filter must start with '$versionStart'\"\r
\t}\r
\t\r
\tforeach ($bitness in $bitnessValues) {\r
\t\t$fvPath = (Join-Path $dotnetPath $bitness)\r
\t\tif (Test-Path $fvPath) {\r
\t\t\t$directoriesToClean += (ls $fvPath -Filter \"$versionFilter*\")\r
\t\t}\r
\t}\r
\t\r
\tforeach ($dir in $directoriesToClean) {\r
\t\t$fullTempPath = Join-Path $dir.FullName $tempDir\r
\t\t\r
\t\tif (Test-Path $fullTempPath) {\r
\t\t\t$virtualDirectories = ls $fullTempPath\r
\t\t\tforeach ($virtualPathDir in $virtualDirectories) {\r
\t\t\t\t$old = (Get-Date).AddDays(-$daysToKeep)\r
\t\t\t\t\r
\t\t\t\tforeach ($siteDir in (Get-ChildItem $virtualPathDir.FullName)) {\r
\t\t\t\t\tRemoveSafely-Item $siteDir $old -WhatIf:$whatIf\r
\t\t\t\t}\r
\t\t\t}\r
\t\t}\r
\t}\r
\t\r
 } `\r
 (Get-Param 'frameworkVersion' -Required) `\r
 (Get-Param 'daysToKeep' -Default 30) \r
 ",
    "Octopus.Action.Script.Syntax": "PowerShell"
  },
  "SensitiveProperties": {},
  "Parameters": [
    {
      "Name": "FrameworkVersion",
      "Label": "Framework version",
      "HelpText": "This is the framework version to target. 
Specifying `All` will clean out the temp files for each installed version of the framework.
If you need to target a specific version, you can specify either the bit-ness, version or both.

Example values:
`Framework`
`Framework64`
`v4`
`v2.0.50727`
`v2.0.50727`
`Framework\\v4.0.30319`
`Framework64\\v4.0.30319`
`Framework64\\v2`

Specifying a bit-ness value will match all versions.
Specifying only a version will match that version regarless of bit-ness.
A fully specified framework version will match only that value.",
      "DefaultValue": "All",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "DaysToKeep",
      "Label": "Days to keep",
      "HelpText": "Number of days since last write time to keep temporary files.

Note that this is the write time of the top level folder.",
      "DefaultValue": "30",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LastModifiedOn": "2014-08-25T05:12:29.899+00:00",
  "LastModifiedBy": "Lavinski",
  "$Meta": {
    "ExportedAt": "2014-08-25T05:12:40.750+00:00",
    "OctopusVersion": "2.4.0.0",
    "Type": "ActionTemplate"
  },
  "Category": "filesystem"
}
