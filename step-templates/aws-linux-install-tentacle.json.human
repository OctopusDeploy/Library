{
  "Id": "43354ae1-c301-42f8-971d-6e659e4807b3",
  "Name": "AWS Linux - Install Octopus Tentacle",
  "Description": "This step template will install the latest tentacle on an AWS hosted, Linux virtual machine. This will also open the firewall for inbound traffic on port 10933 on the Security Group.
<hr />
*Note: Expects the AWS CLI and Powershell to be installed on the worker running this task*<br />
*Note: Firewall ports will not be opened on the remote machine*</br>
*Note: Target machines must be added to your AWS System Manager (SSM)*",
  "ActionType": "Octopus.AwsRunScript",
  "Version": 3,
  "CommunityActionTemplateId": null,
  "Packages": [],
  "Properties": {
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Azure.AccountId": "#{awsInstallLinuxTentacle.AWSAccount}",
    "Octopus.Action.Script.ScriptBody": "$sgName = $OctopusParameters[\"awsInstallLinuxTentacle.awsSGName\"]
$instanceId = $OctopusParameters[\"awsInstallLinuxTentacle.awsVmInstanceId\"]
$serverUri = $OctopusParameters[\"instrallTentacle.octoServerUrl\"]
$apiKey = $OctopusParameters[\"awsInstallLinuxTentacle.octoApiKey\"]
$rolesRaw = $OctopusParameters[\"awsInstallLinuxTentacle.octopusRoles\"]
$enviroRaw = $OctopusParameters[\"awsInstallLinuxTentacle.octopusEnvironments\"]
$octoThumb = $OctopusParameters[\"awsInstallLinuxTentacle.octoServerThumb\"]
$comStyle = $OctopusParameters[\"awsInstallLinuxTentacle.tentacleType\"]
$hostname = $OctopusParameters[\"awsInstallLinuxTentacle.tentacleHostName\"]
$tentacleName = $OctopusParameters[\"awsInstallLinuxTentacle.tentacleName\"]
$portNumber = $OctopusParameters[\"awsInstallLinuxTentacle.portNumber\"]

Write-Host \"Parsing Parameters\"

if([string]::IsNullOrEmpty($sgName))
{
\tthrow \"Security Group name must be provided\"
}

if([string]::IsNullOrEmpty($instanceId))
{
\tthrow \"Instance Id must be provided\"
}

if([string]::IsNullOrEmpty($apiKey))
{
\tthrow \"apiKey must be provided\"
}

if([string]::IsNullOrEmpty($rolesRaw))
{
\tthrow \"At least one role must be defined\"
}

if([string]::IsNullOrEmpty($enviroRaw))
{
\tthrow \"At least one environment must be defined\"
}

if([string]::IsNullOrEmpty($octoThumb))
{
\tthrow \"octo thumbprint must be provided\"
}

$roles = \"\"
$rolesRaw -split \"`n\" | ForEach-Object { $roles += \"--role $_ \"}
$roles = $roles.TrimEnd(' ')

$environments = \"\"
$enviroRaw -split \"`n\" | ForEach-Object { $environments += \"--env $_ \"}
$environments = $environments.TrimEnd(' ')

if($comStyle -eq \"TentaclePassive\")
{
\tif([string]::IsNullOrEmpty($hostname))
    {
    \t$hostname = aws ec2 describe-instances --filters \"Name=instance-id,Values=$instanceId\" --query \"Reservations[].Instances[].NetworkInterfaces[].Association.PublicIp\" --output=text
        $hostname = $hostname.Trim(\"`n\")
    }
    
    $noListen = \"--port $portNumber --noListen `\"false`\"\"
    $comStyle += \" --publicHostName='$hostname'\"
    $openFirewall = 'true'
}
else
{
\t$noListen = \"--noListen `\"true`\"\"
    $openFirewall = 'false'
}

if([string]::IsNullOrEmpty($tentacleName))
{
\t$tentacleName = $hostname
}

if($openFirewall -eq 'true')
{
\tWrite-Host \"Checking SG...\" -NoNewline
    $sgCheck = aws ec2 describe-security-groups --group-names $sgName --output json --filters Name=ip-permission.from-port,Values=$portNumber Name=ip-permission.cidr,Values='0.0.0.0/0' | convertfrom-json
    
    if($sgCheck.SecurityGroups.count -eq 0)
    {
\t\tWrite-Host \"Creating SG Rule\"
    \taws ec2 authorize-security-group-ingress --group-name $sgName --ip-permissions IpProtocol=tcp,ToPort=$portNumber,FromPort=$portNumber,IpRanges='[{CidrIp=0.0.0.0/0,Description=\"OctopusListeningTentacle\"}]'
\t}
    else
    {
    \tWrite-Host \"Found Existing SG Rule\"
    }
}

Write-Verbose \"hostname: $hostname`nnoListen: $noListen\"

$remoteScript = @\"
{
\t\"commands\": [
    \t\"#!/bin/bash\",
\t\t\"curl -L https://octopus.com/downloads/latest/Linux_x64TarGz/OctopusTentacle -o /tmp/tentacle-linux_x64.tar.gz -fsS\",
\t\t\"if [ ! -d \\\"/opt/octopus\\\" ]; then sudo mkdir /opt/octopus; fi\",
\t\t\"tar xvzf /tmp/tentacle-linux_x64.tar.gz -C /opt/octopus\",
\t\t\"rm /tmp/tentacle-linux_x64.tar.gz\",
\t\t\"cd /opt/octopus/tentacle\",
\t\t\"sudo /opt/octopus/tentacle/Tentacle create-instance --config '/etc/octopus/default/tentacle-default.config'\",
\t\t\"sudo chmod a+rwx /etc/octopus/default/tentacle-default.config\",
\t\t\"/opt/octopus/tentacle/Tentacle new-certificate --if-blank\",
\t\t\"/opt/octopus/tentacle/Tentacle configure --port $portNumber --noListen False --reset-trust --app '/home/Octopus/Applications'\",
\t\t\"/opt/octopus/tentacle/Tentacle configure --trust $octoThumb\",
\t\t\"echo 'Registering the Tentacle $name with server $serverUri in environment $environments with role $roles'\",
\t\t\"/opt/octopus/tentacle/Tentacle register-with --server '$serverUri' --apiKey '$apikey' $environments $roles --comms-style $comStyle --name '$tentacleName' --force\",
\t\t\"sudo /opt/octopus/tentacle/Tentacle service --install --start\"
\t]
}
\"@

Write-Host \"Installing tentacle on remote machine\"
$guid = (new-guid).guid
Set-Content -Value $remoteScript -Path \"$env:Temp/$guid.json\"

write-verbose $remoteScript

write-verbose \"aws ssm send-command --document-name `\"AWS-RunShellScript`\" --instance-ids `\"$instanceId`\" --parameters `\"file://$env:Temp/$guid.json`\"\"
try {
\t$cmdResponse = aws ssm send-command --document-name \"AWS-RunShellScript\" --instance-ids \"$instanceId\" --parameters \"file://$env:Temp/$guid.json\" --query \"Command\" --output json | convertfrom-json
    $cmdId = $cmdResponse.CommandId
    $errorResponse = aws ssm get-command-invocation --command-id \"$cmdId\" --instance-id \"$instanceId\" --output json | convertfrom-json
    
    while($errorResponse.Status -eq 'InProgress')
    {
    \twrite-verbose \"`nStatus: $($errorResponse.Status)\"
    \t$errorResponse = aws ssm get-command-invocation --command-id \"$cmdId\" --instance-id \"$instanceId\" --output json | convertfrom-json
    }
    
    write-verbose \"`nErrorResponse: $errorResponse`n\"
    
    if(![string]::IsNullOrEmpty($errorResponse.StandardErrorContent))
    {
    \tthrow $errorResponse.StandardErrorContent
    }
}
finally {
\tremove-item \"$env:Temp\\$guid.json\"
}
",
    "Octopus.Action.Aws.AssumeRole": "False",
    "Octopus.Action.AwsAccount.UseInstanceRole": "False",
    "Octopus.Action.AwsAccount.Variable": "#{awsInstallLinuxTentacle.AWSAccount}",
    "Octopus.Action.Aws.Region": "#{awsInstallLinuxTentacle.awsRegion}"
  },
  "Parameters": [
    {
      "Id": "dea51842-271f-48fa-901e-243488049f97",
      "Name": "awsInstallLinuxTentacle.AWSAccount",
      "Label": "AWS Account",
      "HelpText": "AWS account with permissions to the virtual machine in which to install the tentacle on",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "AmazonWebServicesAccount"
      }
    },
    {
      "Id": "6a97548c-3b97-4a19-8b9a-45aa58ac62d9",
      "Name": "awsInstallLinuxTentacle.awsRegion",
      "Label": "AWS Region",
      "HelpText": "The name of the aws region. I.E. `us-east-1`",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "d9efb017-65c0-4010-b09f-0a6a34fc009f",
      "Name": "awsInstallLinuxTentacle.awsSGName",
      "Label": "Security Group Name",
      "HelpText": "The name of the AWS security group to create an exception in",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "e4358aec-2798-412a-bcd2-1c7e41a0728d",
      "Name": "awsInstallLinuxTentacle.awsVmInstanceId",
      "Label": "VM Instance ID",
      "HelpText": "The instance ID of the virtual machine to target when ",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "8dbe0a29-4e0f-43f8-8ef2-ae23a2884e85",
      "Name": "awsInstallLinuxTentacle.octoServerThumb",
      "Label": "Server Thumbprint",
      "HelpText": "The Thumbprint of the octopus server",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Id": "a0859551-6c84-45d1-af2b-c57becb4e8ef",
      "Name": "awsInstallLinuxTentacle.octoApiKey",
      "Label": "Octo User API Key",
      "HelpText": "The API key used to configure the tentacle.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Id": "dd07815d-bfb7-43b9-90f8-21ec5a2d2953",
      "Name": "awsInstallLinuxTentacle.octopusRoles",
      "Label": "Roles",
      "HelpText": "Roles to assign to this tentacle installation. <br />
*Note: Each role should be on it's own line*",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "MultiLineText"
      }
    },
    {
      "Id": "d3ffb38e-7fcf-4547-be9a-6cd8e46f8e5e",
      "Name": "awsInstallLinuxTentacle.octopusEnvironments",
      "Label": "Environments",
      "HelpText": "Environments to assign this tentacle installation to.<br />
*Note: Each environment should be on its own line*",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "MultiLineText"
      }
    },
    {
      "Id": "15150827-7bd3-4146-a798-66344851f602",
      "Name": "instrallTentacle.octoServerUrl",
      "Label": "Octo Server Url",
      "HelpText": "The server url to register the tentacle with.  Defaults to the base url",
      "DefaultValue": "#{if Octopus.Web.ServerUri}#{Octopus.Web.ServerUri}#{else}#{Octopus.Web.BaseUrl}#{/if}",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "9bcd6bb5-2db3-453f-b4f6-6a78f3c39b59",
      "Name": "awsInstallLinuxTentacle.tentacleType",
      "Label": "Tentacle Type",
      "HelpText": "Select between a listing or polling tentacle",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "TentaclePassive|Listening
TentacleActive|Polling"
      }
    },
    {
      "Id": "6bb98570-fe3e-4ab7-adfb-79ef7ce5c2ce",
      "Name": "awsInstallLinuxTentacle.tentacleHostName",
      "Label": "Tentacle Host Name",
      "HelpText": "The host name to register the listening tentacles with. Octopus deploy server uses this value to reach out to the vm.<br />
*Note: Leave blank to automatically use assigned public IP address.*",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "386d9f39-9e90-4215-b739-53a1af5bd105",
      "Name": "awsInstallLinuxTentacle.tentacleName",
      "Label": "Tentacle Name",
      "HelpText": "The name of the tentacle to use in the infrastructure area of octopus deploy.  Will use the host name if not provided",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "50621684-c2a5-47c0-9bfe-12f004022e60",
      "Name": "awsInstallLinuxTentacle.portNumber",
      "Label": "Port Number",
      "HelpText": "Port number used when installing and registered tentacle.  This is also the port opened on the firewall",
      "DefaultValue": "10933",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "$Meta": {
    "ExportedAt": "2021-08-23T12:40:10.975Z",
    "OctopusVersion": "2021.1.7687",
    "Type": "ActionTemplate"
  },
  "LastModifiedBy": "benjimac93",
  "Category": "aws"
}
