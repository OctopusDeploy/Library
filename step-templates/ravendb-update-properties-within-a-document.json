{
  "Id": "89806198-6216-4034-a934-6de6a3f445b0",
  "Name": "RavenDB - Update Properties within a Document",
  "Description": "Retrieves the specified document by a Raven Query, updates selected variables with values from octopus Variables. Replaces the current document with the newly created document with the updated values.\n**IMPORTANT**: Any variable that is being updated **MUST** have an Octopus Variable that has exactly the same name (including capitals, any special characters, etc.) prefixed with “Property_”. This is the case of **BOTH** document variables and Metadata variables. I.E. if you wanted TestMode change, you **MUST** have an Octopus Variable named Property_TestMode (same name, and capitals, etc.).\n",
  "ActionType": "Octopus.Script",
  "Version": 50,
  "Properties": {
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptBody": "\r\n#Variables\r\n\r\n#--------------------------------------------------------------------\r\n#RavenDB database variables\r\n\r\n#URL address of RavenDB\r\n$ravenDatabaseURL = $OctopusParameters[\"ravenDatabaseURL\"]\r\n\r\n#Name of the database\r\n$ravenDatabaseName = $OctopusParameters[\"ravenDatabaseName\"]\r\n\r\n#--------------------------------------------------------------------\r\n#RavenDB Query variables\r\n\r\n#Raven Query\r\n#$ravenQuery = $OctopusParameters[\"ravenQuery\"]\r\n\r\n#Name of the settings document\r\n$ravenDocumentName = $OctopusParameters[\"ravenDocumentName\"]\r\n\r\n#--------------------------------------------------------------------\r\n#Setting Variables\r\n\r\n#list of settings variables that are to be changed\r\n$includeSettingList = $OctopusParameters[\"includeSettingList\"]\r\n\r\n#list of settings variables that are NOT to be changed\r\n$excludeSettingList = $OctopusParameters[\"excludeSettingList\"]\r\n\r\n#--------------------------------------------------------------------\r\n#Metadata variables\r\n\r\n#list of metadata variables that are to be changed\r\n$includeMetadataList = $OctopusParameters[\"includeMetadataList\"]\r\n\r\n#list of metadata variables that are NOT to be changed\r\n$excludeMetadataList = $OctopusParameters[\"excludeMetadataList\"]\r\n\r\n\r\n#--------------------------------------------------------------------\r\n#other variables\r\n\r\n$octopusVariableList = $OctopusParameters.GetEnumerator()\r\n\r\n\r\n\r\nWrite-Output \"`n-------------------------`n\"\r\n#--------------------------------------------------------------------\r\n#checks to see if the entered database exists, return a Boolean value depending on the outcome\r\nfunction doesRavenDBExist([string] $databaseChecking, [string]$URL)\r\n{\r\n    #retrieves the list of databases at the specified URL\r\n    $database_list = Invoke-RestMethod -Uri \"$ravenDatabaseURL/databases\" -Method Get\r\n    #checks if the database is at the specified URL\r\n    if ($database_list -contains $databaseChecking.ToString()) \r\n    {\r\n        return $TRUE\r\n    }\r\n    else \r\n    {\r\n        return $FALSE\r\n    }\r\n\r\n    \r\n\r\n}#ends does ravenDB exist function\r\n\r\n\r\nWrite-Output \"`n-------------------------`n\"\r\n#--------------------------------------------------------------------    \r\n#check to see if the database exists\r\n       \r\n\r\nWrite-Output \"Checking if $ravenDatabaseName exists\"\r\n\r\n$database_exists = doesRavenDBExist -databaseChecking $ravenDatabaseName -URL $ravenDatabaseURL\r\n\r\n\r\n#only proceeds if database exists\r\nif ($database_exists -eq $TRUE)\r\n{\r\n    Write-Output \"$ravenDatabaseName exists\"\r\n            \r\n}#ends database exists if statement \r\nelse \r\n{\r\n    Write-Error \"$ravenDatabaseName doesn't exists. `nMake sure the database exists before continuing\" -ErrorId E4\r\n    Exit 1\r\n}\r\n\r\n\r\nWrite-Output \"`n-------------------------`n\"   \r\n         \r\n#--------------------------------------------------------------------\r\n#Get current setings and change them accordingly\r\n\r\n$allSettingsJSON = $null\r\n\r\nWrite-Output \"Getting Document: $ravenDatabaseName\"\r\n\r\n$settingsURI = \"$ravenDatabaseURL/databases/$ravenDatabaseName/docs/$ravenDocumentName\"\r\n\r\n    \r\n\r\ntry {\r\n    #Gets settings from the specific Uri\r\n    $allSettings = Invoke-RestMethod -Uri $settingsURI -Method Get\r\n\r\n} catch {\r\n    if ($_.Exception.Response.StatusCode.Value__ -ne 404) {\r\n  \r\n    $_.Exception\r\n    }\r\n}\r\n\r\n#check to make sure the query return some results\r\nif($allSettings -eq $null)\r\n{\r\n    Write-Error \"An error occurred while querying the database. `nThe query did not return any values. `nPlease enter a new query\" -ErrorId E4\r\n    Exit 1\r\n}\r\n\r\n$includeList = @()\r\n\r\n($includeSettingList.Split(\", \") | ForEach {\r\n    $includeList += $_.ToString()\r\n})\r\n\r\n     \r\nWrite-Output \"Updating the Settings document\"\r\ntry\r\n{\r\n    \r\n\r\n    #changes the values of the included settings within the original settings document to values from Octopus Variables\r\n    for($i = 0; $i -lt $includeList.length; $i++)\r\n    {\r\n        \r\n        \r\n        #checks if the any of the include setting list is in the exclude setting list\r\n        if($excludeSettingList -notcontains $includeList[$i])\r\n        {\r\n            \r\n            \r\n            $octopusVariableList = $OctopusParameters.GetEnumerator()\r\n            \r\n            #loops through the variable list to find the corresponding value to the settings variable\r\n            foreach($varKey in $octopusVariableList)\r\n            {\r\n                \r\n                \r\n                $newSettingVar = $includeList[$i].ToString()\r\n                \r\n                $newSettingVar = \"Property_$newSettingVar\"\r\n                \r\n                #sets the setting variable to the correct variable in octopus\r\n                if($varKey.Key -eq $newSettingVar)\r\n                {\r\n                    \r\n                    \r\n\r\n                    $allSettings.($includeList[$i]) = $varKey.Value \r\n\r\n                }#ends if\r\n\r\n            }#ends for each\r\n\r\n\r\n\r\n        }#ends check if settings in excluded list\r\n\r\n\r\n    }#ends for\r\n}#ends try\r\ncatch\r\n{\r\n    Write-Error \"An error occurred while trying to find the Setting Variables.\" -ErrorId E4\r\n    Exit 1\r\n}\r\n\r\n\r\nWrite-Output \"Update complete\"\r\n\r\nWrite-Output \"`n-----------------------------\"\r\n\r\n#--------------------------------------------------------------------\r\n#set update metadata information\r\n\r\nWrite-Output \"Updating the Metadata of the document\"\r\n\r\n$metadata = @{}\r\n\r\n$metadataList = @()\r\n\r\n($includeMetadataList.Split(\", \") | Foreach {\r\n    $metadataList += $_.ToString()\r\n})\r\n\r\n\r\ntry\r\n{\r\n    for($i = 0; $i -lt $metadataList.length; $i++)\r\n    {\r\n    \r\n        if($excludeMetadataList -notcontains $metadataList[$i])\r\n        {\r\n        \r\n            $octopusVariableList = $OctopusParameters.GetEnumerator()\r\n        \r\n            foreach($varKey in $octopusVariableList)\r\n            {\r\n                \r\n                $newMetadataVar = $metadataList[$i]\r\n                \r\n                $newMetadataVar = \"Property_$newMetadataVar\"\r\n\r\n                if($varKey.Key -eq $newMetadataVar)\r\n                {\r\n                    \r\n                    $temp = $metadataList[$i].ToString()\r\n                    \r\n                    $metadata.Add(\"$temp\", $varKey.Value)\r\n                    \r\n                    \r\n                }\r\n            \r\n            }#ends foreach\r\n\r\n        }#ends if\r\n\r\n    }#Ends for \r\n}#ends try\r\ncatch\r\n{\r\n    Write-Error \"An error occurred while trying to find the Metadata Variables.\" -ErrorId E4\r\n    Exit 1\r\n}\r\n\r\n\r\nWrite-Output \"Metadata update complete\"\r\n\r\n\r\n\r\n#--------------------------------------------------------------------\r\n#converting settings to a JSON document\r\n\r\nWrite-Output \"Converting settings to a JSON document\"\r\n\r\n#Converts allSettings to JSON so it can be added to RavenDB\r\nif ($allSettingsJSON -eq $null) \r\n{\r\n    $allSettingsJSON = ConvertTo-Json -InputObject $allSettings\r\n}\r\n\r\n\r\n\r\nWrite-Output \"`n-------------------------`n\"\r\n\r\n#--------------------------------------------------------------------\r\n#inserting settings document\r\n\r\nWrite-Output \"Restoring Document: $ravenDatabaseName . Inserting the new settings document to the database\"\r\n\r\n#URL to put the JSON document\r\n$putSettingsURI = \"$ravenDatabaseURL/databases/$ravenDatabaseName/docs/$ravenDocumentName\"\r\n\r\n#Puts the settings and metadata in the specified RavenDB\r\ntry\r\n{\r\n\r\n    Invoke-RestMethod -Uri $putSettingsURI -Headers $metadata -Body $allSettingsJSON -Method Put\r\n        \r\n    Write-Output \"New settings have been successfully added to the database\"\r\n}\r\ncatch\r\n{\r\n    Write-Error \"An error occurred while inserting the new settings document to the database\" -ErrorId E4\r\n} \r\n\r\n"
  },
  "SensitiveProperties": {},
  "Parameters": [
    {
      "Name": "ravenDatabaseURL",
      "Label": "URL of the Database",
      "HelpText": "The URL of the database.\n\nFor example: **http://localhost:8080/**",
      "DefaultValue": "http://localhost:8080/",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "ravenDatabaseName",
      "Label": "Name of the Database",
      "HelpText": "Name of the database in Raven",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "ravenDocumentName",
      "Label": "Name of the Document",
      "HelpText": "Name of the document in Raven that the program will retrieve.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "includeSettingList",
      "Label": "List of Included Document Variables",
      "HelpText": "A List of document variables that the program will update based on values within Octopus Variables\n\n**IMPORTANT:** The names of the variables **MUST** be the same (including capitals, special characters, etc.)",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "excludeSettingList",
      "Label": "List of Excluded Document Variables",
      "HelpText": "A list of document variables that the step will exclude from the updated version. \n\nFor example: if TestMode is in both the include and exclude document list, then TestMode will be excluded from the update.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "includeMetadataList",
      "Label": "List of Included Metadata Variables",
      "HelpText": "A List of Metadata variables that the program will update based on values within Octopus Variables\n\n**IMPORTANT:** The names of the variables **MUST** be the same (including capitals, special characters, etc.)",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "excludeMetadataList",
      "Label": "List of Excluded Metadata Variables",
      "HelpText": "A list of Metadata variables that the step will exclude from the updated version. \n\nFor example: if Raven-Entity-Name is in both the include and exclude metadata lists, then Raven-Entity-Name will be excluded from the update.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LastModifiedOn": "2015-11-26T22:39:11.556+00:00",
  "LastModifiedBy": "timhunt303",
  "$Meta": {
    "ExportedAt": "2015-11-26T22:00:53.359+00:00",
    "OctopusVersion": "3.1.7",
    "Type": "ActionTemplate"
  },
  "Category": "ravendb"
}