{
  "Id": "95a35cf6-ce95-4b81-b8de-0892cffca4c4",
  "Name": "Keeper Secrets Manager - Retrieve Secrets",
  "Description": "This step retrieves one or more secrets from a Keeper Vault and creates [sensitive output variables](https://octopus.com/docs/projects/variables/output-variables#sensitive-output-variables) for each value retrieved. These values can be used in other steps in your deployment or runbook process.

You can retrieve secrets using Keeper Notation URIs, and you can choose a custom output variable name for each secret.

---

**Required:** 
- A [Keeper Secrets Manager](https://docs.keeper.io/secrets-manager/) application with permissions to retrieve secrets from the Keeper Vault.
- The `SecretManagement.Keeper.Extension` PowerShell module installed on the target or worker. If the module can't be found, the step will fail. *The `SecretManagement.Keeper` module(s) can be installed from the [PowerShell gallery](https://www.powershellgallery.com/packages/SecretManagement.Keeper)*

Notes:

- Tested on Octopus `2022.4`.
- Tested with both Windows PowerShell and PowerShell Core on Linux.

",
  "ActionType": "Octopus.Script",
  "Version": 2,
  "CommunityActionTemplateId": null,
  "Packages": [],
  "Properties": {
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "OctopusUseBundledTooling": "False",
    "Octopus.Action.Script.ScriptBody": "$ErrorActionPreference = 'Stop'

# Variables
$KsmModuleName = \"SecretManagement.Keeper.Extension\"
$KsmParentModuleName = \"SecretManagement.Keeper\"
$KsmConfig = $OctopusParameters[\"Keeper.SecretsManager.RetrieveSecrets.Config\"]
$VaultSecrets = $OctopusParameters[\"Keeper.SecretsManager.RetrieveSecrets.VaultSecrets\"]
$KsmModuleSpecificVersion = $OctopusParameters[\"Keeper.SecretsManager.RetrieveSecrets.KsmModule.SpecificVersion\"]
$KsmModuleCustomInstallLocation = $OctopusParameters[\"Keeper.SecretsManager.RetrieveSecrets.KsmModule.CustomInstallLocation\"]
$PrintVariableNames = $OctopusParameters[\"Keeper.SecretsManager.RetrieveSecrets.PrintVariableNames\"]

# Validation
if ([string]::IsNullOrWhiteSpace($VaultSecrets)) {
    throw \"Required parameter Keeper.SecretsManager.RetrieveSecrets.VaultSecrets not specified\"
}

if ([string]::IsNullOrWhiteSpace($KsmModuleSpecificVersion) -eq $False) {
    $requiredVersion = [Version]$KdmModuleSpecificVersion
}

# Cross-platform bits
$WindowsPowerShell = $True
if ($PSEdition -eq \"Core\") {
    $WindowsPowerShell = $False
}

### Helper functions
function Get-Module-CrossPlatform {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $true, Position = 0)]
        [string] $Name
    )

    $module = Get-Module -Name $Name -ListAvailable
    if($WindowsPowerShell -eq $True -and $null -eq $module) {
        $module = Get-InstalledModule -Name $Name
    }

    return $module
}

function Load-Module {
    Param(
        [Parameter(Mandatory = $true)][string] $name
    )

    $retVal = $true
    if (!(Get-Module -Name $name)) {
        $isAvailable = Get-Module -ListAvailable | where { $_.Name -eq $name }
        if ($isAvailable) {
            try {
                Import-Module $name -ErrorAction SilentlyContinue
            } catch {
                $retVal = $false
            }
        } else {
            $retVal = $false
        }
    }
    return $retVal
}

$PowerShellModuleName = $KsmModuleName

# Check for Custom install location specified for KsmModule
if ([string]::IsNullOrWhiteSpace($KsmModuleCustomInstallLocation) -eq $false) {
    if ((Test-Path $KsmModuleCustomInstallLocation -IsValid) -eq $false) {
        throw \"The path $KsmModuleCustomInstallLocation is not valid, please use a relative or absolute path.\"
    }
    
    $KsmModulesFolder = [System.IO.Path]::GetFullPath($KsmModuleCustomInstallLocation)
    $LocalModules = (New-Item \"$KsmModulesFolder\" -ItemType Directory -Force).FullName
    $env:PSModulePath = $LocalModules + [System.IO.Path]::PathSeparator + $env:PSModulePath

    # Check to see if there
    if ((Test-Path -Path \"$LocalModules/$KsmModuleName\") -eq $true)
    {
        # Use specific location
        $PowerShellModuleName = \"$LocalModules/$PowerShellModuleName\"
    }
}

# Import module
if([string]::IsNullOrWhiteSpace($KsmModuleSpecificVersion)) {
    Write-Host \"Importing module $PowerShellModuleName ...\"
    if ((Load-Module -Name $PowerShellModuleName) -eq $false) {
        Write-Host \"Extension module not found $PowerShellModuleName - trying to find sub-module in parent $KsmParentModuleName\"
        if (Get-Module -ListAvailable -Name $KsmParentModuleName) {
            $KsmParentModuleDir = Split-Path -Path (Get-Module -ListAvailable -Name $KsmParentModuleName).Path
            $KsmModuleFolder = [System.IO.Path]::GetFullPath($KsmParentModuleDir)
            $LocalModules = (New-Item \"$KsmModuleFolder\" -ItemType Directory -Force).FullName
            $env:PSModulePath = $LocalModules + [System.IO.Path]::PathSeparator + $env:PSModulePath

            if ((Test-Path -Path \"$LocalModules/$KsmModuleName\") -eq $true)
            {
                $PowerShellModuleName = \"$LocalModules/$PowerShellModuleName\"
                try {
                    Import-Module -Name $PowerShellModuleName -ErrorAction SilentlyContinue
                    Write-Host \"Imported sub-module $PowerShellModuleName ...\"
                } catch {
                    Write-Host \"Failed to import sub-module $PowerShellModuleName ...\"
                }
            }
        } else {
            Write-Host \"Module does not exist\"
        }
    }
}
else {
    Write-Host \"Importing module $PowerShellModuleName ($KsmModuleSpecificVersion)...\"
    Import-Module -Name $PowerShellModuleName -RequiredVersion $requiredVersion
}

# Check if SecretManagement.Keeper.Extension Module is installed.
$ksmVaultModule = Get-Module-CrossPlatform -Name $KsmModuleName
if ($null -eq $ksmVaultModule) {
    throw \"Cannot find the '$KsmModuleName' module on the machine. If you think it is installed, try restarting the Tentacle service for it to be detected.\"
}

$Secrets = @()
$VariablesCreated = 0
$StepName = $OctopusParameters[\"Octopus.Step.Name\"]

# Extract lines and split into notations and variables
$index = 0
$usedNames = @()
@(($VaultSecrets -Split \"`n\").Trim()) | ForEach-Object {
    if (![string]::IsNullOrWhiteSpace($_)) {
        Write-Verbose \"Working on: '$_'\"

        # Split 'Notation | VariableName' and generate new var name if needed
        $notation = $_
        $variableName = \"\"
        $n = $_.LastIndexOf(\"|\")
        if ($n -ge 0) {
            if ($n -lt $notation.Length-1) {
                $variableName = $notation.SubString($n+1).Trim()
            }
            $notation = $notation.SubString(0, $n).Trim()
        }
        if ([string]::IsNullOrWhiteSpace($variableName)) {
            do {
                $index++
                $variableName = \"KsmSecret\" + $index
            } while ($usedNames.Contains($variableName))
        }
        # Duplicate var - either overlapping KsmSecretN or another user variable
        if($usedNames.Contains($variableName)) {
            throw \"Duplicate variable name: '$variableName'\"
        }
        $usedNames += $variableName

        if([string]::IsNullOrWhiteSpace($notation)) {
            throw \"Unable to establish notation URI from: '$($_)'\"
        }
        $secret = [PsCustomObject]@{
            Notation         = $notation
            VariableName = $variableName
        }
        $Secrets += $secret
    }
}

Write-Verbose \"Print variables: $PrintVariableNames\"
Write-Verbose \"Secrets to retrieve: $($Secrets.Count)\"
Write-Verbose \"KSM Version specified: $KsmModuleSpecificVersion\"
Write-Verbose \"KSM Custom Install Dir: $KsmModuleCustomInstallLocation\"

# Retrieve Secrets
foreach($secret in $secrets) {
    $notation = $secret.Notation
    $variableName = $secret.VariableName

    $ksmSecretValue = Get-Notation -Notation $notation -Config $KsmConfig

    Set-OctopusVariable -Name $variableName -Value $ksmSecretValue -Sensitive

    if($PrintVariableNames -eq $True) {
        Write-Host \"Created output variable: ##{Octopus.Action[$StepName].Output.$variableName}\"
    }
    $VariablesCreated += 1
}

Write-Host \"Created $variablesCreated output variables\"
"
  },
  "Parameters": [
    {
      "Id": "7daedc7d-7623-47b8-98ba-747290f04372",
      "Name": "Keeper.SecretsManager.RetrieveSecrets.Config",
      "Label": "Keeper Secrets Manager Configuration",
      "HelpText": "Keeper Secrets Manager [configuration](https://docs.keeper.io/secrets-manager/secrets-manager/about/secrets-manager-configuration) for [KSM Application](https://docs.keeper.io/secrets-manager/secrets-manager/quick-start-guide) with permissions to retrieve secrets from the Keeper Vault. To generate KSM Configuration in Web Vault: Secrets Manager - KSM Application Name - Devices - Edit - Add Device, and switch to Method: Configuration File, preferably in Base64 format",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Id": "10df4954-8683-434c-b708-cd25b3b395ff",
      "Name": "Keeper.SecretsManager.RetrieveSecrets.VaultSecrets",
      "Label": "Vault Secrets to retrieve",
      "HelpText": "Use [Secrets Manager Notation URIs](https://docs.keeper.io/secrets-manager/secrets-manager/about/keeper-notation) to specify the Secrets to be returned from Keeper Vault, in the format `SecretsManagerNotation URI | OutputVariableName` where:

- `OutputVariableName` is the _optional_ Octopus [output variable](https://octopus.com/docs/projects/variables/output-variables) name to store the secret's value in. *If this value isn't specified, an output name will be generated dynamically*.

**Note:** Multiple fields can be retrieved by entering each one on a new line.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "MultiLineText"
      }
    },
    {
      "Id": "15bd51e5-72be-4600-85ba-7b4cf1a8e157",
      "Name": "Keeper.SecretsManager.RetrieveSecrets.PrintVariableNames",
      "Label": "Print output variable names",
      "HelpText": "Write out the Octopus [output variable](https://octopus.com/docs/projects/variables/output-variables) names to the task log. Default: `False`.",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "6888b6b2-8916-4f88-9c7a-d811654e5a2b",
      "Name": "Keeper.SecretsManager.RetrieveSecrets.KsmModule.SpecificVersion",
      "Label": "SecretManagement.Keeper.Extension PowerShell Module version (optional)",
      "HelpText": "If you wish to use a specific version of the `SecretManagement.Keeper.Extension` PowerShell module (rather than the default), enter the version number here. e.g. `16.5.0`.

**Note:** The version specified must exist on the machine. Version 16.5.0 is the lowest supported version
",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "0a2b750b-0ad3-48fc-9d68-e133746226a9",
      "Name": "Keeper.SecretsManager.RetrieveSecrets.KsmModule.CustomInstallLocation",
      "Label": "SecretManagement.Keeper.Extension PowerShell Install Location (optional)",
      "HelpText": "If you wish to provide a custom path to the `SecretManagement.Keeper.Extension` PowerShell module (rather than the default), enter the value here.

**Note:** The Module must exist at the specified location on the machine. This step template will not download the Module.
",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LastModifiedBy": "idimov-keeper",
  "LastModifiedAt": "2024-06-12T00:54:34.7240000Z",
  "$Meta": {
    "ExportedAt": "2024-06-12T00:54:34.7240000Z",
    "OctopusVersion": "2022.4.8319",
    "Type": "ActionTemplate"
  },
  "Category": "keeper-secretsmanager"
}
