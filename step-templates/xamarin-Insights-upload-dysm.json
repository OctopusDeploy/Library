{
  "Id": "a1c51946-abd0-434c-99f3-b7a1b5af74c5",
  "Name": "Xamarin Insights dSYM Upload",
  "Description": "Uploads a dSYM symbols file to Xamarin Insights, for more readable exceptions.",
  "ActionType": "Octopus.Script",
  "Version": 0,
  "Properties": {
    "Octopus.Action.Script.ScriptBody": "#####################################\r\n# Xamarin Insights dSYM Upload script\r\n#\r\n# Uploads a dSYM sybmols file to Xamarin insights from a Nuget file\r\n#  extracted in a previous Octopus Deploy step. Allows a variety of parameters.\r\n#\r\n# Uploads to configured application, by API Key.\r\n#\r\n# API Documentation is available at: https://developer.xamarin.com/guides/insights/user-interface/settings/#Uploading_a_dSYM_File\r\n#\r\n# The API key involved is provided in the \"Settings\" for the particular app on the Xamarin Insights portal.\r\n# https://insights.xamarin.com/\r\n# Log in, open the application, and click settings. The general \"settings\" tab has the API Key field.\r\n#\r\n# Example curl request:\r\n# curl -F \"dsym=@YOUR-APPS-DSYM.zip;type=application/zip\" https://xaapi.xamarin.com/api/dsym?apikey=13dd6c82159361ea13ad25a0d9100eb6e228bb17\r\n#\r\n# v0.1 - Initial version, uploads one dSYM file.\r\n# \r\n# The nuget package must contain the *.app.dSYM.zip file.  \r\n#\r\n# The following *.nuspec example will package a release IPA and associated *.app.dSYM.zip file.\r\n#\r\n# The upload script requires a search path (default package root) with exactly one *.app.dSYM.zip file.\r\n# \r\n# Specify package path relative to the nuspec file location\r\n#\r\n# https://docs.nuget.org/create/nuspec-reference#file-element-examples\r\n#\r\n# In some cases the ID, Version, and Description may need manually specified.\r\n#\r\n\r\n<#\r\n\r\n    <?xml version=\"1.0\"?>\r\n    <package>\r\n      <metadata>\r\n        <id>$id$</id>\r\n        <title>$id$</title>\r\n        <version>$version$</version>\r\n        <description>Mobile project packaged for Octopus deploy. $description$</description>\r\n      </metadata>\r\n      <files>\r\n        <!-- Matches mobile package files. Note this will only include the platform being built,\r\n\t         and should match only a single file. -->\r\n        \r\n        <!-- iOS -->\r\n        <file src=\"**/Release/**/*.ipa\" target=\"\" />\r\n\r\n        <!-- Include release dSYM symbols file -->\r\n        <file src=\"**/Release/*.app.dSYM.zip\" target=\"\" />\r\n\r\n      </files>\r\n    </package>\r\n\r\n#>\r\n\r\n#############################\r\n# Debug Parameter Overrides #\r\n#############################\r\n\r\n# These values are set explicitly durring debugging so that the script can\r\n#   be run in the editor.\r\n# For local debugging, uncomment these values and fill in appropriately.\r\n\r\n<#\r\n\r\n# debug folder with app files\r\n$stepPath = \"C:\\Temp\\powershellscript\\\"\r\n\r\n$OctopusParameters = @{\r\n\"InsightsAppSpecificApiToken\" = \"YourApiKeyhere\";\r\n# \"NugetSearchPath\" = \"bin\\iPhone\"; # Additional path information, reatlive to the nuget file root, e.g. release\r\n}\r\n\r\n# #>\r\n\r\n###################################\r\n# Octopus Deploy common functions #\r\n###################################\r\n\r\n# A collection of functions that can be used by script steps to determine where packages installed\r\n# by previous steps are located on the filesystem.\r\n \r\nfunction Find-InstallLocations {\r\n    $result = @()\r\n    $OctopusParameters.Keys | foreach {\r\n        if ($_.EndsWith('].Output.Package.InstallationDirectoryPath')) {\r\n            $result += $OctopusParameters[$_]\r\n        }\r\n    }\r\n    return $result\r\n}\r\n \r\nfunction Find-InstallLocation($stepName) {\r\n    $result = $OctopusParameters.Keys | where {\r\n        $_.Equals(\"Octopus.Action[$stepName].Output.Package.InstallationDirectoryPath\",  [System.StringComparison]::OrdinalIgnoreCase)\r\n    } | select -first 1\r\n \r\n    if ($result) {\r\n        return $OctopusParameters[$result]\r\n    }\r\n \r\n    throw \"No install location found for step: $stepName\"\r\n}\r\n\r\nfunction Find-SingleInstallLocation {\r\n    $all = @(Find-InstallLocations)\r\n    if ($all.Length -eq 1) {\r\n        return $all[0]\r\n    }\r\n    if ($all.Length -eq 0) {\r\n        throw \"No package steps found\"\r\n    }\r\n    throw \"Multiple package steps have run; please specify a single step\"\r\n}\r\n\r\n#####################\r\n# Utility functions #\r\n#####################\r\n\r\nfunction Get-ExactlyOneDsymFileInfo($searchPath)\r\n{\r\n    $symbolFiles = Get-ChildItem -Path $searchPath -Recurse -Filter *.app.dSYM.zip\r\n    \r\n    $fileCount = $symbolFiles.count\r\n\r\n    if($fileCount -ne 1)\r\n    {\r\n        throw \"Did not find exactly one (1) symbols file. Found $fileCount dSYM file(s). Searched under path: $searchPath\"\r\n    }\r\n\r\n    return $symbolFiles\r\n}\r\n\r\n####################\r\n# Basic Parameters #\r\n####################\r\n\r\n$apiToken = $OctopusParameters['InsightsAppSpecificApiToken']\r\n\r\n$octopusFilePathOverride = $OctopusParameters['NugetSearchPath']\r\n\r\n$stepName = $OctopusParameters['MobileAppPackageStepName']\r\n\r\n# set step path, if not already set\r\nIf([string]::IsNullOrEmpty($stepPath))\r\n{\r\n    if (![string]::IsNullOrEmpty($stepName)) {\r\n        Write-Host \"Finding path to package step: $stepName\"\r\n        $stepPath = Find-InstallLocation $stepName\r\n    } else {\r\n        $stepPath = Find-SingleInstallLocation\r\n    }\r\n}\r\n\r\nWrite-Host \"##octopus[stderr-progress]\"\r\n\r\n# if we were not provided a file name, search for a single package file\r\nif([string]::IsNullOrWhiteSpace($octopusFilePathOverride))\r\n{\r\n    $appFileInfo = Get-ExactlyOneDsymFileInfo $stepPath\r\n    $appFullFilePath = $appFileInfo.FullName\r\n}\r\nelse\r\n{\r\n    $searchPathOverride = Join-Path $stepPath $octopusFilePathOverride\r\n    $appFileInfo = Get-ExactlyOneDsymFileInfo $searchPathOverride\r\n    $appFullFilePath = $appFileInfo.FullName\r\n}\r\n\r\n$fileName = [System.IO.Path]::GetFileName($appFullFilePath)\r\n\r\n$apiUploadUri = \"https://xaapi.xamarin.com/api/dsym?apikey=$apiToken\"\r\n\r\n# Request token details\r\n$uniqueBoundaryToken = [Guid]::NewGuid().ToString()\r\n\r\n$contentType = \"multipart/form-data; boundary=$uniqueBoundaryToken\"\r\n\r\n\r\nWrite-Host \"File Location: $appFullFilePath\"\r\n\r\n################################\r\n# Set up Hockey App parameters #\r\n################################\r\n\r\n$formSectionSeparator = @\"\r\n\r\n--$uniqueBoundaryToken\r\n\r\n\"@\r\n\r\n############################\r\n# Prepare request wrappers #\r\n############################\r\n\r\n# Standard for multipart form data\r\n# http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4\r\n\r\n$stringEncoding = [System.Text.Encoding]::ASCII\r\n\r\n# Note the hard-coded \"ipa\" name here is per HockeyApp API documentation\r\n#  and it applies to ALL platform application files.\r\n\r\n$preFileBytes = $stringEncoding.GetBytes(\r\n$formSectionSeparator +\r\n@\"\r\nContent-Disposition: form-data; name=\"dsym\"; filename=\"$fileName\"\r\nContent-Type: application/zip\r\n\r\n\r\n\"@)\r\n\r\n# file bytes will go in between\r\n\r\n$postFileBytes = $stringEncoding.GetBytes(@\"\r\n\r\n--$uniqueBoundaryToken--\r\n\"@)\r\n\r\n######################\r\n# Invoke the request #\r\n######################\r\n\r\n# Note, previous approach was Invoke-RestMethod based. It worked, but was NOT memory\r\n# efficient, leading to high memory usage and \"out of memory\" errors.\r\n\r\n# Based on examples from\r\n# http://stackoverflow.com/questions/566462/upload-files-with-httpwebrequest-multipart-form-data\r\n# and \r\n# https://gist.github.com/nolim1t/271018\r\n\r\n# Uses a dot net WebRequest and streaming to limit memory usage\r\n\r\n$WebRequest = [System.Net.WebRequest]::Create(\"$apiUploadUri\")\r\n\r\n$WebRequest.ContentType = $contentType\r\n$WebRequest.Method = \"POST\"\r\n$WebRequest.KeepAlive = $true;\r\n\r\n$RequestStream = $WebRequest.GetRequestStream()\r\n\r\n# before file bytes\r\n$RequestStream.Write($preFileBytes, 0, $preFileBytes.Length);\r\n\r\n#files bytes\r\n\r\n$fileMode = [System.IO.FileMode]::Open\r\n$fileAccess = [System.IO.FileAccess]::Read\r\n\r\n$fileStream = New-Object IO.FileStream $appFullFilePath,$fileMode,$fileAccess\r\n$bufferSize = 4096 # 4k at a time\r\n$byteBuffer = New-Object Byte[] ($bufferSize)\r\n\r\n# read bytes. While bytes are read...\r\nwhile(($bytesRead = $fileStream.Read($byteBuffer,0,$byteBuffer.Length)) -ne 0)\r\n{\r\n    # write those byes to the request stream\r\n    $RequestStream.Write($byteBuffer, 0, $bytesRead)\r\n}\r\n\r\n$fileStream.Close()\r\n\r\n# after file bytes\r\n$RequestStream.Write($postFileBytes, 0, $postFileBytes.Length);\r\n\r\n$RequestStream.Close()\r\n\r\n$response = $WebRequest.GetResponse();\r\n",
    "Octopus.Action.Script.Syntax": "PowerShell"
  },
  "SensitiveProperties": {},
  "Parameters": [
    {
      "Name": "InsightsAppSpecificApiToken",
      "Label": "Insights Api Token",
      "HelpText": "Your Xamarin API Key for the specific application you are uploading the symbol files to.\n\nVisit:\nhttps://insights.xamarin.com\n\nLog in, browse your application, and click Settings. Your application specific API Token should be visible under \"API Key\".",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "PackageStepName",
      "Label": "Package Step Name",
      "HelpText": "Name of the previously-deployed package step that contains the dSYM symbol file that you want to deploy.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "StepName"
      }
    },
    {
      "Name": "NugetSearchPath",
      "Label": "Nuget Search Path (Optional)",
      "HelpText": "This fully optional search path allows you to look in a specific folder path in your nuget file, such as \"bin\\release\". This may be needed in cases when the nuget file has multiple dSYM files in different locations.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LastModifiedOn": "2016-01-12T21:54:21.496+00:00",
  "LastModifiedBy": "Colin.Dabritz@Viewpoint.com",
  "$Meta": {
    "ExportedAt": "2016-01-12T23:40:54.635+00:00",
    "OctopusVersion": "2.6.4.951",
    "Type": "ActionTemplate"
  },
  "Category": "xamarin"
}