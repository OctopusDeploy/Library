{
  "Id": "d4d7d32d-0aec-4a9e-8455-7f91fcd0d6fb",
  "Name": "SQL - Create SQL User If Not Exists",
  "Description": "Create a SQL Login if the login doesn't already exist without using SMO.",
  "ActionType": "Octopus.Script",
  "Version": 5,
  "Properties": {
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptBody": "Function Test-AzureSQL
{
\t# Define parameters
    param ($SqlConnection)
    
    # Define local variables
    $azureDetected = $false
    
    # Create command object
    $command = $SqlConnection.CreateCommand()

    # Check state
    if ($SqlConnection.State -ne [System.Data.ConnectionState]::Open)
    {
    \t# Open the connection
        $SqlConnection.Open()
    }
    
    # Set command text
    $command.CommandType = [System.Data.CommandType]::Text
    $command.CommandText = \"SELECT SERVERPROPERTY ('edition')\"
    
    # Execute statement
    $reader = $command.ExecuteReader()
    
    # Read results
    while ($reader.Read())
    {
    \t# Get value from field
        $value = $reader.GetValue(0)
        
        # Check to see if it's Azure
        if ($value -like \"*Azure*\")
        {
        \t# It's azure
            $azureDetected = $true
            
            # break
            break
        }
    }
    
    # Check to see if reader is open
    if ($reader.IsClosed -eq $false)
    {
    \t# Close reader object
        $reader.Close()
    }
    
    # Not found
    return $azureDetected
}

if ([string]::IsNullOrWhiteSpace($createSqlLoginUserWhoHasCreateUserRights) -eq $true){
\tWrite-Host \"No username found, using integrated security\" 
    $connectionString = \"Server=$createSqlServer;Database=master;integrated security=true;\"
}
else {
\tWrite-Host \"Username found, using SQL Authentication\"
    $connectionString = \"Server=$createSqlServer;Database=master;User ID=$createSqlLoginUserWhoHasCreateUserRights;Password=$createSqlLoginPasswordWhoHasRights;\"
}

$sqlConnection = New-Object System.Data.SqlClient.SqlConnection
$sqlConnection.ConnectionString = $connectionString

$command = $sqlConnection.CreateCommand()
$command.CommandType = [System.Data.CommandType]'Text'

Write-Host \"Opening the connection to $createSqlServer\"
$sqlConnection.Open()

$isAzureSQL = Test-AzureSQL -SqlConnection $sqlConnection

$escapedLogin = $createSqlLogin.Replace(\"'\", \"''\")
Write-Host \"Running the if not exists then create user command on the server for $escapedLogin\"

if ([string]::IsNullOrWhiteSpace($createSqlPassword) -eq $true) {
\tWrite-Host \"The password sent in was empty, creating account as domain login\"
    $command.CommandText = \"IF NOT EXISTS(SELECT 1 FROM sys.server_principals WHERE name = '$escapedLogin')
\tCREATE LOGIN [$createSqlLogin] FROM WINDOWS\"
    
    if ($isAzureSQL -eq $false)
    {
        $command.CommandText += \" with default_database=[$createSqlDefaultDatabase]\"
    }
    
}
else {
\tWrite-Host \"A password was sent in, creating account as SQL Login\"
\t$escapedPassword = $createSqlPassword.Replace(\"'\", \"''\")
\t$command.CommandText = \"IF NOT EXISTS(SELECT 1 FROM sys.sql_logins WHERE name = '$escapedLogin')
\tCREATE LOGIN [$createSqlLogin] with Password='$escapedPassword'\"  

    if ($isAzureSQL -eq $false)
    {
        $command.CommandText += \", default_database=[$createSqlDefaultDatabase]\"
    }
}


$command.ExecuteNonQuery()

Write-Host \"Successfully created the account $createSqlLogin\"
Write-Host \"Closing the connection to $createSqlServer\"
$sqlConnection.Close()"
  },
  "Parameters": [
    {
      "Id": "95996aae-c3ec-4d6f-ac24-486d33513620",
      "Name": "createSqlServer",
      "Label": "SQL Server",
      "HelpText": "The SQL Server to perform the action on",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "443c9e33-4f94-4141-bae8-24eec4f133d2",
      "Name": "createSqlLoginUserWhoHasCreateUserRights",
      "Label": "SQL Login",
      "HelpText": "The user who has permissions to create the user

Leave blank for integrated security",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "0bf48c89-31a2-4462-9be3-3f80e816f0de",
      "Name": "createSqlLoginPasswordWhoHasRights",
      "Label": "SQL Password",
      "HelpText": "The password of the user who has permissions to create SQL Logins

Leave blank for integrated security",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Id": "3f9a4254-db16-4aa5-9ab9-bb8e369ee69e",
      "Name": "createSqlLogin",
      "Label": "Username to create",
      "HelpText": "The SQL Login name that will be created",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "b73a9fb0-1b09-473c-956b-07198e5028cc",
      "Name": "createSqlPassword",
      "Label": "Password",
      "HelpText": "The password of the user being created.  Leave this blank if you want to use windows authentication.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Id": "f9746a86-33b5-49b2-9bb2-d528585e9759",
      "Name": "createSqlDefaultDatabase",
      "Label": "Default Database",
      "HelpText": "The default database for the user",
      "DefaultValue": "master",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LastModifiedOn": "2021-02-12T17:21:40.762Z",
  "LastModifiedBy": "twerthi",
  "$Meta": {
    "ExportedAt": "2021-02-12T17:21:40.762Z",
    "OctopusVersion": "2020.5.7",
    "Type": "ActionTemplate"
  },
  "Category": "sql"
}
