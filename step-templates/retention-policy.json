{
  "Id": "46705230-c116-41c6-ba4b-b58d43f4f0e1",
  "Name": "Retention Policy",
  "Description": "Applies retention policy for built-in package repository by specified package id. Useful when you are using variables in PackageId parameter of deploy package step and built-in retention policy for package repository is not deleting packages.",
  "ActionType": "Octopus.Script",
  "Version": 15,
  "Properties": {
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptBody": "Function Get-Parameter($Name, [switch]$Required, $Default, [switch]$FailOnValidate) {\n    $result = $null\n    $errMessage = [string]::Empty\n\n    If ($OctopusParameters -ne $null) {\n        $octopusParameterName = (\"Retention.\" + $Name)\n        $result = $OctopusParameters[$octopusParameterName]\n        Write-Host \"Octopus paramter value for $octopusParameterName : $result\"\n    }\n\n    If ($result -eq $null) {\n        $variable = Get-Variable $Name -EA SilentlyContinue\n        if ($variable -ne $null) {\n            $result = $variable.Value\n        }\n    }\n\n    If ($result -eq $null) {\n        If ($Required) {\n            $errMessage = \"Missing parameter value $Name\"\n        } Else {\n            $result = $Default\n        }\n    } \n\n    If (-Not [string]::IsNullOrEmpty($errMessage)) {\n        If ($FailOnValidate) {\n            Throw $errMessage\n        } Else {\n            Write-Warning $errMessage\n        }\n    }\n\n    return $result\n}\n\nFunction Validate-Parameters([switch]$FailOnValidate) {\n    $errMessage = [string]::Empty\n\n    If ($retentionCriteria.ToLower() -eq \"days\") {\n        If ($retentionValue -lt 3) {\n            $errMessage = \"Retention Value not specified or must be greater than 3 days!\"\n        }\n    } ElseIf ($retentionCriteria.ToLower() -eq \"number\") {\n        If ($retentionValue -lt 10) {\n            $errMessage = \"Retention Value not specified or must be greater than 9 packages!\"\n        }\n    } Else {\n        $errMessage = \"Retention Criteria must be 'days' or 'number'!\"\n    }\n    \n    If ([string]::IsNullOrEmpty($errMessage)) {\n       return $true;\n    } Else {\n        If ($FailOnValidate) {\n            Throw $errMessage\n        } Else {\n            Write-Warning $errMessage\n            return $false;\n        }\n    }\n}\n\n& {\n    Write-Host \"Start RetentionPolicy\"\n\n    $retentionFailOnValidate = [System.Convert]::ToBoolean([string](Get-Parameter \"FailOnValidate\" $false \"False\" $false))\n    $packagesRootDirectoryPath = [string] (Get-Parameter \"PackagesRootDirectory\" $true [string]::Empty $retentionFailOnValidate)\n    $retentionCriteria = [string] (Get-Parameter \"Criteria\" $true \"days\" $retentionFailOnValidate)\n    $retentionValue = [int] (Get-Parameter \"Value\" $true 30 $retentionFailOnValidate)\n    $retentionPackageId = [string] (Get-Parameter \"PackageId\" $true [string]::Empty $retentionFailOnValidate)\n\n    If ((Validate-Parameters $retentionFailOnValidate)) {\n\n        # Filter out package folders by name if parameter specified\n        $packageDirectories = Get-ChildItem $packagesRootDirectoryPath | ?{ $_.PSIsContainer } | ?{ $_.Name -eq $retentionPackageId }\n\n        If ($packageDirectories.Length -le 0) {\n            Write-Warning \"No package directories found!\"\n        } Else {\n            ForEach ($packageDirectory in $packageDirectories) {\n                $packageFiles = Get-ChildItem $packageDirectory.FullName\n                If ($packageFiles.Length -gt 0) {\n                    Write-Host (\"Package files found in directory: \" + $packageDirectory.FullName + \" - \" + $packageFiles.Length)\n                    $packageFilesObsolete = @()\n\n                    If ($retentionCriteria -eq \"days\") {\n                        $packageFilesObsolete = $packageFiles | ?{ $_.LastWriteTime -le ((Get-Date).AddDays($retentionValue * -1)) }\n                    } ElseIf ($retentionCriteria -eq \"number\") {\n                        $filesToDelete = ($packageFiles.Length - $retentionValue)\n                        If ($filesToDelete -gt 0) {\n                            $packageFilesObsolete = $packageFiles | Sort-Object LastWriteTime | Select-Object -First $filesToDelete\n                        }\n                    }\n\n                    If ($packageFilesObsolete.Length -gt 0) {\n                        Write-Host (\"Applying retention policy for \" + $packageFilesObsolete.Length + \" obsolete files in directory: \" + $packageDirectory.FullName)\n                        ForEach ($packageVersionFileObsolete in $packageFilesObsolete) {\n                            Remove-Item -Path $packageVersionFileObsolete.FullName -Force -Recurse\n                        }\n                    } Else {\n                        Write-Host (\"No package files deleted, all files match policy rules!\")\n                    }\n                } Else {\n                    Write-Host (\"No files found, removing empty directory: \" + $packageDirectory.FullName)\n                    Remove-Item -Path $packageDirectory.FullName -Force -Recurse\n                }\n            }\n        }\n    } ElseIf ($retentionFailOnValidate -eq $true) {\n        throw \"Missing or invalid parameter values!\"\n    }\n\n    Write-Host \"End RetentionPolicy\"\n}\n\n",
    "Octopus.Action.Script.ScriptFileName": null,
    "Octopus.Action.Package.NuGetFeedId": null,
    "Octopus.Action.Package.NuGetPackageId": null
  },
  "Parameters": [
    {
      "Name": "Retention.PackagesRootDirectory",
      "Label": "Packages root directory",
      "HelpText": "Packages directory path on Octopus server (e.g. D:\\Octopus\\Packages).",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "Retention.Criteria",
      "Label": "Criteria",
      "HelpText": "Criteria by which to apply retention policy - days or number of packages.",
      "DefaultValue": "days",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "days|Days\nnumber|Number of packages"
      }
    },
    {
      "Name": "Retention.Value",
      "Label": "Value",
      "HelpText": "Value for selected criteria.\nMin value for days criteria - 3.\nMin value for number criteria - 10.",
      "DefaultValue": "30",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "Retention.PackageId",
      "Label": "Package Id",
      "HelpText": null,
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "Retention.FailOnValidate",
      "Label": "Fail on validate",
      "HelpText": "If true throws exception when parameter validation fails. If false just outputs warning messages to deployment log and doesn't fail whole deployment.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    }
  ],
  "LastModifiedBy": "sarbis",
  "$Meta": {
    "ExportedAt": "2016-08-27T20:53:13.764+00:00",
    "OctopusVersion": "3.3.16",
    "Type": "ActionTemplate"
  },
  "Category": "octopus"
}