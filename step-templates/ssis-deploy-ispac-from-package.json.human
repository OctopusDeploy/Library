{
  "Id": "bf005449-60c2-4746-8e07-8ba857f93605",
  "Name": "Deploy ispac SSIS project from a package",
  "Description": "This step template will deploy SSIS ispac projects to SQL Server Integration Services Catalog",
  "ActionType": "Octopus.Script",
  "Version": 15,
  "CommunityActionTemplateId": null,
  "Properties": {
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptBody": "#region Functions

#region Get-Catalog
Function Get-Catalog
{
     # define parameters
    Param ($CatalogName)
    # NOTE: using $integrationServices variable defined in main
    
    # define working varaibles
    $Catalog = $null
    # check to see if there are any catalogs
    if($integrationServices.Catalogs.Count -gt 0 -and $integrationServices.Catalogs[$CatalogName])
    {
    \t# get reference to catalog
    \t$Catalog = $integrationServices.Catalogs[$CatalogName]
    }
    else
    {
    \tif((Get-CLREnabled) -eq 0)
    \t{
    \t\tif(-not $EnableCLR)
    \t\t{
    \t\t\t# throw error
    \t\t\tthrow \"SQL CLR is not enabled.\"
    \t\t}
    \t\telse
    \t\t{
    \t\t\t# display sql clr isn't enabled
    \t\t\tWrite-Warning \"SQL CLR is not enabled on $($sqlConnection.DataSource).  This feature must be enabled for SSIS catalogs.\"
    
    \t\t\t# enablign SQLCLR
    \t\t\tWrite-Host \"Enabling SQL CLR ...\"
    \t\t\tEnable-SQLCLR
    \t\t\tWrite-Host \"SQL CLR enabled\"
    \t\t}
    \t}
    
    \t# Provision a new SSIS Catalog
    \tWrite-Host \"Creating SSIS Catalog ...\"
    
    \t$Catalog = New-Object \"$ISNamespace.Catalog\" ($integrationServices, $CatalogName, $CatalogPwd)
    \t$Catalog.Create()
    
    
    }
    
    # return the catalog
    return $Catalog
}
#endregion

#region Get-CLREnabled
Function Get-CLREnabled
{
    # define parameters
    # Not using any parameters, but am using $sqlConnection defined in main
    
    # define working variables
    $Query = \"SELECT * FROM sys.configurations WHERE name = 'clr enabled'\"
    
    # execute script
    $CLREnabled = Invoke-Sqlcmd -ServerInstance $sqlConnection.DataSource -Database \"master\" -Query $Query | Select value
    
    # return value
    return $CLREnabled.Value
}
#endregion

#region Enable-SQLCLR
Function Enable-SQLCLR
{
    $QueryArray = \"sp_configure 'show advanced options', 1\", \"RECONFIGURE\", \"sp_configure 'clr enabled', 1\", \"RECONFIGURE \"
    # execute script
    
    foreach($Query in $QueryArray)
    {
    \tInvoke-Sqlcmd -ServerInstance $sqlConnection.DataSource -Database \"master\" -Query $Query
    }
    
    # check that it's enabled
    if((Get-CLREnabled) -ne 1)
    {
    \t# throw error
    \tthrow \"Failed to enable SQL CLR\"
    }
}
#endregion

#region Get-Folder
Function Get-Folder
{
 # parameters
    Param($FolderName, $Catalog)
    
    $Folder = $null
    # try to get reference to folder
    
    if(!($Catalog.Folders -eq $null))
    {
    \t$Folder = $Catalog.Folders[$FolderName]
    }
    
    # check to see if $Folder has a value
    if($Folder -eq $null)
    {
    \t# display
    \tWrite-Host \"Folder $FolderName doesn't exist, creating folder...\"
    
    \t# create the folder
    \t$Folder = New-Object \"$ISNamespace.CatalogFolder\" ($Catalog, $FolderName, $FolderName) 
    \t$Folder.Create() 
    }
    
    # return the folde reference
    return $Folder
}
#endregion

#region Get-Environment
Function Get-Environment
{
     # define parameters
    Param($Folder, $EnvironmentName)
    
    $Environment = $null
    # get reference to Environment
    if(!($Folder.Environments -eq $null) -and $Folder.Environments.Count -gt 0)
    {
    \t$Environment = $Folder.Environments[$EnvironmentName]
    }
    
    # check to see if it's a null reference
    if($Environment -eq $null)
    {
    \t# display
    \tWrite-Host \"Environment $EnvironmentName doesn't exist, creating environment...\"
    
    \t# create environment
    \t$Environment = New-Object \"$ISNamespace.EnvironmentInfo\" ($Folder, $EnvironmentName, $EnvironmentName)
    \t$Environment.Create() 
    }
    
    # return the environment
    return $Environment
}
#endregion

#region Set-EnvironmentReference
Function Set-EnvironmentReference
{
     # define parameters
    Param($Project, $Environment, $Folder)
    
    # get reference
    $Reference = $null
    
    if(!($Project.References -eq $null))
    {
    \t$Reference = $Project.References[$Environment.Name, $Folder.Name]
    
    }
    
    # check to see if it's a null reference
    if($Reference -eq $null)
    {
    \t# display
    \tWrite-Host \"Project does not reference environment $($Environment.Name), creating reference...\"
    
    \t# create reference
    \t$Project.References.Add($Environment.Name, $Folder.Name)
    \t$Project.Alter() 
    }
}
#endregion

#region Set-ProjectParametersToEnvironmentVariablesReference
Function Set-ProjectParametersToEnvironmentVariablesReference
{
     # define parameters
    Param($Project, $Environment)
    
    $UpsertedVariables = @()

    if($Project.Parameters -eq $null)
    {
        Write-Host \"No project parameters exist\"
        return
    }

    # loop through project parameters
    foreach($Parameter in $Project.Parameters)
    {
        # skip if the parameter is included in custom filters
        if ($UseCustomFilter) 
        {
            if ($Parameter.Name -match $CustomFilter)
            {
                Write-Host \"- $($Parameter.Name) skipped due to CustomFilters.\"            
                continue
            }
        }

        # Add variable to list of variable
        $UpsertedVariables += $Parameter.Name

        $Variable = $null
        if(!($Environment.Variables -eq $null))
        {
    \t    # get reference to variable
    \t    $Variable = $Environment.Variables[$Parameter.Name]
        }
    
    \t# check to see if variable exists
    \tif($Variable -eq $null)
    \t{
    \t\t# add the environment variable
    \t\tAdd-EnvironmentVariable -Environment $Environment -Parameter $Parameter -ParameterName $Parameter.Name
    
    \t\t# get reference to the newly created variable
    \t\t$Variable = $Environment.Variables[$Parameter.Name]
    \t}
    
    \t# set the environment variable value
    \tSet-EnvironmentVariableValue -Variable $Variable -Parameter $Parameter -ParameterName $Parameter.Name
    }
    
    # alter the environment
    $Environment.Alter()
    $Project.Alter()

    return $UpsertedVariables
}
#endregion

Function Set-PackageVariablesToEnvironmentVariablesReference
{
    # define parameters
    Param($Project, $Environment)

    $Variables = @()
    $UpsertedVariables = @()

    # loop through packages in project in order to store a temp collection of variables
    foreach($Package in $Project.Packages)
    {
    \t# loop through parameters of package
    \tforeach($Parameter in $Package.Parameters)
    \t{
    \t\t# add to the temporary variable collection
    \t\t$Variables += $Parameter.Name
    \t}
    }

    # loop through packages in project
    foreach($Package in $Project.Packages)
    {
    \t# loop through parameters of package
    \tforeach($Parameter in $Package.Parameters)
    \t{
            if ($UseFullyQualifiedVariableNames)
            {
                # Set fully qualified variable name
                $ParameterName = $Parameter.ObjectName.Replace(\".dtsx\", \"\")+\".\"+$Parameter.Name
            }
            else
            {
                # check if exists a variable with the same name
                $VariableNameOccurrences = $($Variables | Where-Object { $_ -eq $Parameter.Name }).count
                $ParameterName = $Parameter.Name
                
                if ($VariableNameOccurrences -gt 1)
                {
                    $ParameterName = $Parameter.ObjectName.Replace(\".dtsx\", \"\")+\".\"+$Parameter.Name
                }
            }
            
            if ($UseCustomFilter)
            {
                if ($ParameterName -match $CustomFilter)
                {
                    Write-Host \"- $($Parameter.Name) skipped due to CustomFilters.\"            
                    continue
                }
            }

            # get reference to variable
    \t\t$Variable = $Environment.Variables[$ParameterName]

            # Add variable to list of variable
            $UpsertedVariables += $ParameterName

            # check to see if the parameter exists
    \t\tif(!$Variable)
    \t\t{
    \t\t\t# add the environment variable
    \t\t\tAdd-EnvironmentVariable -Environment $Environment -Parameter $Parameter -ParameterName $ParameterName
    
    \t\t\t# get reference to the newly created variable
    \t\t\t$Variable = $Environment.Variables[$ParameterName]
    \t\t}
    
    \t\t# set the environment variable value
    \t\tSet-EnvironmentVariableValue -Variable $Variable -Parameter $Parameter -ParameterName $ParameterName
    \t}
    
    \t# alter the package
    \t$Package.Alter()
    }
    
    # alter the environment
    $Environment.Alter()

    return $UpsertedVariables
}

Function Sync-EnvironmentVariables
{
    # define parameters
    Param($Environment, $VariablesToPreserveInEnvironment)

    foreach($VariableToEvaluate in $Environment.Variables)
    {
        if ($VariablesToPreserveInEnvironment -notcontains $VariableToEvaluate.Name)
        {
            Write-Host \"- Removing environment variable: $($VariableToEvaluate.Name)\"
            $VariableToRemove = $Environment.Variables[$VariableToEvaluate.Name]
            $Environment.Variables.Remove($VariableToRemove) | Out-Null
        }
    }

    # alter the environment
    $Environment.Alter()
}

#region Add-EnvironmentVariable
Function Add-EnvironmentVariable
{
    # define parameters
    Param($Environment, $Parameter, $ParameterName)
    
    # display 
    Write-Host \"- Adding environment variable $($ParameterName)\"
    
    # check to see if design default value is emtpy or null
    if([string]::IsNullOrEmpty($Parameter.DesignDefaultValue))
    {
    \t# give it something
    \t$DefaultValue = \"\" # sensitive variables will not return anything so when trying to use the property of $Parameter.DesignDefaultValue, the Alter method will fail.
    }
    else
    {
    \t# take the design
    \t$DefaultValue = $Parameter.DesignDefaultValue
    }
    
    # add variable with an initial value
    $Environment.Variables.Add($ParameterName, $Parameter.DataType, $DefaultValue, $Parameter.Sensitive, $Parameter.Description)
}
#endregion

#region Set-EnvironmentVariableValue
Function Set-EnvironmentVariableValue
{
     # define parameters
    Param($Variable, $Parameter, $ParameterName)

    # check to make sure variable value is available
    if($OctopusParameters -and $OctopusParameters.ContainsKey($ParameterName))
    {
        # display 
        Write-Host \"- Updating environment variable $($ParameterName)\"

    \t# set the variable value
    \t$Variable.Value = $OctopusParameters[\"$($ParameterName)\"]
    }
    else
    {
    \t# warning
    \tWrite-Host \"**- OctopusParameters collection is empty or $($ParameterName) not in the collection -**\"
    }
    
    # Set reference
    $Parameter.Set([Microsoft.SqlServer.Management.IntegrationServices.ParameterInfo+ParameterValueType]::Referenced, \"$($ParameterName)\")
}
#endregion


#endregion

#region Dependent assemblies

# Load the IntegrationServices Assembly
[Reflection.Assembly]::LoadWithPartialName(\"Microsoft.SqlServer.Management.IntegrationServices\") | Out-Null # Out-Null supresses a message that would normally be displayed saying it loaded out of GAC

# Store the IntegrationServices Assembly namespace to avoid typing it every time
$ISNamespace = \"Microsoft.SqlServer.Management.IntegrationServices\"

#endregion

#region Main
try
{
\t# ensure all boolean variables are true booleans
    $EnableCLR = [System.Convert]::ToBoolean(\"$EnableCLR\")
    $UseEnvironment = [System.Convert]::ToBoolean(\"$UseEnvironment\")
    $ReferenceProjectParametersToEnvironmentVairables = [System.Convert]::ToBoolean(\"$ReferenceProjectParametersToEnvironmentVairables\")
    Write-Host \"Value is $ReferencePackageParametersToEnvironmentVairables\"
    $ReferencePackageParametersToEnvironmentVairables = [System.Convert]::ToBoolean(\"$ReferencePackageParametersToEnvironmentVairables\")
    $UseFullyQualifiedVariableNames = [System.Convert]::ToBoolean(\"$UseFullyQualifiedVariableNames\")
    $SyncEnvironment = [System.Convert]::ToBoolean(\"$SyncEnvironment\")
    # custom names for filtering out the excluded variables by design
    $UseCustomFilter = [System.Convert]::ToBoolean(\"$UseCustomFilter\")
    $CustomFilter = [System.Convert]::ToString(\"$CustomFilter\")
    # list of variables names to keep in target environment
    $VariablesToPreserveInEnvironment = @()
        
    # Get file path where Octopus deployed it
    $DeployedPath = $OctopusParameters[\"Octopus.Action[$NugetPackageStepName].Output.Package.InstallationDirectoryPath\"]

    
    # display the path where it's referencing
    Write-Host \"Package deployed to $DeployedPath\"

\t# Get all .ispac files from the deployed path
\t$IsPacFiles = Get-ChildItem -Recurse -Path $DeployedPath | Where {$_.Extension.ToLower() -eq \".ispac\"}

\t# display number of files
\tWrite-Host \"$($IsPacFiles.Count) .ispac file(s) found.\"

\tWrite-Host \"Connecting to server ...\"

\t# Create a connection to the server
    $sqlConnectionString = \"Data Source=$ServerName;Initial Catalog=master;Integrated Security=SSPI;\"
    $sqlConnection = New-Object System.Data.SqlClient.SqlConnection $sqlConnectionString

\t# create integration services object
\t$integrationServices = New-Object \"$ISNamespace.IntegrationServices\" $sqlConnection

\t# get reference to the catalog
\tWrite-Host \"Getting reference to catalog $CataLogName\"
\t$Catalog = Get-Catalog -CatalogName $CataLogName

\t# get folder reference
\t$Folder = Get-Folder -FolderName $FolderName -Catalog $Catalog

\t# loop through ispac files
\tforeach($IsPacFile in $IsPacFiles)
\t{
\t\t# read project file
\t\t$ProjectFile = [System.IO.File]::ReadAllBytes($IsPacFile.FullName)

\t\t# deploy project
\t\tWrite-Host \"Deploying project $($IsPacFile.Name)...\"
\t\t$Folder.DeployProject($ProjectName, $ProjectFile) | Out-Null

\t\t# get reference to deployed project
\t\t$Project = $Folder.Projects[$ProjectName]

\t\t# check to see if they want to use environments
\t\tif($UseEnvironment)
\t\t{
\t\t\t# get environment reference
\t\t\t$Environment = Get-Environment -Folder $Folder -EnvironmentName $EnvironmentName

\t\t\t# set environment reference
\t\t\tSet-EnvironmentReference -Project $Project -Environment $Environment -Folder $Folder

\t\t\t# check to see if the user wants to convert project parameters to environment variables
\t\t\tif($ReferenceProjectParametersToEnvironmentVairables)
\t\t\t{
\t\t\t\t# set environment variables
\t\t\t\tWrite-Host \"Referencing Project Parameters to Environment Variables...\"
\t\t\t\t$VariablesToPreserveInEnvironment += Set-ProjectParametersToEnvironmentVariablesReference -Project $Project -Environment $Environment
\t\t\t}

\t\t\t# check to see if the user wants to convert the package parameters to environment variables
\t\t\tif($ReferencePackageParametersToEnvironmentVairables)
\t\t\t{
\t\t\t\t# set package variables
\t\t\t\tWrite-Host \"Referencing Package Parameters to Environment Variables...\"
\t\t\t\t$VariablesToPreserveInEnvironment += Set-PackageVariablesToEnvironmentVariablesReference -Project $Project -Environment $Environment
\t\t\t}
            
            # Removes all unused variables from the environment
            if ($SyncEnvironment)
            {
                Write-Host \"Sync package environment variables...\"
                Sync-EnvironmentVariables -Environment $Environment -VariablesToPreserveInEnvironment $VariablesToPreserveInEnvironment
            }
\t\t}
\t}
}

finally
{
\t# check to make sure sqlconnection isn't null
\tif($sqlConnection)
\t{
\t\t# check state of sqlconnection
\t\tif($sqlConnection.State -eq [System.Data.ConnectionState]::Open)
\t\t{
\t\t\t# close the connection
\t\t\t$sqlConnection.Close()
\t\t}

\t\t# cleanup
\t\t$sqlConnection.Dispose()
\t}
}
#endregion
",
    "Octopus.Action.Script.ScriptSource": "Inline"
  },
  "Parameters": [
    {
      "Id": "da92ad6a-23ac-4f24-b243-b42507737422",
      "Name": "ServerName",
      "Label": "Database server name (\\instance)",
      "HelpText": "Name of the SQL Server you are deploying to.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "a3e3e7e5-aa53-429c-b63b-166ddc875e45",
      "Name": "EnableCLR",
      "Label": "Enable SQL CLR",
      "HelpText": "This will reconfigure SQL Server to enable the SQL CLR.  It is highly recommended that this be previously authorized by your Database Administrator.",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "bb659731-de74-470b-94fe-24b61e27e176",
      "Name": "CatalogName",
      "Label": "Catalog name",
      "HelpText": "Name of the catalog to create in Integration Services Catalogs on SQL Server.  When using the GUI, this value gets hardcoded to SSISDB and cannot be changed.  It is recommended that you do not change the default value.",
      "DefaultValue": "SSISDB",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "af66e1ad-3631-4d4b-99d4-215a1b2beb9d",
      "Name": "CatalogPwd",
      "Label": "Catalog password",
      "HelpText": "Password to the Integration Services Catalog.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Id": "db080c05-a746-4c27-b964-d98b63b00a29",
      "Name": "FolderName",
      "Label": "Folder name",
      "HelpText": "Name of the folder to use within the Integration Services Catalog",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "c6264016-2c14-4e24-949c-d8a9d73599ac",
      "Name": "ProjectName",
      "Label": "Project name",
      "HelpText": "Name of the project within the folder of the Integration Services catalog",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "f628a71c-5399-4137-926b-3c8d170ba61c",
      "Name": "UseEnvironment",
      "Label": "Use environment",
      "HelpText": "This will make a project reference to the defined environment.",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "66eee7ee-7f89-4675-a32a-f33dac895311",
      "Name": "EnvironmentName",
      "Label": "Environment name",
      "HelpText": "Name of the environment to reference the project to. If the environment doesn't exist, it will create it.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "a014a370-9b9d-4284-b6be-a603f9f97942",
      "Name": "ReferenceProjectParametersToEnvironmentVairables",
      "Label": "Reference project parameters to environment variables",
      "HelpText": "Checking this box will make Project Parameters reference Environment Variables.  If the Environment Variable doesn't exist, it will create it.  This expects that an Octopus variable of the same name exists.",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "4441ed46-3cc3-42bb-9baa-5753cd4d6d5c",
      "Name": "ReferencePackageParametersToEnvironmentVairables",
      "Label": "Reference package parameters to environment variables",
      "HelpText": "Checking this box will make Package Parameters reference Environment Variables.  If the Environment Variable doesn't exist, it will create it.  This expects than an Octopus variable of the same name exists.",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "3d4e78ec-fe77-4221-be40-1b3d2fbfc3c4",
      "Name": "NugetPackageStepName",
      "Label": "NuGet package step",
      "HelpText": "The step that uploaded the NuGet package to the server.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "StepName"
      }
    },
    {
      "Id": "7c9d808d-60f3-4648-b8a4-e4865268740b",
      "Name": "UseFullyQualifiedVariableNames",
      "Label": "Use Fully Qualified Variable Names",
      "HelpText": "When true the package variables names must be represented in `dtsx_name_without_extension.variable_name`",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "fef889a5-1f5b-48c7-bb65-2f2c3498e6cd",
      "Name": "UseCustomFilter",
      "Label": "Use Custom Filter for connection manager properties",
      "HelpText": "Custom filter should contain the regular expression for ignoring properties when setting will occur during the auto-mapping",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "ebefb099-ce7a-45bf-b52a-bb8ea9915b1b",
      "Name": "CustomFilter",
      "Label": "Custom Filter for connection manager properties",
      "HelpText": "Regular expression for filtering out the connection manager properties during the auto-mapping process. This string is used when `UseCustomFilter` is set to true",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "dbe29935-d3c6-4b77-b796-26347abdbf2c",
      "Name": "SyncEnvironment",
      "Label": "Clean obsolete variables from environment",
      "HelpText": "When `true` synchronizes the environment:
- Removes obsolete variables
- Removes renamed variables
- Replaces values of valid variables (also when `false`)",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    }
  ],
  "LastModifiedBy": "suxstellino",
  "$Meta": {
    "ExportedAt": "2019-04-18T13:43:05.493Z",
    "OctopusVersion": "2018.10.5",
    "Type": "ActionTemplate"
  },  
  "Category": "sql"
}
