{
  "Id": "2abc4f4f-06f4-4af6-8b10-52651ab4d3d5",
  "Name": "AWS - Add or Remove instance from ELBv2",
  "Description": "Add or Remove the current instance from an ELBv2 Target Group.",
  "ActionType": "Octopus.Script",
  "Version": 6,
  "Properties": {
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.RunOnServer": "false",
    "Octopus.Action.Script.ScriptBody": "$accessKey = $OctopusParameters['accessKey']
$secretKey = $OctopusParameters['secretKey']
$region = $OctopusParameters['region']

$targetGroupArn = $OctopusParameters['targetGroupArn']

$action = $OctopusParameters['action']

$checkInterval = $OctopusParameters['checkInterval']
$maxChecks = $OctopusParameters['maxChecks']

$awsProfile = (get-date -Format '%y%d%M-%H%m').ToString() # random

if (Get-Module | Where-Object { $_.Name -like \"AWSPowerShell*\" }) {
\tWrite-Host \"AWS PowerShell module is already loaded.\"
} else {
\t$awsModule = Get-Module -ListAvailable | Where-Object {  $_.Name -like \"AWSPowerShell*\" }
\tif (!($awsModule)) {
    \tWrite-Error \"AWSPowerShell / AWSPowerShell.NetCore not found\"
        return
    } else {
    \tImport-Module $awsModule.Name
        Write-Host \"Imported Module: $($awsModule.Name)\"
    }
}

function GetCurrentInstanceId
{
    Write-Host \"Getting instance id\"

\t$response = Invoke-RestMethod -Uri \"http://169.254.169.254/latest/meta-data/instance-id\" -Method Get

\tif ($response)
\t{
\t\t$instanceId = $response
\t}
\telse
\t{
\t\tWrite-Error -Message \"Returned Instance ID does not appear to be valid\"
\t\tExit 1
\t}

\t$response
}

function GetTarget
{
    $instanceId = GetCurrentInstanceId

    $target = New-Object -TypeName Amazon.ElasticLoadBalancingV2.Model.TargetDescription
    $target.Id = $instanceId
    
    Write-Host \"Current instance id: $instanceId\"

    return $target
}

function GetInstanceState
{
\t$state = (Get-ELB2TargetHealth -TargetGroupArn $targetGroupArn -Target $target -AccessKey $accessKey -SecretKey $secretKey -Region $region).TargetHealth.State

\tWrite-Host \"Current instance state: $state\"

\treturn $state
}

function WaitForState
{
    param([string]$expectedState)

    $instanceState = GetInstanceState -arn $targetGroupArn -target $target

    if ($instanceState -eq $expectedState)
    {
        return
    }

    $checkCount = 0

    Write-Host \"Waiting for instance state to be $expectedState\"
    Write-Host \"Maximum Checks: $maxChecks\"
    Write-Host \"Check Interval: $checkInterval\"

    while ($instanceState -ne $expectedState -and $checkCount -le $maxChecks)
    {\t
\t    $checkCount += 1
\t
\t    Write-Host \"Waiting for $checkInterval seconds for instance state to be $expectedState\"
\t    Start-Sleep -Seconds $checkInterval
\t
\t    if ($checkCount -le $maxChecks)
\t    {
\t\t    Write-Host \"$checkCount/$maxChecks Attempts\"
\t    }
\t
\t    $instanceState = GetInstanceState
    }

    if ($instanceState -ne $expectedState)
    {
\t    Write-Error -Message \"Instance state is not $expectedState, giving up.\"
\t    Exit 1
    }
}

function DeregisterInstance
{
    Write-Host \"Deregistering instance from $targetGroupArn\"
    Unregister-ELB2Target -TargetGroupArn $targetGroupArn -Target $target -AccessKey $accessKey -SecretKey $secretKey -Region $region
    WaitForState -expectedState \"unused\"
    Write-Host \"Instance deregistered\"
}

function RegisterInstance
{
    Write-Host \"Registering instance with $targetGroupArn\"
    Try {
    \tRegister-ELB2Target -TargetGroupArn $targetGroupArn -Target $target -AccessKey $accessKey -SecretKey $secretKey -Region $region
    } Catch {
    \tWrite-Host $Error[0]
    }
    WaitForState -expectedState \"healthy\"
    Write-Host \"Instance registered\"
}

$target = GetTarget

switch ($action)
{
    \"deregister\" { DeregisterInstance }
    \"register\" { RegisterInstance }
}",
    "Octopus.Action.Script.ScriptFileName": null,
    "Octopus.Action.Package.FeedId": null,
    "Octopus.Action.Package.PackageId": null
  },
  "Parameters": [
    {
      "Id": "81fc5ef2-2df8-4f10-a041-7277792e270a",
      "Name": "accessKey",
      "Label": "IAM Access Key ID",
      "HelpText": "The IAM Access Key ID to use when authenticating with AWS.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      },
      "Links": {}
    },
    {
      "Id": "c0f7d960-ffce-4046-9996-f7ef39a82306",
      "Name": "secretKey",
      "Label": "IAM Secret Key",
      "HelpText": "The IAM secret access key used to authenticate with AWS.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      },
      "Links": {}
    },
    {
      "Id": "ed692709-1332-4b18-9ec8-4bc02609bdee",
      "Name": "region",
      "Label": "AWS Region",
      "HelpText": "The region in which the ELBv2 and Target Group live.",
      "DefaultValue": "eu-west-1",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      },
      "Links": {}
    },
    {
      "Id": "13d12f79-447f-4e2a-b4fb-460117b9301d",
      "Name": "targetGroupArn",
      "Label": "Target Group ARN",
      "HelpText": "The ARN of the target group.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      },
      "Links": {}
    },
    {
      "Id": "8c6fa0f4-6ebd-4021-aba9-39c7a5394ecd",
      "Name": "action",
      "Label": "Action",
      "HelpText": "Choose if you want to add or remove the current instance from the selected target group.",
      "DefaultValue": "deregister",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "deregister|Remove
register|Add"
      },
      "Links": {}
    },
    {
      "Id": "15e771c5-7fb5-45f3-ad9e-180d90aae785",
      "Name": "checkInterval",
      "Label": "State Check Interval",
      "HelpText": "The number of seconds to wait before checking if the instances has been successfully added or removed from the target group.",
      "DefaultValue": "10",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      },
      "Links": {}
    },
    {
      "Id": "68c5d2d8-e991-4f64-87df-cd548fc16ffe",
      "Name": "maxChecks",
      "Label": "Maximum State Checks",
      "HelpText": "The maximum number of times to check if the instance has been successfully added or removed from the target group.",
      "DefaultValue": "6",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      },
      "Links": {}
    }
  ],
  "LastModifiedOn": "2022-05-16T07:30:05.303Z",
  "LastModifiedBy": "phillip-haydon",
  "$Meta": {
    "ExportedAt": "2022-05-16T07:30:05.303Z",
    "OctopusVersion": "2022.1.2584",
    "Type": "ActionTemplate"
  },
  "Category": "aws"
}
