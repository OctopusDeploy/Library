{
  "Id": "67fcc93c-509c-4c13-bc24-645eff53c5c2",
  "Name": "Azure Function - Set AppSettings from Azure AppConfig",
  "Description": "This step retrieves one or more key/values from an Azure App Configuration store and adds them to an Azure App Function's AppSettings.

You can retrieve individual keys that match a specific name, and you can choose a custom setting name for each key.

Wildcard search is also supported using the `*` notation in the **Key Names** parameter. Note: Combining a wildcard search with custom setting names is not supported.

You can also combine retrieved values with additional parameters passed into the step using the `Additional AppSettings` parameter.

Authentication is performed using an Azure Service Principal.

---

**Required:** 
- An Azure account with permission to both retrieve values from the Azure App Config store and publish to the App Function.
- The `az` CLI on the target or worker. If the CLI can't be found, the step will fail. 

Notes:

- Tested on Octopus `2024.1` using az version `2.38.0`
- Tested with both Windows PowerShell and PowerShell Core (on Linux).
- Slot Settings are not currently supported.",
  "ActionType": "Octopus.AzurePowerShell",
  "Version": 3,
  "CommunityActionTemplateId": null,
  "Packages": [],
  "GitDependencies": [],
  "Properties": {
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "OctopusUseBundledTooling": "False",
    "Octopus.Action.Script.ScriptBody": "$ErrorActionPreference = 'Stop'

# KV Variables
$global:AzureAppConfigStoreName = $OctopusParameters[\"AzFunction.SetAppSettings.FromAzAppConfig.ConfigStoreName\"]
$global:AzureAppConfigStoreEndpoint = $OctopusParameters[\"AzFunction.SetAppSettings.FromAzAppConfig.ConfigStoreEndpoint\"]
$global:AzureAppConfigRetrievalMethod = $OctopusParameters[\"AzFunction.SetAppSettings.FromAzAppConfig.RetrievalMethod\"]
$ConfigStoreKeyNames = $OctopusParameters[\"AzFunction.SetAppSettings.FromAzAppConfig.KeyNames\"]
$global:ConfigStoreLabels = $OctopusParameters[\"AzFunction.SetAppSettings.FromAzAppConfig.Labels\"]
$global:SuppressWarnings = $OctopusParameters[\"AzFunction.SetAppSettings.FromAzAppConfig.SuppressWarnings\"] -ieq \"True\"
$global:TreatWarningsAsErrors = $OctopusParameters[\"AzFunction.SetAppSettings.FromAzAppConfig.TreatWarningsAsErrors\"] -ieq \"True\"

# Function Variables
$FunctionName = $OctopusParameters[\"AzFunction.SetAppSettings.FromAzAppConfig.FunctionName\"]
$ResourceGroup = $OctopusParameters[\"AzFunction.SetAppSettings.FromAzAppConfig.ResourceGroup\"]
$AdditionalSettingsValues = $OctopusParameters[\"AzFunction.SetAppSettings.FromAzAppConfig.AdditionalSettingsValues\"]
$Slot = $OctopusParameters[\"AzFunction.SetAppSettings.FromAzAppConfig.Slot\"]

# KV params validation
if ([string]::IsNullOrWhiteSpace($global:AzureAppConfigStoreName) -and [string]::IsNullOrWhiteSpace($global:AzureAppConfigStoreEndpoint)) {
    throw \"Either parameter ConfigStoreName or ConfigStoreEndpoint not specified\"
}

if ([string]::IsNullOrWhiteSpace($global:AzureAppConfigRetrievalMethod)) {
    throw \"Required parameter AzFunction.SetAppSettings.FromAzAppConfig.RetrievalMethod not specified\"
}

if ([string]::IsNullOrWhiteSpace($ConfigStoreKeyNames) -and [string]::IsNullOrWhiteSpace($global:ConfigStoreLabels)) {
    throw \"Either AzFunction.SetAppSettings.FromAzAppConfig.KeyNames or AzFunction.SetAppSettings.FromAzAppConfig.Labels not specified\"
}

# Function params validation
if ([string]::IsNullOrWhiteSpace($FunctionName)) {
    throw \"Required parameter AzureFunction.ConfigureAppSettings.FunctionName not specified\"
}

if ([string]::IsNullOrWhiteSpace($ResourceGroup)) {
    throw \"Required parameter AzureFunction.ConfigureAppSettings.ResourceGroup not specified\"
}

$RetrieveAllKeys = $global:AzureAppConfigRetrievalMethod -ieq \"all\"
$global:ConfigStoreParameters = \"\"
if (-not [string]::IsNullOrWhiteSpace($global:AzureAppConfigStoreName)) {
    $global:ConfigStoreParameters += \" --name \"\"$global:AzureAppConfigStoreName\"\"\"
}
if (-not [string]::IsNullOrWhiteSpace($global:AzureAppConfigStoreEndpoint)) {
    $global:ConfigStoreParameters += \" --endpoint \"\"$global:AzureAppConfigStoreEndpoint\"\"\"
}

### Helper functions
function Test-ForAzCLI() {
    $oldPreference = $ErrorActionPreference
    $ErrorActionPreference = \"Stop\"
    try { 
        if (Get-Command \"az\") {
            return $True
        }
    }
    catch { 
        return $false
    }
    finally { 
        $ErrorActionPreference = $oldPreference 
    }
}


function Write-OctopusWarning(
    [string] $Message
) {
    if ($global:TreatWarningsAsErrors) {
        throw \"Error: $Message\"
    }
    else {
        if ($global:SuppressWarnings -eq $False) {
            Write-Warning -Message $Message
        }
        else {
            Write-Verbose -Message $Message
        }
    }
}

function Save-AppSetting(
    [string]$settingName, 
    [string]$settingValue) {

    $global:Settings += [PsCustomObject]@{name = $settingName; value = $settingValue; slotSetting = $false }
}

function Find-AzureAppConfigMatchesFromKey(
    [string]$KeyName,
    [bool]$IsWildCard,
    [string]$settingName,
    [PsCustomObject]$AppConfigValues) {

    if ($IsWildCard -eq $False) {
        Write-Verbose \"Finding exact match for: $keyName\"
        $matchingAppConfigKeys = $appConfigValues | Where-Object { $_.key -ieq $keyName }
        if ($null -eq $matchingAppConfigKeys -or $matchingAppConfigKeys.Count -eq 0) {
            Write-OctopusWarning \"Unable to find a matching key in Azure App Config for: $keyName\"
        }
        else {

            if ($matchingAppConfigKeys.Count -gt 1) {
                Write-OctopusWarning \"Found multiple matching keys ($($matchingAppConfigKeys.Count)) in Azure App Config for: $keyName. This is usually due to multiple values with labels\"

                foreach ($matchingAppConfigKey in $matchingAppConfigKeys) {
                    Write-Verbose \"Found match for $keyName $(if(![string]::IsNullOrWhiteSpace($matchingAppConfigKey.content_type)) {\"($($matchingAppConfigKey.content_type))\"})\"
                    $settingValue = $matchingAppConfigKey.value
        
                    if ([string]::IsNullOrWhiteSpace($settingName)) {
                        $settingName = $keyName.Trim()
                    }
                    if (![string]::IsNullOrWhiteSpace($matchingAppConfigKey.label)) {
                        $settingName = \"$($keyName.Trim())-$($matchingAppConfigKey.label)\"
                        Write-Verbose \"Appending label to setting name to avoid duplicate setting: $settingName\"
                    }
        
                    Save-AppSetting -settingName $settingName -settingValue $settingValue
                }
            } 
            else {
                $matchingAppConfigKey = $matchingAppConfigKeys | Select-Object -First 1
                Write-Verbose \"Found match for $keyName $(if(![string]::IsNullOrWhiteSpace($matchingAppConfigKey.content_type)) {\"($($matchingAppConfigKey.content_type))\"})\"
                $settingValue = $matchingAppConfigKey.value
    
                if ([string]::IsNullOrWhiteSpace($settingName)) {
                    $settingName = $keyName.Trim()
                }
    
                Save-AppSetting -settingName $settingName -settingValue $settingValue
            }
        }
    }
    else {
        Write-Verbose \"Finding wildcard match for: $keyName\"
        $matchingAppConfigKeys = @($appConfigValues | Where-Object { $_.key -ilike $keyName })
        if ($matchingAppConfigKeys.Count -eq 0) {
            Write-OctopusWarning \"Unable to find any matching keys in Azure App Config for wildcard: $keyName\"
        }
        else {
            foreach ($match in $matchingAppConfigKeys) {
                # Have to explicitly set settings as they are wildcard matches
                $settingName = $match.key
                $settingValue = $match.value
                Write-Verbose \"Found wildcard match '$settingName' $(if(![string]::IsNullOrWhiteSpace($matchingAppConfigKey.content_type)) {\"($($matchingAppConfigKey.content_type))\"})\"
                Save-AppSetting -settingName $settingName -settingValue $settingValue
            }
        }
    }
}

function Find-AzureAppConfigMatchesFromLabels() {
    
    Write-Verbose \"Retrieving values matching labels: $global:ConfigStoreLabels\"
    $command = \"az appconfig kv list $global:ConfigStoreParameters --label \"\"$global:ConfigStoreLabels\"\" --auth-mode login\"
            
    Write-Verbose \"Invoking expression: $command\"
    $appConfigResponse = Invoke-Expression -Command $command
    $ExitCode = $LastExitCode
    Write-Verbose \"az exit code: $ExitCode\"
    if ($ExitCode -ne 0) {
        throw \"Error retrieving appsettings. ExitCode: $ExitCode\"
    }

    if ([string]::IsNullOrWhiteSpace($appConfigResponse)) {
        Write-OctopusWarning \"Null or empty response received from Azure App Configuration service\"
    }
    else {
        $appConfigValues = $appConfigResponse | ConvertFrom-Json
        if ($appConfigValues.Count -eq 0) {
            Write-OctopusWarning \"Unable to find any matching keys in Azure App Config for labels: $global:ConfigStoreLabels\"
        }
        else {
            Write-Verbose \"Finding match(es) for labels: $global:ConfigStoreLabels\"
            foreach ($appConfigValue in $appConfigValues) {
                # Have to explicitly set setting Name here as its a match based on label alone
                $settingName = $appConfigValue.key
                Write-Verbose \"Found label match '$($appConfigValue.key)' $(if(![string]::IsNullOrWhiteSpace($appConfigValue.content_type)) {\"($($appConfigValue.content_type))\"})\"
                if (![string]::IsNullOrWhiteSpace($appConfigValue.label)) {
                    $settingName = \"$($settingName)-$($appConfigValue.label)\"
                    Write-Verbose \"Appending label to setting to avoid duplicate name: $settingName\"
                }
                $settingValue = $appConfigValue.value
                
                Save-AppSetting -settingName $settingName -settingValue $settingValue
            }
        }
    }
}

# Check if Az cli is installed.
$azCliAvailable = Test-ForAzCLI
if ($azCliAvailable -eq $False) {
    throw \"Cannot find the Azure CLI (az) on the machine. This must be available to continue.\"\t
}

# Begin KV Retrieval
$Keys = @()
$global:Settings = @()

# Extract key names+optional custom setting name
@(($ConfigStoreKeyNames -Split \"`n\").Trim()) | ForEach-Object {
    if (![string]::IsNullOrWhiteSpace($_)) {
        Write-Verbose \"Working on: '$_'\"
        $keyDefinition = ($_ -Split \"\\|\")
        $keyName = $keyDefinition[0].Trim()
        $KeyIsWildcard = $keyName.EndsWith(\"*\")
        $settingName = $null
        if ($keyDefinition.Count -gt 1) {
            if ($KeyIsWildcard) {
                throw \"Key definition: '$_' evaluated as a wildcard with a custom setting name. This is not supported.\"
            }
            $settingName = $keyDefinition[1].Trim()
        }

        if ([string]::IsNullOrWhiteSpace($keyName)) {
            throw \"Unable to establish key name from: '$_'\"
        }

        $key = [PsCustomObject]@{
            KeyName       = $keyName
            KeyIsWildcard = $KeyIsWildcard
            SettingName   = if (![string]::IsNullOrWhiteSpace($settingName)) { $settingName } else { \"\" }
        }
        $Keys += $key
    }
}

$LabelsArray = $global:ConfigStoreLabels -Split \",\" | Where-Object { [string]::IsNullOrWhiteSpace($_) -eq $False }

Write-Verbose \"Azure AppConfig Retrieval Method: $global:AzureAppConfigRetrievalMethod\"
if (![string]::IsNullOrWhiteSpace($global:AzureAppConfigStoreName)) {
    Write-Verbose \"Azure AppConfig Store Name: $global:AzureAppConfigStoreName\"
}
if (![string]::IsNullOrWhiteSpace($global:AzureAppConfigStoreEndpoint)) {
    Write-Verbose \"Azure AppConfig Store Endpoint: $global:AzureAppConfigStoreEndpoint\"
}
Write-Verbose \"Suppress warnings: $global:SuppressWarnings\"
Write-Verbose \"Treat warnings as errors: $global:TreatWarningsAsErrors\"
Write-Verbose \"Keys to retrieve: $($Keys.Count)\"
Write-Verbose \"Labels to retrieve: $($LabelsArray.Count)\"

$appConfigResponse = $null

# Retrieving all keys should be more performant, but may have a larger payload response.
if ($RetrieveAllKeys) {
    
    if ($Keys.Count -gt 0) {
        Write-Host \"Retrieving ALL config values from store\"
        $command = \"az appconfig kv list $global:ConfigStoreParameters --all --auth-mode login\"
    
        if (![string]::IsNullOrWhiteSpace($global:ConfigStoreLabels)) {
            $command += \" --label \"\"$global:ConfigStoreLabels\"\" \"
        }
        Write-Verbose \"Invoking expression: $command\"
        $appConfigResponse = Invoke-Expression -Command $command
        $ExitCode = $LastExitCode
        Write-Verbose \"az exit code: $ExitCode\"
        if ($ExitCode -ne 0) {
            throw \"Error retrieving appsettings. ExitCode: $ExitCode\"
        }
    
        if ([string]::IsNullOrWhiteSpace($appConfigResponse)) {
            Write-OctopusWarning \"Null or empty response received from Azure App Configuration service\"
        }
        else {
            $appConfigValues = $appConfigResponse | ConvertFrom-Json
        }

        foreach ($key in $Keys) {
            $keyName = $key.KeyName
            $KeyIsWildcard = $key.KeyIsWildcard
            $SettingName = $key.SettingName
        
            Find-AzureAppConfigMatchesFromKey -KeyName $keyName -IsWildcard $KeyIsWildcard -SettingName $SettingName -AppConfigValues $appConfigValues
        }
    }
    # Possible that ONLY labels have been provided
    elseif ($LabelsArray.Count -gt 0) {
        Find-AzureAppConfigMatchesFromLabels 
    }
}
# Loop through and get keys based on the supplied names
else {
    
    Write-Host \"Retrieving keys based on supplied names...\"
    if ($Keys.Count -gt 0) {
        foreach ($key in $Keys) {
            $keyName = $key.KeyName
            $KeyIsWildcard = $key.KeyIsWildcard
            $settingName = $key.SettingName

            if ([string]::IsNullOrWhiteSpace($settingName)) {
                $settingName = \"$($keyName.Trim())\"
            }

            Write-Verbose \"Retrieving values matching key: $keyName from store\"
            $command = \"az appconfig kv list $global:ConfigStoreParameters --key \"\"$keyName\"\" --auth-mode login\"
            
            if (![string]::IsNullOrWhiteSpace($global:ConfigStoreLabels)) {
                $command += \" --label \"\"$global:ConfigStoreLabels\"\" \"
            }
            Write-Verbose \"Invoking expression: $command\"

            $appConfigResponse = Invoke-Expression -Command $command
            $ExitCode = $LastExitCode
            Write-Verbose \"az exit code: $ExitCode\"
            if ($ExitCode -ne 0) {
                throw \"Error retrieving appsettings. ExitCode: $ExitCode\"
            }

            if ([string]::IsNullOrWhiteSpace($appConfigResponse)) {
                Write-OctopusWarning \"Null or empty response received from Azure App Configuration service\"
            }
            else {
                $appConfigValues = $appConfigResponse | ConvertFrom-Json
                if ($appConfigValues.Count -eq 0) {
                    Write-OctopusWarning \"Unable to find a matching key in Azure App Config for: $keyName\"
                }
                else {
                    Write-Verbose \"Finding match(es) for: $keyName\"
                    Find-AzureAppConfigMatchesFromKey -KeyName $keyName -IsWildcard $KeyIsWildcard -SettingName $settingName -AppConfigValues $appConfigValues
                }
            }
        }
    }
}
# End KV Retrieval

# Begin AZ Function set

$AdditionalSettings = @()
#$SlotSettings = @()

# Extract additional settings values
if (-not [string]::IsNullOrWhiteSpace($AdditionalSettingsValues)) {
    @(($AdditionalSettingsValues -Split \"`n\").Trim()) | ForEach-Object {
        if (![string]::IsNullOrWhiteSpace($_)) {
            Write-Verbose \"Working on: '$_'\"
            if (-not $_.Contains(\"|\")) {
                throw \"Setting '$_' doesnt contain the '|' delimiter. Multi-line values aren't supported.\"
            }
            $settingDefinition = ($_ -Split \"\\|\")
            $settingName = $settingDefinition[0].Trim()
            $settingValue = \"\"
            if ($settingDefinition.Count -gt 1) {
                $settingValue = $settingDefinition[1].Trim()
            }
            if ([string]::IsNullOrWhiteSpace($settingName)) {
                throw \"Unable to establish additional setting name from: '$_'\"
            }
            $setting = [PsCustomObject]@{
                name        = $settingName
                value       = $settingValue
                slotSetting = $false
            }
            $AdditionalSettings += $setting
        }
    }
}


if ($Settings.Count -gt 0 -or $AdditionalSettings.Count -gt 0) {
    Write-Host \"Settings found to publish to App Function: $FunctionName\"

    Write-Verbose \"Function Name: $FunctionName\"
    Write-Verbose \"Resource Group: $ResourceGroup\"
    Write-Verbose \"Slot: $Slot\"
    Write-Verbose \"Settings: $($Settings.Count)\"
    Write-Verbose \"Additional Settings: $($AdditionalSettings.Count)\"
    if ($AdditionalSettings.Count -gt 0) {
        Write-Verbose \"Combining additional settings with settings retrieved from Azure App Config\"
        $Settings = $Settings + $AdditionalSettings
    }

    $settingsFile = $null

    try {

        $command = \"az functionapp config appsettings set --name=\"\"$Functionname\"\" --resource-group \"\"$ResourceGroup\"\" \"
        if (-not([string]::IsNullOrWhiteSpace($Slot))) {
            $command += \" --slot \"\"$Slot\"\" \"
        }

        if ($Settings.Count -ge 1) {
            $settingsFile = [System.IO.Path]::GetRandomFileName()
            $ConvertToJsonParameters = @{}
            if ($PSVersionTable.PSVersion.Major -ge 6) {
                $ConvertToJsonParameters.Add(\"AsArray\", $True)
            }
            $Settings | ConvertTo-Json @ConvertToJsonParameters | Set-Content -Path $settingsFile
            $command += \" --settings '@$settingsFile'\"
        }

        Write-Verbose \"Invoking expression: $command\"
        Write-Host \"##octopus[stderr-progress]\"
        $settingsUpdateResponse = Invoke-Expression -Command $command
        $ExitCode = $LastExitCode
        Write-Verbose \"FunctionApp update ExitCode: $ExitCode\"
        if ($ExitCode -ne 0) {
            throw \"Error configuring appsettings for function app '$FunctionName'. ExitCode: $ExitCode\"
        }
        Write-Host \"##octopus[stderr-default]\"
        if ($null -ne $settingsUpdateResponse) {
            Write-Host \"Update of function '$FunctionName' was successful\"
            try {
                $functionSettings = $settingsUpdateResponse | ConvertFrom-Json
                if ($null -ne $functionSettings) {
                    $settingsCount = @($functionSettings | Where-Object { $_.slotSetting -eq $False }).Count
                    $slotSettingsCount = @($functionSettings | Where-Object { $_.slotSetting -eq $True }).Count
                    Write-Verbose \"Function '$FunctionName' has $settingsCount setting(s) and $slotSettingsCount slot setting(s).\"
                }
            }
            catch {}
        }
        
    }
    catch { throw }
    finally {
        if (-not([string]::IsNullOrWhiteSpace($settingsFile))) {
            Write-Verbose \"Removing temporary settings file $settingsFile\"
            Remove-Item -Path $settingsFile -Force -ErrorAction Ignore
        }
        if (-not([string]::IsNullOrWhiteSpace($slotSettingsFile))) {
            Write-Verbose \"Removing temporary slot settings file $slotSettingsFile\"
            Remove-Item -Path $slotSettingsFile -Force -ErrorAction Ignore
        }
    }
}
else {
    Write-Host \"No settings found to publish to the Azure App function\"
}",
    "Octopus.Action.Azure.AccountId": "#{AzFunction.SetAppSettings.FromAzAppConfig.AzureAccount}"
  },
  "Parameters": [
    {
      "Id": "b4c7f413-9341-4602-b5f4-5d69365e6cff",
      "Name": "AzFunction.SetAppSettings.FromAzAppConfig.AzureAccount",
      "Label": "Azure Account",
      "HelpText": "An Azure account with permission to both retrieve values from the Azure App Config store and publish to the App Function",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "AzureAccount"
      }
    },
    {
      "Id": "fcf6f1fd-1b3c-47d2-8037-802224c76452",
      "Name": "AzFunction.SetAppSettings.FromAzAppConfig.ConfigStoreName",
      "Label": "Config Store Name",
      "HelpText": "The name of the Azure App Configuration store. Provide this or the **Config store endpoint**.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "7d6b9332-9c13-42b1-83b5-a8e84fc593f0",
      "Name": "AzFunction.SetAppSettings.FromAzAppConfig.ConfigStoreEndpoint",
      "Label": "Config Store Endpoint",
      "HelpText": "The endpoint for the Azure App Configuration Store. Provide this or the **Config store name**.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "c25b6875-2007-4d55-97a1-7ec7b061b06b",
      "Name": "AzFunction.SetAppSettings.FromAzAppConfig.RetrievalMethod",
      "Label": "Retrieval Method",
      "HelpText": "Choose how the step calls the az cli. Either:
- `All`: Retrieve all configuration values in one call
- `Individually`: Retrieve configuration values in multiple calls; one for each key specified in the **Key Names** parameter.

Default: `All`",
      "DefaultValue": "all",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "all|All
individual|Individually"
      }
    },
    {
      "Id": "cf069635-3027-47a4-8965-d229c8e64afd",
      "Name": "AzFunction.SetAppSettings.FromAzAppConfig.KeyNames",
      "Label": "Key Names",
      "HelpText": "Specify the names of the keys to be returned from Azure App Configuration in the format `KeyName | CustomSettingName` where:

- `KeyName` is the key to retrieve. Wildcards are supported by adding `*` at the end of the key name.
- `CustomSettingName` is the _optional_ name to set for the AppSetting value in the App Function. *If this value isn't specified, the original key will be used.*.

**Note:** Multiple keys can be retrieved by entering each one on a new line. Note: Combining a wildcard search with custom setting names is not supported.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "MultiLineText"
      }
    },
    {
      "Id": "13007305-0fa2-468c-b7de-3c5317bd8611",
      "Name": "AzFunction.SetAppSettings.FromAzAppConfig.Labels",
      "Label": "Labels",
      "HelpText": "Labels are an attribute on keys. Provide one or more labels in the format `label1,label2` to retrieve only selected keys tagged with those labels.

**Note:** You can include both label values *and* specify key names if you want.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "a7e79ba3-5ea3-40ab-9759-aa281e3c02f9",
      "Name": "AzFunction.SetAppSettings.FromAzAppConfig.SuppressWarnings",
      "Label": "Suppress warnings",
      "HelpText": "Suppress warnings from being written to the task log. For example, when a supplied key can't be found in the Azure App Configuration store.",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "62d8f95f-8a57-4908-b789-c3ecabd7c6dd",
      "Name": "AzFunction.SetAppSettings.FromAzAppConfig.TreatWarningsAsErrors",
      "Label": "Treat Warnings as Errors",
      "HelpText": "Treats warnings as errors. If enabled the **Suppress Warnings** parameter is ignored. ",
      "DefaultValue": "True",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "c8c1c14d-a515-47e7-b117-6a69644b78af",
      "Name": "AzFunction.SetAppSettings.FromAzAppConfig.FunctionName",
      "Label": "Azure Function App Name",
      "HelpText": "The name of the Azure App function.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "07fcb750-13a1-4272-b6b6-a5cdd120a15f",
      "Name": "AzFunction.SetAppSettings.FromAzAppConfig.ResourceGroup",
      "Label": "Resource Group",
      "HelpText": "The name of the resource group where the Function App is located.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "fbd1b5bf-e1ce-415c-b7db-9c9d49e9f8e3",
      "Name": "AzFunction.SetAppSettings.FromAzAppConfig.Slot",
      "Label": "Slot",
      "HelpText": "
The name of the slot. Defaults to the production slot if not specified.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "21e9c8b3-50ce-4006-83a7-86d7803c31ee",
      "Name": "AzFunction.SetAppSettings.FromAzAppConfig.AdditionalSettingsValues",
      "Label": "Additional AppSettings",
      "HelpText": "Specify the name and values of any **additional** settings to be applied to the Azure App Function in the format `KEY | VALUE` where:

- `KEY` is the name of the app setting to add
- `VALUE` is the value to be used. [Octopus variables](https://octopus.com/docs/projects/variables) can be used here.


**Note:** Multiple settings can be added by entering each one on a new line. As a result, values that span multiple lines will result in an error.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "MultiLineText"
      }
    }
  ],
  "StepPackageId": "Octopus.AzurePowerShell",
  "$Meta": {
    "ExportedAt": "2023-11-30T16:25:08.828Z",
    "OctopusVersion": "2024.1.2558",
    "Type": "ActionTemplate"
  },
  "LastModifiedAt": "2023-11-30T16:25:08.828Z",
  "LastModifiedBy": "harrisonmeister",
  "Category": "azure"
}
