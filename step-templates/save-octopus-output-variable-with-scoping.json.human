{
  "Id": "75a8f263-b690-4a55-84b7-9165ac9b6196",
  "Name": "Save Octopus Output Variable With Scoping",
  "Description": "Saves an [output variable](https://octopus.com/docs/deploying-applications/variables/output-variables) to the given project / library variable set with scoping",
  "ActionType": "Octopus.Script",
  "Version": 6,
  "CommunityActionTemplateId": null,
  "Packages": [],
  "Properties": {
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.RunOnServer": "true",
    "Octopus.Action.Script.ScriptBody": "$ErrorActionPreference = 'Stop'

$StepTemplate_BaseUrl = $OctopusParameters['#{if Octopus.Web.ServerUri}Octopus.Web.ServerUri#{else}Octopus.Web.BaseUrl#{/if}'].Trim('/')
if ([string]::IsNullOrWhiteSpace($StepTemplate_ApiKey)) {
    throw \"The step parameter 'API Key' was not found. This step requires an API Key to function, please provide one and try again.\"
}

function Invoke-OctopusApi {
    param(
        [Parameter(Position = 0, Mandatory)]$Uri,
        [ValidateSet(\"Get\", \"Put\")]$Method = 'Get',
        $Body
    )
    $requestParameters = @{
        Uri = ('{0}/{1}' -f $StepTemplate_BaseUrl, $Uri.TrimStart('/'))
        Method = $Method
        Headers = @{ \"X-Octopus-ApiKey\" = $StepTemplate_ApiKey }
        UseBasicParsing = $true
    }
    if ($null -ne $Body) { $requestParameters.Add('Body', ($Body | ConvertTo-Json -Depth 10)) }
    Write-Verbose \"$($Method.ToUpperInvariant()) $($requestParameters.Uri)\"   
    Invoke-WebRequest @requestParameters | % Content | ConvertFrom-Json | Write-Output
}

function Test-SpacesApi {
\tWrite-Verbose \"Checking API compatibility\";
\t$rootDocument = Invoke-OctopusApi 'api/';
    if($rootDocument.Links -ne $null -and $rootDocument.Links.Spaces -ne $null) {
    \tWrite-Verbose \"Spaces API found\"
    \treturn $true;
    }
    Write-Verbose \"Pre-spaces API found\"
    return $false;
}

if(Test-SpacesApi) {
\t$spaceId = $OctopusParameters['Octopus.Space.Id'];
    if([string]::IsNullOrWhiteSpace($spaceId)) {
        throw \"This step needs to be run in a context that provides a value for the 'Octopus.Space.Id' system variable. In this case, we received a blank value, which isn't expected - please reach out to our support team at https://help.octopus.com if you encounter this error.\";
    }
\t$baseApiUrl = \"api/$spaceId\" ;
} else {
\t$baseApiUrl = \"api\" ;
}

function Check-Scope {
\tparam(
    \t[Parameter(Position = 0, Mandatory)]
        [string]$ScopeName,
        [Parameter(Position = 1, Mandatory)]
        [AllowEmptyCollection()]
        [array]$ScopeValues,
        [Parameter(Position = 2)]
        [array]$ExistingScopeValue,
        [Parameter(Position = 3)]
        [string]$LookingForScopeValue
    )
    
    if ($LookingForScopeValue) {
     \t
    \tWrite-Host \"Checking $ScopeName Scope\"
        
        $scopes = Create-Scope $ScopeName $ScopeValues $LookingForScopeValue
        
        if (-not ($ExistingScopeValue -and (Compare-Object $ExistingScopeValue $scopes) -eq $null)) {
        \tWrite-Host \"$ScopeName scope does not match\"
        \treturn $false
        }
        Write-Host \"$ScopeName scope matches\"
    } else {
    \tif ($ExistingScopeValue) {
        \tWrite-Host \"$ScopeName scope does not match\"
        \treturn $false
        }
    }
    
    return $true
}

function Create-Scope {
\tparam(
    \t[Parameter(Position = 0, Mandatory)]
        [string]$ScopeName,
        [Parameter(Position = 1, Mandatory)]
        [array]$ScopeValues,
        [Parameter(Position = 2)]
        [string]$ScopeValue
    )
    
    $scopes = @()
    
    foreach ($scope in $ScopeValue.Split($StepTemplate_ScopeDelimiter)) {
    \tif ($ScopeName -eq \"TenantTag\") {
    \t\t$value = $ScopeValues | Where { $_.Id -eq $scope } | Select -First 1
    \t}
        else {
    \t\t$value = $ScopeValues | Where { $_.Name -eq $scope } | Select -First 1
    \t}
    \t$scopes += $value.Id
    }
    
    return $scopes
}

$outputVariableKey = \"Octopus.Action[${StepTemplate_DeploymentStep}].Output.${StepTemplate_VariableName}\"
if (!$OctopusParameters.ContainsKey($outputVariableKey)) {
    throw \"Variable '$StepTemplate_VariableName' has not been output from '$StepTemplate_DeploymentStep'\"
}
$isSensitive = [System.Convert]::ToBoolean($StepTemplate_IsSensitive)
$variableType = if ($isSensitive) { \"Sensitive\" } else { \"String\" }

$variableValue = $OctopusParameters[$outputVariableKey]
Write-Host \"Name: $StepTemplate_VariableName\"
Write-Host \"Type: $variableType\"
Write-Host \"Value: $(if ($isSensitive) { \"********\" } else { $variableValue })\"
Write-Host ' '

Write-Host \"Retrieving $StepTemplate_VariableSetType variable set...\"
if ($StepTemplate_VariableSetType -eq 'project') {
    $variableSet = Invoke-OctopusApi \"$baseApiUrl/projects/all\" | ? Name -eq $StepTemplate_VariableSetName | % { Invoke-OctopusApi $_.Links.Variables }
}
if ($StepTemplate_VariableSetType -eq 'library') {
    $variableSet = Invoke-OctopusApi \"$baseApiUrl/libraryvariablesets/all?ContentType=Variables\" | ? Name -eq $StepTemplate_VariableSetName | % { Invoke-OctopusApi $_.Links.Variables }
}
if ($null -eq $variableSet) {
    throw \"Unable to find $StepTemplate_VariableSetType variable set '$StepTemplate_VariableSetName'\"
}

$variableExists = $false

$variableSet.Variables | ? Name -eq $StepTemplate_TargetName | % {
\tif (-not (Check-Scope 'Environment' $variableSet.ScopeValues.Environments $_.Scope.Environment $StepTemplate_EnvironmentScope)) {
    \treturn
    }

\tif (-not (Check-Scope 'Machine' $variableSet.ScopeValues.Machines $_.Scope.Machine $StepTemplate_MachineScope)) {
    \treturn
    }
    
    if (-not (Check-Scope 'Role' $variableSet.ScopeValues.Roles $_.Scope.Role $StepTemplate_RoleScope)) {
    \treturn
    }
    
    if (-not (Check-Scope 'Action' $variableSet.ScopeValues.Actions $_.Scope.Action $StepTemplate_ActionScope)) {
    \treturn
    }
    
    if (-not (Check-Scope 'Channel' $variableSet.ScopeValues.Channels $_.Scope.Channel $StepTemplate_ChannelScope)) {
    \treturn
    }
    
    if (-not (Check-Scope 'TenantTag' $variableSet.ScopeValues.TenantTags $_.Scope.TenantTag $StepTemplate_TenantTagScope)) {
    \treturn
    }

    Write-Host \"Updating existing variable...\"
    Write-Host \"Existing value:\"
\tWrite-Host \"$(if ($isSensitive) { \"********\" } else { $_.Value })\"
    $_.Value = $variableValue
    $_.Type = $variableType
    $_.IsSensitive = $isSensitive
    $variableExists = $true
}

if (!$variableExists) {
    Write-Host \"Creating new variable...\"
    
    $variable = @{
        Name = $StepTemplate_TargetName
        Value = $variableValue
        Type = $variableType
        IsSensitive = $isSensitive
        Scope = @{}
    }
    
    if ($StepTemplate_EnvironmentScope) {
    \t$variable.Scope['Environment'] = (Create-Scope 'Environment' $variableSet.ScopeValues.Environments $StepTemplate_EnvironmentScope)
    }
    if ($StepTemplate_RoleScope) {
    \t$variable.Scope['Role'] = (Create-Scope 'Role' $variableSet.ScopeValues.Roles $StepTemplate_RoleScope)
    }
    if ($StepTemplate_MachineScope) {
    \t$variable.Scope['Machine'] = (Create-Scope 'Machine' $variableSet.ScopeValues.Machines $StepTemplate_MachineScope)
    }
    if ($StepTemplate_ActionScope) {
    \t$variable.Scope['Action'] = (Create-Scope 'Action' $variableSet.ScopeValues.Actions $StepTemplate_ActionScope)
    }
    if ($StepTemplate_ChannelScope) {
    \t$variable.Scope['Channel'] = (Create-Scope 'Channel' $variableSet.ScopeValues.Channels $StepTemplate_ChannelScope)
    }
    if ($StepTemplate_TenantTagScope) {
        $variable.Scope['TenantTag'] = (Create-Scope 'TenantTag' $variableSet.ScopeValues.TenantTags $StepTemplate_TenantTagScope)
    }
    
    $variableSet.Variables += $variable
}

Write-Host \"Saving updated variable set...\"
Invoke-OctopusApi $variableSet.Links.Self -Method Put -Body $variableSet | Out-Null
"
  },
  "Parameters": [
    {
      "Id": "bdbd77a9-cc0f-49f0-afac-6403e8ba87e4",
      "Name": "StepTemplate_ApiKey",
      "Label": "API Key",
      "HelpText": "Provide an Octopus API Key with appropriate permissions to save the variable",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Id": "ed5cf637-06ed-4c38-8a8d-f17c523ec6ba",
      "Name": "StepTemplate_DeploymentStep",
      "Label": "Deployment Step",
      "HelpText": "Select the step with the [output variable](https://octopus.com/docs/deploying-applications/variables/output-variables)",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "StepName"
      }
    },
    {
      "Id": "3d6f35a9-99ae-481e-b393-4319b70e0ac0",
      "Name": "StepTemplate_VariableName",
      "Label": "Variable Name",
      "HelpText": "Name of the [variable used when it was set](https://octopus.com/docs/deploying-applications/variables/output-variables#Outputvariables-Settingoutputvariablesusingscripts)",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "9265ca02-9c0f-48ad-9cb1-65d28d5a446e",
      "Name": "StepTemplate_VariableSetType",
      "Label": "Variable Set Type",
      "HelpText": "If the output variable is being saved to a project or [library variable set](https://octopus.com/docs/deploying-applications/variables/library-variable-sets)",
      "DefaultValue": "project",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "project|Project Variable
library|Library Variable Set"
      }
    },
    {
      "Id": "f511bbd7-1b75-430f-be48-d3b0787d839e",
      "Name": "StepTemplate_VariableSetName",
      "Label": "Variable Set Name",
      "HelpText": "Name of the project or [library](https://octopus.com/docs/deploying-applications/variables/library-variable-sets) variable set where the output variable should be saved",
      "DefaultValue": "#{Octopus.Project.Name}",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "50a10535-b36b-4972-a9a0-ff9bb42451c7",
      "Name": "StepTemplate_TargetName",
      "Label": "Target Variable Name",
      "HelpText": "The name to use when saving the variable.

_Note: The original variable name the default value._",
      "DefaultValue": "#{StepTemplate_VariableName}",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "204ad3d5-804a-43cd-90ad-8bb359800c78",
      "Name": "StepTemplate_IsSensitive",
      "Label": "Is Sensitive?",
      "HelpText": "If the variable should be marked as [sensitive](https://octopus.com/docs/deploying-applications/variables/sensitive-variables) and the value masked from logs",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "fdbcad6b-ff48-4f4f-8cda-afc404fb7f10",
      "Name": "StepTemplate_EnvironmentScope",
      "Label": "Environment Scope",
      "HelpText": "The environment scope to use when creating or updating the variable.

_This can be a list delimited by the Scope Delimiter (, by default)_",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "c4df3719-1f46-4d10-a3b7-52227f78815f",
      "Name": "StepTemplate_RoleScope",
      "Label": "Role Scope",
      "HelpText": "The role scope to use when creating or updating the variable.

_This can be a list delimited by the Scope Delimiter (, by default)_",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "1782abd1-ed68-4cbb-85b2-efd2baaa1eae",
      "Name": "StepTemplate_MachineScope",
      "Label": "Target Scope",
      "HelpText": "The target scope to use when creating or updating the variable.

_This can be a list delimited by the Scope Delimiter (, by default)_",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "85f14553-6425-4298-ba77-bdf31f852d0b",
      "Name": "StepTemplate_ActionScope",
      "Label": "Action Scope",
      "HelpText": "The action scope to use when creating or updating the variable.

_This can be a list delimited by the Scope Delimiter (, by default)_",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "e4152038-fc42-4ed6-8ad5-4aa94d76a5d1",
      "Name": "StepTemplate_ChannelScope",
      "Label": "Channel Scope",
      "HelpText": "The channel scope to use when creating or updating the variable.

_This can be a list delimited by the Scope Delimiter (, by default)_",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "a5bcd57b-d0bb-4b1c-be1b-56314e0b9684",
      "Name": "StepTemplate_TenantTagScope",
      "Label": "Tenant Tag Scope",
      "HelpText": "The tenant tag scope to use when creating or updating the variable. The value should be in the format TagSetName/TagValue.

_This can be a list delimited by the Scope Delimiter (, by default)_",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "7de754f7-d8b6-4b6e-a7d1-6306cf8f7ab8",
      "Name": "StepTemplate_ScopeDelimiter",
      "Label": "Scope Delimiter",
      "HelpText": "The delimiter used by scope lists.",
      "DefaultValue": ",",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LastModifiedAt": "2021-10-21T15:24:33.519Z",
  "LastModifiedBy": "harrisonmeister",
  "$Meta": {
    "ExportedAt": "2021-10-21T15:24:33.519Z",
    "OctopusVersion": "2021.2.7706",
    "Type": "ActionTemplate"
  },
  "Category": "octopus"
}
