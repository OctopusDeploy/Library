{
    "Id": "55b654f4-3e01-424f-b299-f99beddf0501",
    "Name": "Lets Encrypt - Route53",
    "Description": "Request (or renew) a X.509 SSL Certificate from the [Let's Encrypt](https://letsencrypt.org) Certificate Authority making use of [AWS Route53](https://aws.amazon.com/route53/) for the domain validation. Supports Wild Cards and the latest ACMEv2 standards. Verified to work on both Windows and Linux (PowerShell Core).",
    "ActionType": "Octopus.Script",
    "Version": 1,
    "Packages": [],
    "Properties": {
        "Octopus.Action.Script.ScriptSource": "Inline",
        "Octopus.Action.Script.Syntax": "PowerShell",
        "Octopus.Action.Script.ScriptBody": "###############################################################################\n# Required Modules\n###############################################################################\nWrite-Host \"Checking for required modules.\"\n\n$required_posh_acme_version = 3.12.0\n$module_check = Get-Module -ListAvailable -Name Posh-Acme | Where-Object { $_.Version -ge $required_posh_acme_version }\n\nif (-not ($module_check)) {\n    Write-Host \"Installing Posh-ACME.\"\n    Install-Module -Name Posh-ACME -MinimumVersion 3.12.0 -Scope CurrentUser -Force\n}\n\nImport-Module Posh-ACME\n\n###############################################################################\n# Constants\n###############################################################################\n$Certificate_Name = \"Lets Encrypt - $($OctopusParameters[\"LE_CertificateDomain\"])\"\n$LE_Fake_Issuer = \"Fake LE Intermediate X1\"\n$LE_Issuer = \"Let's Encrypt Authority X3\"\n\n###############################################################################\n# Functions\n###############################################################################\nfunction Get-LetsEncryptCertificate {\n    Write-Debug \"Entering: Get-LetsEncryptCertificate\"\n\n    if ($OctopusParameters[\"LE_Use_Staging\"]) {\n        Write-Host \"Using Lets Encrypt Server: Staging\"\n        Set-PAServer LE_STAGE;\n    }\n    else {\n        Write-Host \"Using Lets Encrypt Server: Production\"\n        Set-PAServer LE_PROD;\n    }\n\n    # Clobber account if it exists.\n    $le_account = Get-PAAccount\n    if ($le_account) {\n        Remove-PAAccount $le_account.Id -Force\n    }\n\n    # Trying to get around issues with variable expansion and sensitivity.\n    $aws_secret_key = ConvertTo-SecureString -String $OctopusParameters[\"LE_AWSAccount.SecretKey\"] -AsPlainText -Force\n    $route53_params = @{\n        R53AccessKey = $OctopusParameters[\"LE_AWSAccount.AccessKey\"];\n        R53SecretKey = $aws_secret_key\n    }\n\n    try {\n        return New-PACertificate -Domain $OctopusParameters[\"LE_CertificateDomain\"] -AcceptTOS -Contact $OctopusParameters[\"LE_ContactEmailAddress\"] -DnsPlugin Route53 -PluginArgs $route53_params -PfxPass $OctopusParameters[\"LE_PfxPassword\"] -Force\n    }\n    catch {\n        Write-Host \"Failed to Create Certificate. Error Message: $($_.Exception.Message)\"\n        exit 1\n    }\n}\n\nfunction Get-OctopusCertificates {\n    Write-Debug \"Entering: Get-OctopusCertificates\"\n\n    $octopus_uri = $OctopusParameters[\"Octopus.Web.ServerUri\"]\n    $octopus_space_id = $OctopusParameters[\"Octopus.Space.Id\"]\n    $octopus_headers = @{ \"X-Octopus-ApiKey\" = $OctopusParameters[\"LE_Octopus_APIKey\"] }\n    $octopus_certificates_uri = \"$octopus_uri/api/$octopus_space_id/certificates?search=$($OctopusParameters[\"LE_CertificateDomain\"])\"\n\n    try {\n        # Get a list of certificates that match our domain search criteria.\n        $certificates_search = Invoke-WebRequest -Uri $octopus_certificates_uri -Method Get -Headers $octopus_headers -UseBasicParsing -ErrorAction Stop | ConvertFrom-Json | Select-Object -ExpandProperty Items\n\n        # We don't want to confuse Production and Staging Lets Encrypt Certificates.\n        $issuer = $LE_Issuer\n        if ($OctopusParameters[\"LE_Use_Staging\"]) {\n            $issuer = $LE_Fake_Issuer\n        }\n\n        return $certificates_search | Where-Object {\n            $_.SubjectCommonName -eq $OctopusParameters[\"LE_CertificateDomain\"] -and\n            $_.IssuerCommonName -eq $issuer -and\n            $null -eq $_.ReplacedBy -and\n            $null -eq $_.Archived\n        }\n    }\n    catch {\n        Write-Host \"Could not retrieve certificates from Octopus Deploy. Error: $($_.Exception.Message)\"\n        exit 1\n    }\n}\n\nfunction Publish-OctopusCertificate {\n    param (\n        [string] $JsonBody\n    )\n\n    Write-Debug \"Entering: Publish-OctopusCertificate\"\n\n    $octopus_uri = $OctopusParameters[\"Octopus.Web.ServerUri\"]\n    $octopus_space_id = $OctopusParameters[\"Octopus.Space.Id\"]\n    $octopus_headers = @{ \"X-Octopus-ApiKey\" = $OctopusParameters[\"LE_Octopus_APIKey\"] }\n    $octopus_certificates_uri = \"$octopus_uri/api/$octopus_space_id/certificates\"\n\n    try {\n        Invoke-WebRequest -Uri $octopus_certificates_uri -Method Post -Headers $octopus_headers -Body $JsonBody -UseBasicParsing\n        Write-Host \"Published $($OctopusParameters[\"LE_CertificateDomain\"]) certificate to the Octopus Deploy Certificate Store.\"\n    }\n    catch {\n        Write-Host \"Failed to publish $($OctopusParameters[\"LE_CertificateDomain\"]) certificate. Error: $($_.Exception.Message)\"\n        exit 1\n    }\n}\n\nfunction Update-OctopusCertificate {\n    param (\n        [string]$Certificate_Id,\n        [string]$JsonBody\n    )\n\n    Write-Debug \"Entering: Update-OctopusCertificate\"\n\n    if (-not ($Certificate_Id -and $JsonBody)) {\n        Write-Host \"Existing Certificate Id and a replace Certificate are required.\"\n        exit 1\n    }\n\n    $octopus_uri = $OctopusParameters[\"Octopus.Web.ServerUri\"]\n    $octopus_space_id = $OctopusParameters[\"Octopus.Space.Id\"]\n    $octopus_headers = @{ \"X-Octopus-ApiKey\" = $OctopusParameters[\"LE_Octopus_APIKey\"] }\n    $octopus_certificates_uri = \"$octopus_uri/api/$octopus_space_id/certificates/$Certificate_Id/replace\"\n\n    Write-Debug $JsonBody\n\n    try {\n        Invoke-WebRequest -Uri $octopus_certificates_uri -Method Post -Headers $octopus_headers -Body $JsonBody -UseBasicParsing\n        Write-Host \"Replaced $($OctopusParameters[\"LE_CertificateDomain\"]) certificate in the Octopus Deploy Certificate Store.\"\n    }\n    catch {\n        Write-Error \"Failed to replace $($OctopusParameters[\"LE_CertificateDomain\"]) certificate. Error: $($_.Exception.Message)\"\n        exit 1\n    }\n}\n\nfunction Get-NewCertificatePFXAsJson {\n    param (\n        $Certificate\n    )\n\n    Write-Debug \"Entering: Get-NewCertificatePFXAsJson\"\n\n    if (-not ($Certificate)) {\n        Write-Host \"Certificate is required.\"\n        Exit 1\n    }\n\n    [Byte[]]$certificate_buffer = [System.IO.File]::ReadAllBytes($Certificate.PfxFile)\n    $certificate_base64 = [convert]::ToBase64String($certificate_buffer)\n\n    $certificate_body = @{\n        $Certificate_Name = \"$Certificate_Name\";\n        Notes            = \"\";\n        CertificateData  = @{\n            HasValue = $true;\n            NewValue = $certificate_base64;\n        };\n        Password         = @{\n            HasValue = $true;\n            NewValue = $OctopusParameters[\"LE_PfxPassword\"];\n        };\n    }\n\n    return $certificate_body | ConvertTo-Json\n}\n\nfunction Get-ReplaceCertificatePFXAsJson {\n    param (\n        $Certificate\n    )\n\n    Write-Debug \"Entering: Get-ReplaceCertificatePFXAsJson\"\n\n    if (-not ($Certificate)) {\n        Write-Host \"Certificate is required.\"\n        Exit 1\n    }\n\n    [Byte[]]$certificate_buffer = [System.IO.File]::ReadAllBytes($Certificate.PfxFile)\n    $certificate_base64 = [convert]::ToBase64String($certificate_buffer)\n\n    $certificate_body = @{\n        CertificateData = $certificate_base64;\n        Password        = $OctopusParameters[\"LE_PfxPassword\"];\n    }\n\n    return $certificate_body | ConvertTo-Json\n}\n\n###############################################################################\n# DO THE THING | MAIN |\n###############################################################################\nWrite-Debug \"Do the Thing\"\n\nWrite-Host \"Checking for existing Lets Encrypt Certificates in the Octopus Deploy Certificates Store.\"\n$certificates = Get-OctopusCertificates\n\n# Check for PFX & PEM\nif ($certificates) {\n\n    # Handle weird behavior between Powershell 5 and Powershell 6+\n    $certificate_count = 1\n    if ($certificates.Count -ge 1) {\n        $certificate_count = $certificates.Count\n    }\n\n    Write-Host \"Found $certificate_count for $($OctopusParameters[\"LE_CertificateDomain\"]).\"\n    Write-Host \"Checking to see if any expire within $($OctopusParameters[\"LE_ReplaceIfExpiresInDays\"]) days.\"\n\n    # Check Expiry Dates\n    $expiring_certificates = $certificates | Where-Object { [DateTime]$_.NotAfter -lt (Get-Date).AddDays($OctopusParameters[\"LE_ReplaceIfExpiresInDays\"]) }\n\n    if ($expiring_certificates) {\n        Write-Host \"Found certificates that expire with $($OctopusParameters[\"LE_ReplaceIfExpiresInDays\"]) days. Requesting new certificates for $($OctopusParameters[\"LE_CertificateDomain\"]) from Lets Encrypt\"\n        $le_certificate = Get-LetsEncryptCertificate\n\n        # PFX\n        $existing_certificate = $certificates | Where-Object { $_.CertificateDataFormat -eq \"Pkcs12\" } | Select-Object -First 1\n        $certificate_as_json = Get-ReplaceCertificatePFXAsJson -Certificate $le_certificate\n        Update-OctopusCertificate -Certificate_Id $existing_certificate.Id -JsonBody $certificate_as_json\n    }\n    else {\n        Write-Host \"Nothing to do here...\"\n    }\n\n    exit 0\n}\n\n# No existing Certificates - Lets get some new ones.\nWrite-Host \"No existing certificates found for $($OctopusParameters[\"LE_CertificateDomain\"]).\"\nWrite-Host \"Request New Certificate for $($OctopusParameters[\"LE_CertificateDomain\"]) from Lets Encrypt\"\n\n# New Certificate..\n$le_certificate = Get-LetsEncryptCertificate\n\nWrite-Host \"Publishing: LetsEncrypt - $($OctopusParameters[\"LE_CertificateDomain\"]) (PFX)\"\n$certificate_as_json = Get-NewCertificatePFXAsJson -Certificate $le_certificate\nPublish-OctopusCertificate -JsonBody $certificate_as_json\n\nWrite-Host \"GREAT SUCCESS\"\n",
        "Octopus.Action.SubstituteInFiles.Enabled": "True",
        "Octopus.Action.PowerShell.Edition": "Desktop"
    },
    "Parameters": [{
            "Id": "f1739a56-2603-42e0-b629-801dd71b0b0c",
            "Name": "LE_CertificateDomain",
            "Label": "Certificate Domain",
            "HelpText": "Domain (TLD, CNAME or Wildcard) to create a certificate for. ",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "c1f44b38-8025-4b12-b010-df48c02b3da4",
            "Name": "LE_PfxPassword",
            "Label": "PFX Password",
            "HelpText": "Password to use when converting to / from PFX. ",
            "DefaultValue": {
                "HasValue": true,
                "NewValue": null
            },
            "DisplaySettings": {
                "Octopus.ControlType": "Sensitive"
            }
        },
        {
            "Id": "c258ee0e-e298-4fa1-9c66-5ac0749409c5",
            "Name": "LE_ReplaceIfExpiresInDays",
            "Label": "Replace expiring certificate before N days",
            "HelpText": "Replace the certificate if it expiries within N days",
            "DefaultValue": "30",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "2935998d-d030-4af6-ad42-39e8b85e2dce",
            "Name": "LE_AWSAccount",
            "Label": "AWS account",
            "HelpText": "An AWS Account that has API access to make Route53 changes. ",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "AmazonWebServicesAccount"
            }
        },
        {
            "Id": "85af482d-e577-40b8-94e5-626e545adab5",
            "Name": "LE_Octopus_APIKey",
            "Label": "Octopus Deploy API key",
            "HelpText": "A Octopus Deploy API key with access to change Certificates in the Certificate Store. ",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "Sensitive"
            }
        },
        {
            "Id": "00d513ed-3d75-48d2-954a-0a0165d85530",
            "Name": "LE_Use_Staging",
            "Label": "Use Lets Encrypt Staging",
            "HelpText": "Should the Certificate be generated using the Lets Encrypt Staging infrastructure?",
            "DefaultValue": "false",
            "DisplaySettings": {
                "Octopus.ControlType": "Checkbox"
            }
        },
        {
            "Id": "f1fd315d-9fc5-4b15-b53c-9381ecc5cb88",
            "Name": "LE_ContactEmailAddress",
            "Label": "Contact Email Address",
            "HelpText": "Email Address",
            "DefaultValue": "#{Octopus.Deployment.CreatedBy.EmailAddress}",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        }
    ],
    "LastModifiedAt": "2020-04-03T13:26:06.262Z",
    "LastModifiedBy": "jeremycade",
    "$Meta": {
        "ExportedAt": "2020-04-03T13:26:06.262Z",
        "OctopusVersion": "2020.1.6",
        "Type": "ActionTemplate"
    },
    "Category": "lets-encrypt"
}