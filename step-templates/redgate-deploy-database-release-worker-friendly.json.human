{
    "Id": "adf9a009-8bbb-4b82-8f3b-6fb12ef4ba18",
    "Name": "Redgate - Deploy from Database Release (Worker Friendly)",
    "Description": "Uses the deployment resources from the 'Redgate - Create Database Release' step to deploy the database changes using Redgate's [SQL Change Automation](http://www.red-gate.com/sca/productpage).

Requires SQL Change Automation version 3.0.2 or later.

*Version date: 2019-07-26*

This step template is worker friendly, you can pass in a package reference rather than having to reference a previous step which downloaded the package. This step requires Octopus Deploy **2019.10.0** or higher.",
    "ActionType": "Octopus.Script",
    "Version": 4,
    "Author": "octobob",
    "Packages": [
      {
        "Id": "cbac673c-43fb-4f6f-8204-31597bb57077",
        "Name": "DLMAutomationPackageName",
        "PackageId": null,
        "FeedId": null,
        "AcquisitionLocation": "Server",
        "Properties": {
          "Extract": "True",
          "SelectionMode": "deferred",
          "PackageParameterName": "DLMAutomationPackageName"
        }
      }
    ],
    "Properties": {
      "Octopus.Action.Script.ScriptBody": "$DlmAutomationModuleName = \"DLMAutomation\"
$SqlChangeAutomationModuleName = \"SqlChangeAutomation\"
$ModulesFolder = \"$Home\\Documents\\WindowsPowerShell\\Modules\"

if ([string]::IsNullOrWhiteSpace($DLMModuleInstallLocation) -eq $false)
{
\tif ((Test-Path $DLMModuleInstallLocation -IsValid) -eq $false)
    {
    \tWrite-Error \"The path $DLMModuleInstallLocation is not valid, please use a relative or absolute path.\"
        exit 1
    }
    
    $ModulesFolder = [System.IO.Path]::GetFullPath($DLMModuleInstallLocation)            
}

Write-Host \"Modules will be installed into $ModulesFolder\"

$LocalModules = (New-Item \"$ModulesFolder\" -ItemType Directory -Force).FullName
$env:PSModulePath = \"$LocalModules;$env:PSModulePath\"

[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

function IsScaAvailable
{
    if ((Get-Module $SqlChangeAutomationModuleName) -ne $null) {
        return $true
    }

    return $false
}

function InstallCorrectSqlChangeAutomation
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false)]
        [Version]$requiredVersion
    )
    
    $moduleName = $SqlChangeAutomationModuleName

    # this will be null if $requiredVersion is not specified - which is exactly what we want
    $maximumVersion = $requiredVersion

    if ($requiredVersion) {
        if ($requiredVersion.Revision -eq -1) {
            #If provided with a 3 part version number (the 4th part, revision, == -1), we should allow any value for the revision
            $maximumVersion = [Version]\"$requiredVersion.$([System.Int32]::MaxValue)\"
        }

        if ($requiredVersion.Major -lt 3) {
            # If the specified version is below V3 then the user is requesting a version of DLMA. We should look for that module name instead
            $moduleName = $DlmAutomationModuleName
        }
    }

    $installedModule = GetHighestInstalledModule $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion

    if (!$installedModule) {
        #Either SCA isn't installed at all or $requiredVersion is specified but that version of SCA isn't installed
        Write-Verbose \"$moduleName $requiredVersion not available - attempting to download from gallery\"
        InstallLocalModule -moduleName $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion
    }
    elseif (!$requiredVersion) {
        #We've got a version of SCA installed, but $requiredVersion isn't specified so we might be able to upgrade
        $newest = GetHighestInstallableModule $moduleName
        if ($newest -and ($installedModule.Version -lt $newest.Version)) {
            Write-Verbose \"Updating $moduleName to version $($newest.Version)\"
            InstallLocalModule -moduleName $moduleName -minimumVersion $newest.Version
        }
    }

    # Now we're done with install/upgrade, try to import the highest available module that matches our version requirements

    # We can't just use -minimumVersion and -maximumVersion arguments on Import-Module because PowerShell 3 doesn't have them,
    # so we have to find the precise matching installed version using our code, then import that specifically. Note that
    # $requiredVersion and $maximumVersion might be null when there's no specific version we need.
    $installedModule = GetHighestInstalledModule $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion

    if (!$installedModule -and !$requiredVersion) {
        #Did not find SCA, and we don't have a required version so we might be able to use an installed DLMA instead.
        Write-Verbose \"$moduleName is not installed - trying to fall back to $DlmAutomationModuleName\"
        $installedModule = GetHighestInstalledModule $DlmAutomationModuleName        
    }
    
    if ($installedModule) {
        Write-Verbose \"Importing installed $($installedModule.Name) version $($installedModule.Version)\"
        Import-Module $installedModule -Force
    }
    else {
        throw \"$moduleName $requiredVersion is not installed, and could not be downloaded from the PowerShell gallery\"
    }
}

function InstallPowerShellGet {
    [CmdletBinding()]
    Param()
    $psget = GetHighestInstalledModule PowerShellGet
    if (!$psget)
    {
        Write-Warning @\"
Cannot access the PowerShell Gallery because PowerShellGet is not installed.
To install PowerShellGet, either upgrade to PowerShell 5 or install the PackageManagement MSI.
See https://docs.microsoft.com/en-us/powershell/gallery/installing-psget for more details.
\"@
        throw \"PowerShellGet is not available\"
    }

    if ($psget.Version -lt [Version]'1.6') {
        #Bootstrap the NuGet package provider, which updates NuGet without requiring admin rights
        Write-Debug \"Installing NuGet package provider\"
        Get-PackageProvider NuGet -ForceBootstrap | Out-Null

        #Use the currently-installed version of PowerShellGet
        Import-PackageProvider PowerShellGet 
        
        #Download the version of PowerShellGet that we actually need
        Write-Debug \"Installing PowershellGet\"
        Save-Module -Name PowerShellGet -Path $LocalModules -MinimumVersion 1.6 -Force -ErrorAction SilentlyContinue
    }

    Write-Debug \"Importing PowershellGet\"
    Import-Module PowerShellGet -MinimumVersion 1.6 -Force
    #Make sure we're actually using the package provider from the imported version of PowerShellGet
    Import-PackageProvider ((Get-Module PowerShellGet).Path) | Out-Null
}

function InstallLocalModule {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $true)]
        [string]$moduleName,
        [Parameter(Mandatory = $false)]
        [Version]$minimumVersion,
        [Parameter(Mandatory = $false)]
        [Version]$maximumVersion
    )
    try {
        InstallPowerShellGet

        Write-Debug \"Install $moduleName $requiredVersion\"
        Save-Module -Name $moduleName -Path $LocalModules -Force -AcceptLicense -MinimumVersion $minimumVersion -MaximumVersion $maximumVersion -ErrorAction Stop
    }
    catch {
        Write-Warning \"Could not install $moduleName $requiredVersion from any registered PSRepository\"
    }
}

function GetHighestInstalledModule {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $true, Position = 0)]
        [string] $moduleName,

        [Parameter(Mandatory = $false)]
        [Version]$minimumVersion,
        [Parameter(Mandatory = $false)]
        [Version]$maximumVersion
    )

    return Get-Module $moduleName -ListAvailable | 
           Where {(!$minimumVersion -or ($_.Version -ge $minimumVersion)) -and (!$maximumVersion -or ($_.Version -le $maximumVersion))} | 
           Sort -Property @{Expression = {[System.Version]($_.Version)}; Descending = $True} |
           Select -First 1
}

function GetHighestInstallableModule {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $true, Position = 0)]
        [string] $moduleName
    )

    try {
        InstallPowerShellGet
        Find-Module SqlChangeAutomation -AllVersions | 
            Sort -Property @{Expression = {[System.Version]($_.Version)}; Descending = $True} |
            Select -First 1   
    }
    catch {
        Write-Warning \"Could not find any suitable versions of $moduleName from any registered PSRepository\"
    }
}

function GetInstalledSqlChangeAutomationVersion {
    $scaModule = (Get-Module $SqlChangeAutomationModuleName)

    if ($scaModule -ne $null) {
        return $scaModule.Version
    }

    $dlmaModule = (Get-Module $DlmAutomationModuleName)

    if ($dlmaModule -ne $null) {
        return $dlmaModule.Version
    }

    return $null
}


$ErrorActionPreference = 'Stop'
$VerbosePreference = 'Continue'

# Set process level FUR environment
$env:REDGATE_FUR_ENVIRONMENT = \"Octopus Step Templates\"

#Helper functions for paramter handling
function Required() {
    Param(
        [Parameter(Mandatory = $false)][string]$Parameter, 
        [Parameter(Mandatory = $true)][string]$Name
    )
    if ([string]::IsNullOrWhiteSpace($Parameter)) { throw \"You must enter a value for '$Name'\" }
}
function Optional() {
    #Default is untyped here - if we specify [string] powershell will convert nulls into empty string
    Param(
        [Parameter(Mandatory = $false)][string]$Parameter, 
        [Parameter(Mandatory = $false)]$Default
    )
    if ([string]::IsNullOrWhiteSpace($Parameter)) { 
        $Default
    } else { 
        $Parameter
    }
}
function RequireBool() {
    Param(
        [Parameter(Mandatory = $false)][string]$Parameter, 
        [Parameter(Mandatory = $true)][string]$Name
    )
    $Result = $False
    if (![bool]::TryParse($Parameter , [ref]$Result )) { throw \"'$Name' must be a boolean value.\" }
    $Result
}
function RequirePositiveNumber() {
    Param(
        [Parameter(Mandatory = $false)][string]$Parameter, 
        [Parameter(Mandatory = $true)][string]$Name
    )
    $Result = 0
    if (![int32]::TryParse($Parameter , [ref]$Result )) { throw \"'$Name' must be a numerical value.\" }
    if ($Result -lt 0) { throw \"'$Name' must be >= 0.\" }
    $Result
}

$SpecificModuleVersion = Optional -Parameter $SpecificModuleVersion
InstallCorrectSqlChangeAutomation -requiredVersion $SpecificModuleVersion

# Check if SQL Change Automation is installed.\t
$powershellModule = Get-Module -Name SqlChangeAutomation\t
if ($powershellModule -eq $null) { \t
    throw \"Cannot find SQL Change Automation on your Octopus Tentacle. If SQL Change Automation is installed, try restarting the Tentacle service for it to be detected.\"\t
}

$currentVersion = $powershellModule.Version\t
$minimumRequiredVersion = [version] '3.0.3'\t
if ($currentVersion -lt $minimumRequiredVersion) { \t
    throw \"This step requires SQL Change Automation version $minimumRequiredVersion or later. The current version is $currentVersion. The latest version can be found at http://www.red-gate.com/sca/productpage\"\t
}

$minimumRequiredVersionDataCompareOptions = [version] '3.3.0'

# Check the parameters.
Required -Parameter $DLMAutomationDeploymentResourcesPath -Name 'Export path'
Required -Parameter $DLMAutomationDatabaseServer -Name  'Target SQL Server instance'
Required -Parameter $DLMAutomationDatabaseName -Name  'Target database name'
$DLMAutomationDatabaseUsername = Optional -Parameter $DLMAutomationDatabaseUsername
$DLMAutomationDatabasePassword = Optional -Parameter $DLMAutomationDatabasePassword
$DLMAutomationSkipPostUpdateSchemaCheck = Optional -Parameter $DLMAutomationSkipPostUpdateSchemaCheck -Default \"False\"
$DLMAutomationQueryBatchTimeout = Optional -Parameter $DLMAutomationQueryBatchTimeout -Default '30'

$skipPostUpdateSchemaCheck = RequireBool -Parameter $DLMAutomationSkipPostUpdateSchemaCheck -Name 'Skip post update schema check'
$queryBatchTimeout = RequirePositiveNumber -Parameter $DLMAutomationQueryBatchTimeout -Name 'Query Batch Timeout'

# Check whether database deployment resources export path exists and is a valid directory path 
if((Test-Path $DLMAutomationDeploymentResourcesPath) -eq $true) {
    if((Get-Item $DLMAutomationDeploymentResourcesPath) -isnot [System.IO.DirectoryInfo]) {
        throw \"The export path is not a valid folder: $DLMAutomationDeploymentResourcesPath\"
    }
} else {
    throw \"The export path folder doesn't exist, or the current Windows account can't access it: $DLMAutomationDeploymentResourcesPath\"
}

# Constructing the unique export path.
$nugetPackageId = $OctopusParameters[\"Octopus.Action.Package[DLMAutomationPackageName].PackageId\"]
$projectId = $OctopusParameters['Octopus.Project.Id']
$releaseNumber = $OctopusParameters['Octopus.Release.Number']
$exportPath = Join-Path (Join-Path (Join-Path $DLMAutomationDeploymentResourcesPath $projectId) $releaseNumber) $nugetPackageId

# Create and test connection to the database.
$databaseConnection = New-DatabaseConnection -ServerInstance $DLMAutomationDatabaseServer `
                                                -Database $DLMAutomationDatabaseName `
                                                -Username $DLMAutomationDatabaseUsername `
                                                -Password $DLMAutomationDatabasePassword | Test-DatabaseConnection

$releaseUrl = $OctopusParameters['Octopus.Web.ServerUri'] + $OctopusParameters['Octopus.Web.DeploymentLink']; 
# Import and deploy the release.
Import-DatabaseReleaseArtifact $exportPath | Use-DatabaseReleaseArtifact -DeployTo $databaseConnection -QueryBatchTimeout $queryBatchTimeout -ReleaseUrl $releaseUrl -SkipPostUpdateSchemaCheck:$skipPostUpdateSchemaCheck",
      "Octopus.Action.Script.Syntax": "PowerShell",
      "Octopus.Action.Script.ScriptSource": "Inline"
    },
    "Parameters": [
      {
        "Id": "57b50569-40cb-42b2-80a0-d607fff366ec",
        "Name": "DLMAutomationDeploymentResourcesPath",
        "Label": "Export path",
        "HelpText": "The path the database deployment resources were exported to.

This should be the same path specified in the \"Redgate - Create Database Release\" step, and must be accessible to all tentacles used in database deployment steps.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "30a84de3-af9a-4c00-b9d4-ad9a96c59df6",
        "Name": "DLMAutomationDatabaseServer",
        "Label": "Target SQL Server instance",
        "HelpText": "The fully qualified SQL Server instance name for the target database.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "9bd39d00-e163-4051-bce5-635cbab28068",
        "Name": "DLMAutomationDatabaseName",
        "Label": "Target database name",
        "HelpText": "The name of the database to deploy changes to. This must be an existing database.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "91c79e89-f988-4ec1-90ec-7ba64e3b7be7",
        "Name": "DLMAutomationDatabaseUsername",
        "Label": "Username (optional)",
        "HelpText": "The SQL Server username used to connect to the database. If you leave this field and 'Password' blank, Windows authentication will be used to connect instead, using the account that runs the Tentacle service.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "2074e5f7-9987-411a-bbfe-87ad28c4d3ab",
        "Name": "DLMAutomationDatabasePassword",
        "Label": "Password (optional)",
        "HelpText": "You must enter a password if you entered a username.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "Sensitive"
        }
      },
      {
        "Id": "da1aa9b7-3e11-4982-b027-274d6b6c7561",
        "Name": "DLMAutomationQueryBatchTimeout",
        "Label": "Query batch timeout (in seconds)",
        "HelpText": "The execution timeout, in seconds, for each batch of queries in the update script. The default value is 30 seconds. A value of zero indicates no execution timeout.",
        "DefaultValue": "30",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "411b3ad1-4968-4cdb-b47b-3ddb4eab0468",
        "Name": "DLMAutomationSkipPostUpdateSchemaCheck",
        "Label": "Skip post update schema check",
        "HelpText": "Don't check that the target database has the correct schema after the update has run.",
        "DefaultValue": "False",
        "DisplaySettings": {
          "Octopus.ControlType": "Checkbox"
        }
      },
      {
        "Id": "e824b03b-802c-45c9-ba1e-c1540888789a",
        "Name": "SpecificModuleVersion",
        "Label": "SQL Change Automation version (optional)",
        "HelpText": "If you wish to use a specific version of SQL Change Automation rather than the latest, enter the version number here.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "25a16ceb-d668-4ea9-a645-fbf2001c1615",
        "Name": "DLMAutomationPackageName",
        "Label": "Package",
        "HelpText": "The package which is being deployed",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "Package"
        }
      },
      {
        "Id": "61adc6ec-4216-41c8-ab30-dba6cfcd37d0",
        "Name": "DLMModuleInstallLocation",
        "Label": "SQL Change Automation Install Location (optional)",
        "HelpText": "The SQL Change Automation cmdlets will be downloaded from the [PowerShell gallery](https://www.powershellgallery.com/packages/SqlChangeAutomation).  Please specify the folder folder where those packages will be saved to.  It can be relative or absolute.


If this is empty it will default `$Home\\Documents\\WindowsPowerShell\\Modules` which is the [recommended location](https://docs.microsoft.com/en-us/powershell/scripting/developer/module/installing-a-powershell-module?view=powershell-7#where-to-install-modules) from Microsoft.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      }
    ],
    "LastModifiedBy": "octobob",
    "$Meta": {
      "ExportedAt": "2020-05-01T15:21:38.717Z",
      "OctopusVersion": "2020.1.10",
      "Type": "ActionTemplate"
    },
    "Category":  "redgate"
  }
