{
    "Id": "24095ff8-a851-498f-8105-667bd76733eb",
    "Name": "MariaDB - Add Database User To Role",
    "Description": "Adds a database user to a role",
    "ActionType": "Octopus.Script",
    "Version": 5,
    "Author": "twerthi",
    "Packages": [],
    "Properties": {
      "Octopus.Action.Script.ScriptSource": "Inline",
      "Octopus.Action.Script.Syntax": "PowerShell",
      "Octopus.Action.Script.ScriptBody": "# Define functions
function Get-ModuleInstalled 
{
    # Define parameters
    param(
        $PowerShellModuleName
    )

    # Check to see if the module is installed
    if ($null -ne (Get-Module -ListAvailable -Name $PowerShellModuleName))
    {
        # It is installed
        return $true
    }
    else
    {
        # Module not installed
        return $false
    }
}

function Install-PowerShellModule
{
    # Define parameters
    param(
        $PowerShellModuleName,
        $LocalModulesPath
    )

\t# Check to see if the package provider has been installed
    if ((Get-NugetPackageProviderNotInstalled) -ne $false)
    {
    \t# Display that we need the nuget package provider
        Write-Host \"Nuget package provider not found, installing ...\"
        
        # Install Nuget package provider
        Install-PackageProvider -Name Nuget -Force
    }

\t# Save the module in the temporary location
    Save-Module -Name $PowerShellModuleName -Path $LocalModulesPath -Force
}

function Get-NugetPackageProviderNotInstalled
{
\t# See if the nuget package provider has been installed
    return ($null -eq (Get-PackageProvider -ListAvailable -Name Nuget -ErrorAction SilentlyContinue))
}

function Get-UserInRole
{
\t# Define parameters
    param ($UserHostname,
    $Username,
    $RoleHostName,
    $RoleName)
    
\t# Execute query
    $grants = Invoke-SqlQuery \"SHOW GRANTS FOR '$Username'@'$UserHostName';\"

    # Loop through Grants
    foreach ($grant in $grants.ItemArray)
    {
        # Check grant
        if ($grant -eq \"GRANT $RoleName TO '$Username'@'$UserHostName'\")
        {
            # They're in the group
            return $true
        }
    }

    # Not found
    return $false
}

# Define PowerShell Modules path
$LocalModules = (New-Item \"$PSScriptRoot\\Modules\" -ItemType Directory -Force).FullName
$env:PSModulePath = \"$LocalModules$([System.IO.Path]::PathSeparator)$env:PSModulePath\"
$PowerShellModuleName = \"SimplySql\"

# Set secure protocols
[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls11 -bor [System.Net.SecurityProtocolType]::Tls12

# Check to see if SimplySql module is installed
if ((Get-ModuleInstalled -PowerShellModuleName $PowerShellModuleName) -ne $true)
{
    # Tell user what we're doing
    Write-Output \"PowerShell module $PowerShellModuleName is not installed, downloading temporary copy ...\"

    # Install temporary copy
    Install-PowerShellModule -PowerShellModuleName $PowerShellModuleName -LocalModulesPath $LocalModules
}

# Display
Write-Output \"Importing module $PowerShellModuleName ...\"

# Check to see if it was downloaded
if ((Test-Path -Path \"$LocalModules\\$PowerShellModuleName\") -eq $true)
{
\t# Use specific location
    $PowerShellModuleName = \"$LocalModules\\$PowerShellModuleName\"
}

# Declare initial connection string
$connectionString = \"Server=$addMariaDBServerName;Port=$addMariaDBServerPort;\"

# Update the connection string based on authentication method
switch ($mariaDbAuthenticationMethod) {
    \"awsiam\" {
        # Region is part of the RDS endpoint, extract
        $region = ($addMariaDBServerName.Split(\".\"))[2]

        Write-Host \"Generating AWS IAM token ...\"
        $addLoginPasswordWithAddRoleRights = (aws rds generate-db-auth-token --hostname $addMariaDBServerName --region $region --port $addMariaDBServerPort --username $addLoginWithAddRoleRights)
        
        # Append remaining portion of connection string
        $connectionString += \";Uid=$addLoginWithAddRoleRights;Pwd=`\"$addLoginPasswordWithAddRoleRights`\";\"

        break
    }
    \"usernamepassword\" {
        # Append remaining portion of connection string
        $connectionString += \";Uid=$addLoginWithAddRoleRights;Pwd=`\"$addLoginPasswordWithAddRoleRights`\";\"
        
        break    
    }
    \"windowsauthentication\" {
        # Append remaining portion of connection string
        $connectionString += \";IntegratedSecurity=yes;Uid=$addLoginWithAddRoleRights;\"

        break
    }
}

# Import the module
Import-Module -Name $PowerShellModuleName

try
{
    # Connect to MySQL
    Open-MySqlConnection -ConnectionString $connectionString

    # See if database exists
    $userInRole = Get-UserInRole -UserHostname $addUserHostname -Username $addUsername -RoleName $addRoleName

    if ($userInRole -eq $false)
    {
        # Create database
        Write-Output \"Adding user $addUsername@$addUserHostName to role $addRoleName ...\"
        $executionResults = Invoke-SqlUpdate \"GRANT $addRoleName TO '$addUsername'@'$addUserHostName';\"

        # See if it was created
        $userInRole = Get-UserInRole -UserHostname $addUserHostname -Username $addUsername -RoleName $addRoleName
            
        # Check array
        if ($userInRole -eq $true)
        {
            # Success
            Write-Output \"$addUserName@$addUserHostName added to $addRoleName successfully!\"
        }
        else
        {
            # Failed
            Write-Error \"Failure adding $addUserName@$addUserHostName to $addRoleName!\"
        }
    }
    else
    {
    \t# Display message
        Write-Output \"User $addUsername@$addUserHostName is already in role $addRoleName\"
    }
}
finally
{
    Close-SqlConnection
}


"
    },
    "Parameters": [
      {
        "Id": "b6384c33-5196-40a4-b67f-f904eccbd795",
        "Name": "addMariaDBServerName",
        "Label": "MariaDB Server name",
        "HelpText": "Name of the MariaDB database server",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "6b8a13d6-7b7a-4cf2-8864-26b0c922a27f",
        "Name": "addMariaDBServerPort",
        "Label": "Port",
        "HelpText": "Port the MariaDB listens on.",
        "DefaultValue": "3306",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "a8582fbc-4272-4098-8a99-6a28c9259958",
        "Name": "addLoginWithAddRoleRights",
        "Label": "Login name",
        "HelpText": "Login name of a user that can add roles to other users.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "d8e07293-a942-4ab3-9ef2-59092cc1fdc6",
        "Name": "addLoginPasswordWithAddRoleRights",
        "Label": "Login password",
        "HelpText": "Password for the login account.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "Sensitive"
        }
      },
      {
        "Id": "846984d9-3661-4938-9cd7-c6e2daa87c43",
        "Name": "addUsername",
        "Label": "User name",
        "HelpText": "Name of the user to add the role to.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "ab3c26b1-d64b-4257-bd88-0b316ae21655",
        "Name": "addUserHostname",
        "Label": "User Hostname",
        "HelpText": "Hostname of the user.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
    {
        "Id": "da07dc32-a66d-453d-9dcb-e78ea525a31f",
        "Name": "addRoleName",
        "Label": "Role name",
        "HelpText": "Name of the role to add to the user.",
        "DefaultValue": "",
        "DisplaySettings": {
            "Octopus.ControlType": "SingleLineText"
        }
    },
    {
        "Id": "0d29c6ce-724c-47bc-a4ef-42b123cf02bb",
        "Name": "mariaDbAuthenticationMethod",
        "Label": "Authentication Method",
        "HelpText": "Method used to authenticate to the MariaDB server.",
        "DefaultValue": "usernamepassword",
        "DisplaySettings": {
            "Octopus.ControlType": "Select",
            "Octopus.SelectOptions": "awsiam|AWS EC2 IAM Role
usernamepassword|Username\\Password"
        }
    }
    ],
    "LastModifiedBy": "coryreid",
    "StepPackageId": "Octopus.Script",
    "$Meta": {
        "ExportedAt": "2022-07-12T19:52:36.677Z",
        "OctopusVersion": "2022.3.2617-hotfix.4278",
        "Type": "ActionTemplate"
    },
    "Category": "mariadb"
  }
