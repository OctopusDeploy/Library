{
  "Id": "4fa6d062-d4da-4a02-849e-dec804554453",
  "Name": "MySQL - Backup Database",
  "Description": "Backs up a MySQL database on a windows instance hosting MySQL. ",
  "ActionType": "Octopus.Script",
  "Version": 1,
  "Author": "adamoctoclose",
  "CommunityActionTemplateId": null,
  "Packages": [],
  "Properties": {
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.Syntax": "PowerShell",
  "Octopus.Action.Script.ScriptBody": "# Define functions
function Get-ModuleInstalled
{
    # Define parameters
    param(
        $PowerShellModuleName
    )

    # Check to see if the module is installed
    if ($null -ne (Get-Module -ListAvailable -Name $PowerShellModuleName))
    {
        # It is installed
        return $true
    }
    else
    {
        # Module not installed
        return $false
    }
}

function Install-PowerShellModule
{
    # Define parameters
    param(
        $PowerShellModuleName,
        $LocalModulesPath
    )

\t# Check to see if the package provider has been installed
    if ((Get-NugetPackageProviderNotInstalled) -ne $false)
    {
    \t# Display that we need the nuget package provider
        Write-Host \"Nuget package provider not found, installing ...\"
        
        # Install Nuget package provider
        Install-PackageProvider -Name Nuget -Force
    }

\t# Save the module in the temporary location
    Save-Module -Name $PowerShellModuleName -Path $LocalModulesPath -Force
}

function Get-NugetPackageProviderNotInstalled
{
\t# See if the nuget package provider has been installed
    return ($null -eq (Get-PackageProvider -ListAvailable -Name Nuget -ErrorAction SilentlyContinue))
}

function Get-DatabaseExists
{
\t# Define parameters
    param ($DatabaseName)
    
\t# Execute query
    return Invoke-SqlQuery \"SHOW DATABASES LIKE '$DatabaseName';\"
}

# Define PowerShell Modules path
$LocalModules = (New-Item \"$PSScriptRoot\\Modules\" -ItemType Directory -Force).FullName
$env:PSModulePath = \"$LocalModules;$env:PSModulePath\"
$PowerShellModuleName = \"SimplySql\"

# Set secure protocols
[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls11 -bor [System.Net.SecurityProtocolType]::Tls12

# Check to see if SimplySql module is installed
if ((Get-ModuleInstalled -PowerShellModuleName $PowerShellModuleName) -ne $true)
{
    # Tell user what we're doing
    Write-Output \"PowerShell module $PowerShellModuleName is not installed, downloading temporary copy ...\"

    # Install temporary copy
    Install-PowerShellModule -PowerShellModuleName $PowerShellModuleName -LocalModulesPath $LocalModules
}

# Display
Write-Output \"Importing module $PowerShellModuleName ...\"

# Check to see if it was downloaded
if ((Test-Path -Path \"$LocalModules\\$PowerShellModuleName\") -eq $true)
{
\t# Import from temp location
    $PowerShellModuleName =  \"$LocalModules\\$PowerShellModuleName\"
}

# Import the module
Import-Module -Name $PowerShellModuleName


# Create credential object for the connection
#$SecurePassword = ConvertTo-SecureString $BackupMySQL_Password -AsPlainText -Force
#$ServerCredential = New-Object System.Management.Automation.PSCredential ($BackupMySQL_Username, $BackupMySQL_Password)

try
{


\t# Connect to MySQL
    $connectionString = \"Server=$BackupMySQL_ServerName;Port=$BackupMySQL_Port;Uid=$BackupMySQL_Username;Pwd=$BackupMySQL_Password;\"

    if ($BackupMySQL_UseSSL -eq \"True\")
    {
\t\t# Append to connection string
        $connectionString += \"SslMode=Required;\"
    }
    else
    {
    \t# Disable ssl
        $connectionString += \"SslMode=none;\"
    }
    
    Open-MySqlConnection -ConnectionString $connectionString

    # See if database exists
    $databaseExists = Get-DatabaseExists -DatabaseName $BackupMySQL_DatabaseName

    if ($databaseExists.ItemArray.Count -eq 0)
    {
        # Display message
        Write-Error \"Database $BackupMySQL_DatabaseName doesn't exist.\"
 
    }
    else
    {

        cd $BackupMySQL_MySQLPath

        $backupname = '{0}{1}-{2}.sql' -f ($BackupMySQL_BackupDirectory, $BackupMySQL_DatabaseName ,(Get-Date -Format FileDatetime))

        .\\mysqldump.exe --databases $BackupMySQL_DatabaseName > $backupname
                
        # Success
        Write-Output \"$BackupMySQL_DatabaseName was backed up!\"
    }
}
finally
{
    Close-SqlConnection
}
"
},
"Parameters": [
  {
    "Id": "7030ad54-4e10-4854-998a-ca91e3b490a3",
    "Name": "BackupMySQL_ServerName",
    "Label": "Server",
    "HelpText": "Name or IP of the MySQL server",
    "DefaultValue": "",
    "DisplaySettings": {
      "Octopus.ControlType": "SingleLineText"
    }
  },
  {
    "Id": "07dbf251-a982-4cc5-b6c1-dc0af50c519c",
    "Name": "BackupMySQL_Username",
    "Label": "Username",
    "HelpText": "\tUsername with rights to dump database",
    "DefaultValue": "",
    "DisplaySettings": {
      "Octopus.ControlType": "SingleLineText"
    }
  },
  {
    "Id": "ac42a150-b7e7-4414-9dec-f18e105eaedf",
    "Name": "BackupMySQL_Password",
    "Label": "Password",
    "HelpText": "Password for the user account",
    "DefaultValue": "",
    "DisplaySettings": {
      "Octopus.ControlType": "Sensitive"
    }
  },
  {
    "Id": "62ffb949-c5db-4151-bb29-47a37586bda5",
    "Name": "BackupMySQL_DatabaseName",
    "Label": "Database Name",
    "HelpText": "Name of the database to backup",
    "DefaultValue": "",
    "DisplaySettings": {
      "Octopus.ControlType": "SingleLineText"
    }
  },
  {
    "Id": "c54832b1-571f-4475-9159-6a7342a67982",
    "Name": "BackupMySQL_Port",
    "Label": "Port",
    "HelpText": "Port number for the MySQL server",
    "DefaultValue": "",
    "DisplaySettings": {
      "Octopus.ControlType": "SingleLineText"
    }
  },
  {
    "Id": "a33dc26c-15b3-4b5e-a62f-7a5e97576bcc",
    "Name": "BackupMySQL_UseSSL",
    "Label": "Use SSL",
    "HelpText": "Check this box to force the use of SSL.",
    "DefaultValue": "",
    "DisplaySettings": {
      "Octopus.ControlType": "Checkbox"
    }
  },
  {
    "Id": "fc2c1a2f-43ba-4878-8e74-b88dad96c5d2",
    "Name": "BackupMySQL_MySQLPath",
    "Label": "MySQL Path",
    "HelpText": "Path to binaries e.g. C:\\Program Files\\MySQL\\MySQL Server 5.6\\bin
If binaries don't exist on the target machine the backup will fail.",
    "DefaultValue": "C:\\Program Files\\MySQL\\MySQL Server 5.6\\bin",
    "DisplaySettings": {
      "Octopus.ControlType": "SingleLineText"
    }
  },
  {
    "Id": "39063215-b069-4e51-b202-65060db9fd20",
    "Name": "BackupMySQL_BackupDirectory",
    "Label": "Backup Directory",
    "HelpText": "Location to store backup file",
    "DefaultValue": "",
    "DisplaySettings": {
      "Octopus.ControlType": "SingleLineText"
    }
  }
],
  "$Meta": {
    "ExportedAt": "2020-08-11T15:11:43.135Z",
    "OctopusVersion": "2020.3.2",
    "Type": "ActionTemplate"
  },
  "LastModifiedBy": "adamoctoclose",
  "Category": "mysql"
}
