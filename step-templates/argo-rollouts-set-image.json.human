{
  "Id": "5449ea73-7f77-45d7-a4d7-e56286d679f5",
  "Name": "Argo - Rollouts Set Image",
  "Description": "Sets a new image tag on an Argo Rollout.",
  "ActionType": "Octopus.KubernetesRunScript",
  "Version": 1,
  "CommunityActionTemplateId": null,
  "Packages": [
    {
      "Id": "67a06773-8f2b-49a7-95bb-1e087a38b3b9",
      "Name": "Argo.Rollout.Image",
      "PackageId": null,
      "FeedId": null,
      "AcquisitionLocation": "NotAcquired",
      "Properties": {
        "Extract": "True",
        "SelectionMode": "deferred",
        "PackageParameterName": "Argo.Rollout.Image",
        "Purpose": ""
      }
    }
  ],
  "GitDependencies": [],
  "Properties": {
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptBody": "function Install-Plugin
{
# Define parameters
\tparam ($PluginUri,
           $PluginFilename
    )
    
    # Check for plugin folder
    if ((Test-Path -Path \"$PWD/plugins\") -eq $false)
    {
\t\t# Create new plugins folder
        New-Item -Path \"$PWD/plugins\" -ItemType \"Directory\"
        
        # Add to path
        $env:PATH = \"$($PWD)/plugins$([IO.Path]::PathSeparator)\" + $env:PATH
    }

\t# Download plugin
\tInvoke-WebRequest -Uri \"$PluginUri\" -OutFile \"$PWD/plugins/$PluginFilename\"

\t# Check for Linux
    if ($IsLinux)
    {
\t\t# Make it executable
    \tchmod +x ./plugins/$PluginFilename
    }
    
    if ($IsWindows)
    {
    \t# Update filename to include .exe extension
        Rename-Item -Path \"$PWD/plugins/$PluginFilename\" -NewName \"$PWD/plugins/$($PluginFilename).exe\"
    }    
}

# When listing plugins, kubectl looks in all paths defined in $env:PATH and will fail if the path does not exist
function Verify-Path-Variable
{
\t# Get current path and split into array
    $paths = $env:PATH.Split([IO.Path]::PathSeparator)
    $verifiedPaths = @()
    
    # Loop through paths
    foreach ($path in $paths)
    {
    \t# Check for existence
        if ((Test-Path -Path $path) -eq $true)
        {
        \t# Add to verified
            $verifiedPaths += $path
        }
    }
    
    # Return verified paths
    return ($verifiedPaths -join [IO.Path]::PathSeparator)
}

function Get-Plugin-Installed
{
\t# Define parameters
    param (
    \t$PluginName,
        $InstalledPlugins
        )
        
   \t$isInstalled = $false
   
\tforeach ($plugin in $installedPlugins)
   \t{
\t\tif ($plugin -like \"$($PluginName)*\")
        {
        \t$isInstalled = $true
          \tbreak
        }
\t}
    
    return $isInstalled
}

# Check to see if $IsWindows is available
if ($null -eq $IsWindows) {
    Write-Host \"Determining Operating System...\"
    $IsWindows = ([System.Environment]::OSVersion.Platform -eq \"Win32NT\")
    $IsLinux = ([System.Environment]::OSVersion.Platform -eq \"Unix\")
}

# Fix ANSI Color on PWSH Core issues when displaying objects
if ($PSEdition -eq \"Core\") {
    $PSStyle.OutputRendering = \"PlainText\"
}

# Check to see if it's running on Windows
if ($IsWindows) {
    # Disable the progress bar so downloading files via Invoke-WebRequest are faster
    $ProgressPreference = 'SilentlyContinue'
}

# Set TLS
[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls11 -bor [System.Net.SecurityProtocolType]::Tls12

# Verify all PATH variables are avaialable
$env:PATH = Verify-Path-Variable
if ($IsLinux)
{
\t$pluginUri = \"https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64\"
}

if ($IsWindows)
{
\t$pluginUri = \"https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-windows-amd64\"
}


try 
{
    # Check to see if plugins are installed
    $pluginList = (kubectl plugin list --name-only=true 2>&1)

    # This is the path that Linux will take
    if ($lastExitCode -ne 0 -and $pluginList.Exception.Message -eq \"error: unable to find any kubectl plugins in your PATH\") 
    {
        # Install the plugin
        Install-Plugin -PluginUri $pluginUri -PluginFilename \"kubectl-argo-rollouts\"
    }
    else
    {
        # Parse list
    \t$pluginList = $pluginList.Split(\"`n\", [System.StringSplitOptions]::RemoveEmptyEntries)
        
        if ((Get-Plugin-Installed -PluginName \"kubectl-argo-rollouts\" -InstalledPlugins $pluginList) -eq $false)
        {
        \tInstall-Plugin -PluginUri $pluginUri -PluginFilename \"kubectl-argo-rollouts\"
        }
        else
        {
        \tWrite-Host \"Argo Rollout kubectl plugin found ...\"
        }
    }
}
catch
{
\t# On Windows, the executable will cause an error if no plugins found so this the path Windows will take
    if ($_.Exception.Message -eq \"error: unable to find any kubectl plugins in your PATH\")
    {
      Install-Plugin -PluginUri $pluginUri -PluginFilename \"kubectl-argo-rollouts\"    
    }
    else
    {
    \t# Something else happened, we need to surface the error
        throw
    }
}

# Get variables
$rolloutName = $OctopusParameters['Argo.Rollout.Name']
$rolloutNamespace = $OctopusParameters['Argo.Rollout.Namespace']
$containerName = $OctopusParameters[\"Argo.Rollout.Container.Name\"]
$imageName = $OctopusParameters[\"Octopus.Action.Package[Argo.Rollout.Image].PackageId\"]
$imageTag = $OctopusParameters[\"Octopus.Action.Package[Argo.Rollout.Image].PackageVersion\"]

# Create arguments array
$kubectlArguments = @(\"argo\", \"rollouts\", \"set\", \"image\", $rolloutName, \"$containerName=`\"$($imageName):$($imageTag)`\"\", \"--namespace\", $rolloutNamespace)

# Set image
kubectl $kubectlArguments"
  },
  "Parameters": [
    {
      "Id": "892ac50a-e53c-47e5-997d-0ce1935b7303",
      "Name": "Argo.Rollout.Name",
      "Label": "Rollout Name",
      "HelpText": "Name of the Argo Rollout to set the image on.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "a08c104a-3877-4989-9436-bf582b3a8505",
      "Name": "Argo.Rollout.Namespace",
      "Label": "Namespace",
      "HelpText": "The namespace to execute the command against.",
      "DefaultValue": "default",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "05bf80a9-0419-4d8d-b9ca-457d66a2edb0",
      "Name": "Argo.Rollout.Image",
      "Label": "Image",
      "HelpText": "Select the image to update the rollout to.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Package"
      }
    },
    {
      "Id": "115ebf6d-5613-4131-83f5-03d74fbc0f14",
      "Name": "Argo.Rollout.Container.Name",
      "Label": "Container Name",
      "HelpText": "Name of the container to update the image tag on.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "StepPackageId": "Octopus.KubernetesRunScript",
  "$Meta": {
    "ExportedAt": "2024-06-06T19:56:12.397Z",
    "OctopusVersion": "2024.1.12815",
    "Type": "ActionTemplate"
  },
  "LastModifiedBy": "twerthi",
  "Category": "argo"
}
