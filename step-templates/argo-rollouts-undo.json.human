{
  "Id": "e75786e1-ef06-4ce7-a831-ccde04927c4c",
  "Name": "Argo - Rollouts Undo",
  "Description": "Rollback to the previous rollout.",
  "ActionType": "Octopus.KubernetesRunScript",
  "Version": 1,
  "CommunityActionTemplateId": null,
  "Packages": [],
  "GitDependencies": [],
  "Properties": {
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptBody": "# Supress info messages written to stderr
Write-Host \"##octopus[stderr-progress]\"

# Installs the Argo Rollouts plugin
function Install-Plugin
{
# Define parameters
\tparam ($PluginUri,
           $PluginFilename
    )
    
    # Check for plugin folder
    if ((Test-Path -Path \"$PWD/plugins\") -eq $false)
    {
\t\t# Create new plugins folder
        New-Item -Path \"$PWD/plugins\" -ItemType \"Directory\"
        
        # Add to path
        $env:PATH = \"$($PWD)/plugins$([IO.Path]::PathSeparator)\" + $env:PATH
    }

\t# Download plugin
\tInvoke-WebRequest -Uri \"$PluginUri\" -OutFile \"$PWD/plugins/$PluginFilename\"

\t# Make file executable
    if ($IsLinux)
    {
\t\t# Make it executable
    \tchmod +x ./plugins/$PluginFilename
    }
    
    if ($IsWindows)
    {
    \t# Update filename to include .exe extension
        Rename-Item -Path \"$PWD/plugins/$PluginFilename\" -NewName \"$PWD/plugins/$($PluginFilename).exe\"
    }
}

# When listing plugins, kubectl looks in all paths defined in $env:PATH and will fail if the path does not exist
function Verify-Path-Variable
{
\t# Get current path and split into array
    $paths = $env:PATH.Split([IO.Path]::PathSeparator)
    $verifiedPaths = @()
    
    # Loop through paths
    foreach ($path in $paths)
    {
    \t# Check for existence
        if ((Test-Path -Path $path) -eq $true)
        {
        \t# Add to verified
            $verifiedPaths += $path
        }
    }
    
    # Return verified paths
    return ($verifiedPaths -join [IO.Path]::PathSeparator)
}

function Get-Plugin-Installed
{
\t# Define parameters
    param (
    \t$PluginName,
        $InstalledPlugins
        )
        
   \t$isInstalled = $false
   
\tforeach ($plugin in $installedPlugins)
   \t{
\t\tif ($plugin -like \"$($PluginName)*\")
        {
        \t$isInstalled = $true
          \tbreak
        }
\t}
    
    return $isInstalled
}

# Check to see if $IsWindows is available
if ($null -eq $IsWindows) {
    Write-Host \"Determining Operating System...\"
    $IsWindows = ([System.Environment]::OSVersion.Platform -eq \"Win32NT\")
    $IsLinux = ([System.Environment]::OSVersion.Platform -eq \"Unix\")
}

# Fix ANSI Color on PWSH Core issues when displaying objects
if ($PSEdition -eq \"Core\") {
    $PSStyle.OutputRendering = \"PlainText\"
}

# Check to see if it's running on Windows
if ($IsWindows) {
    # Disable the progress bar so downloading files via Invoke-WebRequest are faster
    $ProgressPreference = 'SilentlyContinue'
}

# Set TLS
[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls11 -bor [System.Net.SecurityProtocolType]::Tls12

# Verify all PATH variables are avaialable
$env:PATH = Verify-Path-Variable
if ($IsLinux)
{
\t$pluginUri = \"https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64\"
}

if ($IsWindows)
{
\t$pluginUri = \"https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-windows-amd64\"
}

try 
{
    # Check to see if plugins are installed
    $pluginList = (kubectl plugin list 2>&1)

    # This is the path that Linux will take
    if ($lastExitCode -ne 0 -and $pluginList.Exception.Message -eq \"error: unable to find any kubectl plugins in your PATH\") 
    {
        Install-Plugin -PluginUri $pluginUri -PluginFilename \"kubectl-argo-rollouts\"
    }
    else
    {
        # Parse list
    \t$pluginList = $pluginList.Split(\"`n\", [System.StringSplitOptions]::RemoveEmptyEntries)
        
        if ((Get-Plugin-Installed -PluginName \"kubectl-argo-rollouts\" -InstalledPlugins $pluginList) -eq $false)
        {
        \tInstall-Plugin -PluginUri $pluginUri -PluginFilename \"kubectl-argo-rollouts\"
        }
        else
        {
        \tWrite-Host \"Argo Rollout kubectl plugin found ...\"
        }
    }    
}
catch
{
\t# On Windows, the executable will cause an error if no plugins found so this the path Windows will take
    if ($_.Exception.Message -eq \"error: unable to find any kubectl plugins in your PATH\")
    {
      Install-Plugin -PluginUri $pluginUri -PluginFilename \"kubectl-argo-rollouts\"    
    }
    else
    {
    \t# Something else happened, we need to surface the error
        throw
    }
}

# Get parameters
$rolloutsName = $OctopusParameters['Argo.Rollout.Name']
$rolloutsNamespace = $OctopusParameters['Argo.Rollout.Namespace']
$rolloutRevision = $OctopusParameters['Argo.Rollout.Revision']

# Create arguments array
$kubectlArguments = @(\"argo\", \"rollouts\", \"undo\", $rolloutsName, \"--namespace\", $rolloutsNamespace)

# Check for revision
if (![string]::IsNullOrWhitespace($rolloutRevision))
{
\t# Add argument
    $kubectlArguments += @(\"--to-revision=$rolloutRevision\")
}

# Pause rollout
kubectl $kubectlArguments

if ($lastExitCode -ne 0)
{
\tWrite-Error \"Rollout command failed!\"
}"
  },
  "Parameters": [
    {
      "Id": "f2c7fa50-2faf-4d16-affd-13c00a72afef",
      "Name": "Argo.Rollout.Name",
      "Label": "Rollout Name",
      "HelpText": "Name of the Argo Rollout to Undo",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "0910eda0-93f4-4f31-85bd-fafd2d39d3ac",
      "Name": "Argo.Rollout.Namespace",
      "Label": "Namespace",
      "HelpText": "The namespace where the rollout exists.",
      "DefaultValue": "default",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "b7fb60af-72fc-4a94-b242-40397941aa39",
      "Name": "Argo.Rollout.Revision",
      "Label": "Revision",
      "HelpText": "Revision number to revert to.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "StepPackageId": "Octopus.KubernetesRunScript",
  "$Meta": {
    "ExportedAt": "2024-06-06T20:14:10.831Z",
    "OctopusVersion": "2024.1.12815",
    "Type": "ActionTemplate"
  },
  "LastModifiedBy": "twerthi",
  "Category": "argo"
}
