{
    "Id": "6f59f8aa-b2db-4f7a-b02d-a72c13d386f0",
    "Name": "Azure Key Vault - Retrieve Secrets",
    "Description": "This step retrieves one or more secrets from an Azure Key Vault and creates [sensitive output variables](https://octopus.com/docs/projects/variables/output-variables#sensitive-output-variables) for each value retrieved. These values can be used in other steps in your deployment or runbook process.

You can retrieve secrets with a specific version, and you can choose a custom output variable name for each secret.

---

**Required:** 
- An azure account with permissions to retrieve secrets from the Azure Key Vault.
- The`Az.KeyVault` PowerShell module installed on the target or worker. If the module can't be found, the step will fail. *The `Az` module(s) can be installed from the [PowerShell gallery](https://www.powershellgallery.com/packages/Az)*

Notes:

- Tested on Octopus `2021.1`.
- Tested with both Windows PowerShell and PowerShell Core on Linux.

",
    "ActionType": "Octopus.AzurePowerShell",
    "Version": 2,
    "CommunityActionTemplateId": null,
    "Packages": [],
    "Properties": {
      "Octopus.Action.Script.ScriptSource": "Inline",
      "Octopus.Action.Script.Syntax": "PowerShell",
      "OctopusUseBundledTooling": "False",
      "Octopus.Action.Script.ScriptBody": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$ErrorActionPreference = 'Stop'

# Variables
$AzVaultModuleName = \"Az.KeyVault\"
$AzureKeyVaultName = $OctopusParameters[\"Azure.KeyVault.RetrieveSecrets.VaultName\"]
$VaultSecretNames = $OctopusParameters[\"Azure.KeyVault.RetrieveSecrets.VaultSecrets\"]
$AzVaultModuleSpecificVersion = $OctopusParameters[\"Azure.KeyVault.RetrieveSecrets.AzModule.SpecificVersion\"]
$AzVaultModuleCustomInstallLocation = $OctopusParameters[\"Azure.KeyVault.RetrieveSecrets.AzModule.CustomInstallLocation\"]
$PrintVariableNames = $OctopusParameters[\"Azure.KeyVault.RetrieveSecrets.PrintVariableNames\"]

# Validation
if ([string]::IsNullOrWhiteSpace($AzureKeyVaultName)) {
    throw \"Required parameter Azure.KeyVault.RetrieveSecrets.VaultName not specified\"
}
if ([string]::IsNullOrWhiteSpace($VaultSecretNames)) {
    throw \"Required parameter Azure.KeyVault.RetrieveSecrets.VaultSecrets not specified\"
}

if ([string]::IsNullOrWhiteSpace($AzVaultModuleSpecificVersion) -eq $False) {
    $requiredVersion = [Version]$AzVaultModuleSpecificVersion
}

# Cross-platform bits
$WindowsPowerShell = $True
if ($PSEdition -eq \"Core\") {
    $WindowsPowerShell = $False
}

### Helper functions
function Get-Module-CrossPlatform {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $true, Position = 0)]
        [string] $Name
    )

    $module = Get-Module -Name $Name -ListAvailable
    if($WindowsPowerShell -eq $True -and $null -eq $module) {
        $module = Get-InstalledModule -Name $Name
    }

    return $module
}

$PowerShellModuleName = $AzVaultModuleName

# Check for Custom install location specified for AzVaultModule
if ([string]::IsNullOrWhiteSpace($AzVaultModuleCustomInstallLocation) -eq $false) {
    if ((Test-Path $AzVaultModuleCustomInstallLocation -IsValid) -eq $false) {
        throw \"The path $AzVaultModuleCustomInstallLocation is not valid, please use a relative or absolute path.\"
    }
    
    $AzVaultModulesFolder = [System.IO.Path]::GetFullPath($AzVaultModuleCustomInstallLocation)            
    $LocalModules = (New-Item \"$AzVaultModulesFolder\" -ItemType Directory -Force).FullName
    $env:PSModulePath = $LocalModules + [System.IO.Path]::PathSeparator + $env:PSModulePath

    # Check to see if there
    if ((Test-Path -Path \"$LocalModules/$AzVaultModuleName\") -eq $true)
    {
        # Use specific location
        $PowerShellModuleName = \"$LocalModules/$PowerShellModuleName\"
    }
}

# Import module
if([string]::IsNullOrWhiteSpace($AzVaultModuleSpecificVersion)) {
    Write-Host \"Importing module $PowerShellModuleName ...\"
    Import-Module -Name $PowerShellModuleName
}
else {
    Write-Host \"Importing module $PowerShellModuleName ($AzVaultModuleSpecificVersion)...\"
    Import-Module -Name $PowerShellModuleName -RequiredVersion $requiredVersion
}

# Check if Az.Vault Module is installed.
$azVaultModule = Get-Module-CrossPlatform -Name $AzVaultModuleName\t
if ($null -eq $azVaultModule) {
    throw \"Cannot find the '$AzVaultModuleName' module on the machine. If you think it is installed, try restarting the Tentacle service for it to be detected.\"\t
}

$Secrets = @()
$VariablesCreated = 0
$StepName = $OctopusParameters[\"Octopus.Step.Name\"]

# Extract secret names+versions 
@(($VaultSecretNames -Split \"`n\").Trim()) | ForEach-Object {
    if (![string]::IsNullOrWhiteSpace($_)) {
        Write-Verbose \"Working on: '$_'\"
        $secretDefinition = ($_ -Split \"\\|\")
        $secretName = $secretDefinition[0].Trim()
        $secretNameAndVersion = ($secretName -Split \" \")
        $secretVersion = $null
        if($secretNameAndVersion.Count -gt 1) {
        \t$secretName = $secretNameAndVersion[0].Trim()
            $secretVersion = $secretNameAndVersion[1].Trim()
        }
        if([string]::IsNullOrWhiteSpace($secretName)) {
            throw \"Unable to establish secret name from: '$($_)'\"
        }
        $secret = [PsCustomObject]@{
            Name         = $secretName
            SecretVersion= $secretVersion
            VariableName = if (![string]::IsNullOrWhiteSpace($secretDefinition[1])) { $secretDefinition[1].Trim() } else { \"\" }
        }
        $Secrets += $secret
    }
}

Write-Verbose \"Vault Name: $AzureKeyVaultName\"
Write-Verbose \"Print variables: $PrintVariableNames\"
Write-Verbose \"Secrets to retrieve: $($Secrets.Count)\"
Write-Verbose \"Az Version specified: $AzVaultModuleSpecificVersion\"
Write-Verbose \"Az Custom Install Dir: $AzVaultModuleCustomInstallLocation\"

# Retrieve Secrets
foreach($secret in $secrets) {
    $name = $secret.Name
    $secretVersion = $secret.SecretVersion
    $variableName = $secret.VariableName
    if ([string]::IsNullOrWhiteSpace($variableName)) {
        $variableName = \"$($AzureKeyVaultName.Trim()).$($name.Trim())\"
    }
    
    if ([string]::IsNullOrWhiteSpace($secretVersion)) {
    \t$azSecretValue = Get-AzKeyVaultSecret -VaultName $AzureKeyVaultName -Name $name -AsPlainText    
    }
    else {
    \t$azSecretValue = Get-AzKeyVaultSecret -VaultName $AzureKeyVaultName -Name $name -Version $secretVersion -AsPlainText
    }
    
    Set-OctopusVariable -Name $variableName -Value $azSecretValue -Sensitive

    if($PrintVariableNames -eq $True) {
        Write-Host \"Created output variable: ##{Octopus.Action[$StepName].Output.$variableName}\"
    }
    $VariablesCreated += 1
}

Write-Host \"Created $variablesCreated output variables\"",
      "Octopus.Action.Azure.AccountId": "#{Azure.KeyVault.RetrieveSecrets.Account}"
    },
    "Parameters": [
      {
        "Id": "5b05337d-a62d-44f4-a702-95b45a400160",
        "Name": "Azure.KeyVault.RetrieveSecrets.Account",
        "Label": "Azure Account",
        "HelpText": "An Azure account with permissions to retrieve secrets from the Azure Key Vault.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "AzureAccount"
        }
      },
      {
        "Id": "9b09b2b3-3c4d-4cbb-a065-8955f62448ad",
        "Name": "Azure.KeyVault.RetrieveSecrets.VaultName",
        "Label": "Vault Name",
        "HelpText": "The name of the Azure Key Vault to retrieve secrets from.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "43949afd-1049-41fc-bd01-e878476f5952",
        "Name": "Azure.KeyVault.RetrieveSecrets.VaultSecrets",
        "Label": "Vault Secrets to retrieve",
        "HelpText": "Specify the names of the Secrets to be returned from Azure Key Vault, in the format `SecretName SecretVersion | OutputVariableName` where:

- `SecretName` is the name of the Secret to retrieve.
- `SecretVersion` is the _optional_ version of the Secret to retrieve. *If this value isn't specified, the latest version will be retrieved*.
- `OutputVariableName` is the _optional_ Octopus [output variable](https://octopus.com/docs/projects/variables/output-variables) name to store the secret's value in. *If this value isn't specified, an output name will be generated dynamically*.

**Note:** Multiple fields can be retrieved by entering each one on a new line.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "MultiLineText"
        }
      },
      {
        "Id": "46842344-405e-4633-a63f-115baaff7774",
        "Name": "Azure.KeyVault.RetrieveSecrets.PrintVariableNames",
        "Label": "Print output variable names",
        "HelpText": "Write out the Octopus [output variable](https://octopus.com/docs/projects/variables/output-variables) names to the task log. Default: `False`.",
        "DefaultValue": "False",
        "DisplaySettings": {
          "Octopus.ControlType": "Checkbox"
        }
      },
      {
        "Id": "0c20c004-c792-4acc-81c5-62ecceecf6ac",
        "Name": "Azure.KeyVault.RetrieveSecrets.AzModule.SpecificVersion",
        "Label": "Az PowerShell Module version (optional)",
        "HelpText": "If you wish to use a specific version of the `Az` PowerShell module (rather than the default), enter the version number here. e.g. `5.9.0`.

**Note:** The version specified must exist on the machine.
",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "d4d93a9a-72e1-48be-9ed6-78986bbfaa06",
        "Name": "Azure.KeyVault.RetrieveSecrets.AzModule.CustomInstallLocation",
        "Label": "Az PowerShell Install Location (optional)",
        "HelpText": "If you wish to provide a custom path to the `Az` PowerShell module (rather than the default), enter the value here.

**Note:** The Module must exist at the specified location on the machine. This step template will not download the Module.
",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      }
    ],
    "LastModifiedAt": "2021-06-02T08:34:02.548Z",
    "LastModifiedBy": "harrisonmeister",
    "$Meta": {
      "ExportedAt": "2021-06-02T08:34:02.548Z",
      "OctopusVersion": "2021.1.7236",
      "Type": "ActionTemplate"
    },
    "Category": "azure-keyvault"
  }
