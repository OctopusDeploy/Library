{
    "Id": "ActionTemplates-33",
    "Name": "Variables - Substitute in Files",
    "Description": "Transforms files using the Octopus `#{Variable}` substitution syntax.",
    "ActionType": "Octopus.Script",
    "Version": 14,
    "Properties": {
        "Octopus.Action.Script.ScriptBody": "Add-Type -Path ($OctopusParameters['Octopus.Tentacle.Agent.ProgramDirectoryPath'] + \"\\Octopus.Platform.dll\")\n\nfunction Execute-Template($templateFile, $outputFile)\n{\n    Write-Output \"Loading template file $templateFile...\"\n     \n    $contents = [System.IO.File]::ReadAllText($templateFile)\n    \n    $template = $null\n    $parseErr = $null\n    \n    if (-not [Octopus.Platform.Variables.Templates.Parser.TemplateParser]::TryParseTemplate($contents, [ref] $template, [ref] $parseErr))\n    {\n        throw \"The file contents could not be parsed as a valid Octopus template: $parseErr\"\n    }\n    \n    Write-Output \"Binding variables...\"\n    \n    $binding = [Octopus.Platform.Variables.Templates.Binder.PropertyListBinder]::CreateFrom($OctopusParameters)\n    \n    $newContents = New-Object System.Text.StringBuilder\n    $writer = New-Object System.IO.StringWriter $newContents\n    \n    Write-Output \"Evaluating template...\"\n    \n    [Octopus.Platform.Variables.Templates.Evaluator.TemplateEvaluator]::Evaluate($template, $binding, $writer)\n    \n    $writer.Dispose()\n    \n    Write-Output \"Writing result to $outputFile...\"\n    \n    [System.IO.File]::WriteAllText($outputFile, $newContents.ToString())\n}\n\n\n$SubsTemplatePathGlobs.Split(\";\") | foreach {\n    $glob = $_.Trim()\n    Write-Output \"Searching for files that match $glob...\"\n\n    $matches = $null\n    $splits = $glob.Split(@('/**/'), [System.StringSplitOptions]::RemoveEmptyEntries)\n    if ($splits.Length -eq 1) {\n        $splits = $glob.Split(@('\\**\\'), [System.StringSplitOptions]::RemoveEmptyEntries)\n    }\n    \n    if ($splits.Length -eq 1) {\n        $matches = ls $glob\n    } else {\n        if ($splits.Length -eq 2) {\n            pushd $splits[0]\n            $matches = ls $splits[1] -Recurse\n            popd\n        } else {\n            $splits\n            throw \"The segment '**' can only appear once, as a directory name, in the glob expression\"\n        }\n    }\n\n    $matches | foreach {\n        $tpl = $_.FullName\n        $dest = $tpl\n        if (-not [string]::IsNullOrWhiteSpace($SubsTrimSuffix)) {\n            $lx = $tpl.LastIndexOf($SubsTrimSuffix)\n            if ($lx -eq -1) {\n                Write-Output \"File $tpl does not end with the $SubsTrimSuffix suffix, so will be overwritten\"\n            } else {\n                $dest = $tpl.Substring(0,$lx)\n            }\n        }\n        Execute-Template -templateFile $tpl -outputFile $dest\n    }\n}\n\n\nWrite-Output \"Done.\"\n"
    },
  "SensitiveProperties": {},
  "Parameters": [
    {
        "Name": "SubsTemplatePathGlobs",
        "Label": "Template files",
        "HelpText": "A semicolon-separated list of path expressions that match the template files to be processed.\n\nSimple globbing is supported, for example `C:\\Files\\**\\*.tmpl` will match files in `C:\\Files` and any subdirectory.",
        "DefaultValue": null
    },
    {
        "Name": "SubsTrimSuffix",
        "Label": "Trim filename suffix",
        "HelpText": "If specified, the results of evaluating the templates will be written to new files by trimming the specified suffix from the end of the filename. For example, specifying `.tmpl` will cause the file `Settings.ini.tmpl` to be transformed into `Settings.ini`.\n\nIf omitted, the files will be transformed in-place.",
        "DefaultValue": null
    }
  ],
  "LastModifiedOn": "2014-05-08T03:50:43.932+00:00",
  "LastModifiedBy": "nblumhardt",
  "$Meta": {
      "ExportedAt": "2014-05-08T03:59:00.803Z",
      "OctopusVersion": "2.5.0.0",
      "Type": "ActionTemplate"
  }
}