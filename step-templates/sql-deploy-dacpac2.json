{
  "Id": "07cd00bf-c064-475e-98c0-6244300f05ff",
  "Name": "SQL - Deploy DACPAC from Referenced Package",
  "Description": "Calls the DacFX library to perform SSDT commands such as:\n * Deploy\n * Script\n * DeployReport\n\nBased on community step template \"SQL - Deploy DACPAC\" but now utilises the in-step package reference, so a previous package retrieval and extraction step is no longer required. \n\nRequires a second package containing the DacFX library. An existing package can be found at [https://www.nuget.org/packages/Microsoft.Data.Tools.Msbuild](https://www.nuget.org/packages/Microsoft.Data.Tools.Msbuild/).\n\nIf selected the deploy script and deploy report will be loaded back into Octopus Deploy as an artifact. This allows you to put in place a manual intervention step if required. It is also useful for auditing purposes.\n\nSqlCmd variables are now supported.  To specify SqlCmd variables, create your Octopus variable with the following naming convention: 'SqlCmdVariable.<Variable name>' (case insensitive) and then assign it a value.  Examples:\n* SqlCmdVariable.Variable1\n* my.sqlcmdvariable.variable2",
  "ActionType": "Octopus.Script",
  "Version": 5,
  "CommunityActionTemplateId": null,
  "Packages": [
    {
      "Name": "DACPAC",
      "Id": "2fec40b7-8882-45ee-b903-619a61c6cb8a",
      "PackageId": "#{DACPACPackageName}",
      "FeedId": "#{DACPACPackageFeed}",
      "AcquisitionLocation": "Server",
      "Properties": {
        "Extract": "True"
      }
    },
    {
      "Name": "DataTools",
      "Id": "f3a43a6d-5280-4035-ac15-16f086c4b15f",
      "PackageId": "#{DataToolsPackageName}",
      "FeedId": "#{DataToolsPackageFeed}",
      "AcquisitionLocation": "Server",
      "Properties": {
        "Extract": "True"
      }
    }
  ],
  "Properties": {
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptBody": "[scriptblock]$functions = {\n    <#\n    .SYNOPSIS\n    Converts boolean values to boolean types\n\n    .DESCRIPTION\n    Converts boolean values to boolean types\n\n    .PARAMETER Value\n    The value to convert\n\n    .EXAMPLE\n    Format-OctopusArgument \"true\"\n    #>\n    Function Format-OctopusArgument {\n\n        Param(\n            [string]$Value\n        )\n\n        $Value = $Value.Trim()\n\n        # There must be a better way to do this\n        Switch -Wildcard ($Value){\n\n            \"True\" { Return $True }\n            \"False\" { Return $False }\n            \"#{*}\" { Return $null }\n            Default { Return $Value }\n        }\n    }\n\n    <#\n    .SYNOPSIS\n    Removes invalid file name characters\n\n    .DESCRIPTION\n    Removes invalid file name characters\n\n    .PARAMETER FileName\n    The file name to removes the invalid characters in\n\n    .EXAMPLE\n    Remove-InvalidFileNameChars -FileName \"Not\\Allowed\"\n    #>\n    Function Remove-InvalidFileNameChars {\n\n        Param(\n            [string]$FileName\n        )\n\n        [IO.Path]::GetinvalidFileNameChars() | ForEach-Object { $FileName = $FileName.Replace($_, \"_\") }\n        Return $FileName\n    }\n\n    <#\n    .SYNOPSIS\n    Finds the DAC File that you specify\n\n    .DESCRIPTION\n    Looks through the supplied PathList array and searches for the file you specify.  It will return the first one that it finds.\n\n    .PARAMETER FileName\n    Name of the file you are looking for\n\n    .PARAMETER PathList\n    Array of Paths to search through.\n\n    .EXAMPLE\n    Find-DacFile -FileName \"Microsoft.SqlServer.TransactSql.ScriptDom.dll\" -PathList @(\"${env:ProgramFiles}\\Microsoft SQL Server\", \"${env:ProgramFiles(x86)}\\Microsoft SQL Server\")\n    #>\n    Function Find-DacFile {\n        Param(\n            [Parameter(Mandatory=$true)]\n            [string]$FileName,\n            [Parameter(Mandatory=$true)]\n            [string[]]$PathList\n        )\n\n        $File = $null\n\n        ForEach($Path in $PathList)\n        {\n            Write-Debug (\"Searching: {0}\" -f $Path)\n\n            If (!($File))\n            {\n                $File = (\n                    Get-ChildItem $Path -ErrorAction SilentlyContinue -Filter $FileName -Recurse |\n                        Sort-Object FullName -Descending |\n                        Select-Object -First 1\n                    )\n\n                If ($File)\n                {\n                    Write-Debug (\"Found: {0}\" -f $File.FullName)\n                }\n            }\n        }\n\n        Return $File\n    }\n\n    <#\n    .SYNOPSIS\n    Adds the required types so that they can be used\n\n    .DESCRIPTION\n    Adds the DacFX types that are required to do database deploys, scripts and deployment reports from SSDT\n\n    .EXAMPLE\n    Add-DACAssemblies\n    #>\n    Function Add-DACAssemblies {\n        [cmdletbinding()]\n        param(\n            [array]$SearchPathList\n        )\n\n        Write-Verbose \"Loading the DacFX Assemblies\"\n\n        if(!$SearchPathList){\n            Write-Warning \"DataTools package not provided. Looking for a locally installed DacFX library.\"\n            $SearchPathList = @(\"${env:ProgramFiles}\\Microsoft SQL Server\\$TargetDatabaseVersion\", \"${env:ProgramFiles(x86)}\\Microsoft SQL Server\\$TargetDatabaseVersion\")\n        }\n\n        Write-Debug \"Searching for: Microsoft.SqlServer.TransactSql.ScriptDom.dll\"\n        $ScriptDomDLL = (Find-DacFile -FileName \"Microsoft.SqlServer.TransactSql.ScriptDom.dll\" -PathList $SearchPathList)\n\n        Write-Debug \"Searching for: Microsoft.SqlServer.Dac.dll\"\n        $DacDLL = (Find-DacFile -FileName \"Microsoft.SqlServer.Dac.dll\" -PathList $SearchPathList)\n\n        If (!($ScriptDomDLL))\n        {\n            Throw \"Could not find the file: Microsoft.SqlServer.TransactSql.ScriptDom.dll\"\n        }\n        If (!($DacDLL))\n        {\n            Throw \"Could not find the file: Microsoft.SqlServer.Dac.dll\"\n        }\n\n        Write-Debug (\"Adding the type: {0}\" -f $ScriptDomDLL.FullName)\n        Add-Type -Path $ScriptDomDLL.FullName\n\n        Write-Debug (\"Adding the type: {0}\" -f $DacDLL.FullName)\n        Add-Type -Path $DacDLL.FullName\n\n        Write-Host \"Loaded the DAC assemblies\"\n    }\n\n\n    <#\n    .SYNOPSIS\n    Generates a connection string\n\n    .DESCRIPTION\n    Derive a connection string from the supplied variables\n\n    .PARAMETER ServerName\n    Name of the server to connect to\n\n    .PARAMETER Database\n    Name of the database to connect to\n\n    .PARAMETER AuthenticationMethod\n    String value to indicate authentication method. Accepted values:AuthSQLServer,AuthADIntegrated,AuthADPassword, AuthWindows \n\n    .PARAMETER UserName\n    User name to use if we are not using integrated security\n\n    .PASSWORD Password\n    Password to use if we are not using integrated security\n\n    .PARAMETER EnableMultiSubnetFailover\n    Flag as to whether we should enable multi subnet failover\n\n    .EXAMPLE\n    Get-ConnectionString -ServerName localhost -AuthenticationMethod AuthADIntegrated -Database OctopusDeploy\n\n    .EXAMPLE\n    Get-ConnectionString -ServerName localhost -UserName sa -Password ProbablyNotSecure -Database OctopusDeploy\n    #>\n    Function Get-ConnectionString {\n        Param(\n            [Parameter(Mandatory=$True)]\n            [string]$ServerName,\n            [ValidateSet(\"AuthSQLServer\",\"AuthADIntegrated\",\"AuthADPassword\",\"AuthWindows\")][string]$AuthenticationMethod,\n            [string]$UserName,\n            [string]$Password,\n            [bool]$EnableMultiSubnetFailover,\n            [string]$Database\n        )\n\n        $ApplicationName = \"OctopusDeploy\"\n        $connectionString = (\"Application Name={0};Server={1}\" -f $ApplicationName, $ServerName)\n\n\n        If ($AuthenticationMethod -eq \"AuthADIntegrated\")\n        {\n            Write-Verbose \"Using AD integrated security\"\n            $connectionString += \";Authentication=`\"Active Directory Integrated`\"\"\n        }\n        elseif ($AuthenticationMethod -eq \"AuthADPassword\"){\n            Write-Verbose \"Using AD Password security\"\n            $connectionString += \";Authentication=`\"Active Directory Password`\"\"\n        }\n        elseif ($AuthenticationMethod -eq \"AuthWindows\")\n        {\n            Write-Verbose \"Using windows authentication\"\n            $connectionString += \";Trusted_Connection=True\"\n        }\n        \n        if($AuthenticationMethod -eq \"AuthADPassword\" -or $AuthenticationMethod -eq \"AuthSQLServer\"){\n            $connectionString += (\";Uid={0};Pwd='{1}'\" -f $UserName, $Password)\n        }\n\n        if ($EnableMultiSubnetFailover)\n        {\n            Write-Verbose \"Enabling multi subnet failover\"\n            $connectionString += \";MultisubnetFailover=True\"\n        }\n\n        If ($Database)\n        {\n            $connectionString += (\";Initial Catalog={0}\" -f $Database)\n        }\n\n        Return $connectionString\n    }\n\n    Function Get-SQLServerVersion {\n        Param(\n            [string]$serverVersion\n        )\n        \n        $serverVersion = $serverVersion.Trim()\n        \n        Switch ($serverVersion){\n            \"100\" { Return \"SQL Server 2008\" }\n            \"110\" { Return \"SQL Server 2012\" }\n            \"120\" { Return \"SQL Server 2014\" }\n            \"130\" { Return \"SQL Server 2016\" }\n            \"140\" { Return \"SQL Server 2017\" }\n            \"150\" { Return \"SQL Server 2019\" }\n            Default { Return $null }\n        }\n    }\n\n    <#\n    .SYNOPSIS\n    Invokes the DacPac utility\n\n    .DESCRIPTION\n    Used to invoke the actions against the DacFx library.  This utility can generate deployment reports, deployment scripts and execute a deploy\n\n    .PARAMETER Report\n    Boolean flag as to whether a deploy report should be generated\n\n    .PARAMETER Script\n    Boolean flag as to whether a deployment script should be generated\n\n    .PARAMETER Deploy\n    Boolean flag as to whether a deployment should occur\n\n    .PARAMETER DacPacFilename\n    Full path as to where we can find the DacPac to use\n\n    .PARAMETER TargetServer\n    Name of the server to run the DacPac against\n\n    .PARAMETER TargetDatabase\n    Name of the database to run the DacPac against\n\n    .PARAMETER AuthenticationMethod\n    Authentication method to connect to SQL with\n\n    .PARAMETER EnableMultiSubnetFailover\n    Flag as to whether we should enable multi subnet failover\n\n    .PARAMETER UserName\n    If we are not using integrated security, we should use this user name to connect to the server\n\n    .PARAMETER Password\n    If we are not using integrated security, we should use this password to connect to the server\n\n    .PARAMETER PublishProfile\n    Full path to the publish profile we should use\n\n    .EXAMPLE\n    Invoke-DacPacUtility\n\n    #>\n    Function Invoke-DacPacUtility {\n\n        Param(\n            [bool]$Report,\n            [bool]$Script,\n            [bool]$Deploy,\n            [bool]$ExtractTargetDatabaseDacpac,\n            [string]$DacPacFilename,\n            [string]$TargetServer,\n            [string]$TargetDatabase,\n            [string]$AuthenticationMethod,\n            [string]$UserName,\n            [string]$Password,\n            [bool]$EnableMultiSubnetFailover,\n            [string]$PublishProfile,\n            [string]$AdditionalDeploymentContributors,\n            [string]$AdditionalDeploymentContributorArguments,\n            [string]$DataToolsExtractPath\n        )\n\n        # We output the parameters (excluding password) so that we can see what was supplied for debuging if required.  Useful for variable scoping problems\n        Write-Debug (\"Invoke-DacPacUtility called.  Parameter values supplied:\")\n        Write-Debug (\"    Dacpac Filename:                  {0}\" -f $DacPacFilename)\n        Write-Debug (\"    Dacpac Profile:                   {0}\" -f $PublishProfile)\n        Write-Debug (\"    Target server:                    {0}\" -f $TargetServer)\n        Write-Debug (\"    Target database:                  {0}\" -f $TargetDatabase)\n        Write-Debug (\"    Target database version:          {0}\" -f (Get-SQLServerVersion $TargetDatabaseVersion))\n        Write-Debug (\"    Authentication Method:            {0}\" -f $AuthenticationMethod)\n        Write-Debug (\"    Username:                         {0}\" -f $UserName)\n        Write-Debug (\"    Enable multi subnet failover      {0}\" -f $EnableMultiSubnetFailover)\n        Write-Debug (\"    Report:                           {0}\" -f $Report)\n        Write-Debug (\"    Script:                           {0}\" -f $Script)\n        Write-Debug (\"    Deploy:                           {0}\" -f $Deploy)\n        Write-Debug (\"    Extract target database dacpac    {0}\" -f $ExtractTargetDatabaseDacpac)\n        Write-Debug (\"    Deployment contributors:          {0}\" -f $AdditionalDeploymentContributors)\n        Write-Debug (\"    Deployment contributor arguments: {0}\" -f $AdditionalDeploymentContributorArguments)\n\n        $DateTime = ((Get-Date).ToUniversalTime().ToString(\"yyyyMMddHHmmss\"))\n\n        Add-DACAssemblies -SearchPathList $DataToolsExtractPath\n\n        Try {\n            $dacPac = [Microsoft.SqlServer.Dac.DacPackage]::Load($DacPacFilename)\n            $connectionString = (Get-ConnectionString -ServerName $TargetServer -Database $TargetDatabase -AuthenticationMethod $AuthenticationMethod -EnableMultiSubnetFailover $EnableMultiSubnetFailover -UserName $UserName -Password $Password)\n\n            # Load the publish profile if supplied\n            If ($PublishProfile)\n            {\n                Write-Verbose (\"Attempting to load the publish profile: {0}\" -f $PublishProfile)\n\n                #Load the publish profile\n                $dacProfile = [Microsoft.SqlServer.Dac.DacProfile]::Load($PublishProfile)\n                Write-Verbose (\"Loaded publish profile: {0}\" -f $PublishProfile)\n\n                if([string]::IsNullOrWhiteSpace($dacProfile.TargetConnectionString) -ne $true) {\n                Write-Warning \"Publish profile contains a TargetConnectionString setting. This setting might override the connection settings specified as command line parameters when using .NET classes from the Microsoft.SqlServer.Dac namespace.\"\n                }\n\n                #Load the artifact back into Octopus Deploy\n                $profileArtifact = Remove-InvalidFileNameChars -FileName (\"{0}.{1}.{2}.{3}\" -f $TargetServer, $TargetDatabase, $DateTime, ($PublishProfile.Remove(0, $PublishProfile.LastIndexOf(\"\\\") + 1)))\n                New-OctopusArtifact -Path $PublishProfile -Name $profileArtifact\n                Write-Verbose (\"Loaded publish profile as an Octopus Deploy artifact\")\n            }\n            Else {\n                $dacProfile = New-Object Microsoft.SqlServer.Dac.DacProfile\n                Write-Verbose (\"Created blank publish profile\")\n            }\n\n            # Specify additional deployment contributors:\n            if($AdditionalDeploymentContributors) {\n                $dacProfile.DeployOptions.AdditionalDeploymentContributors = $AdditionalDeploymentContributors\n            }\n            \n            if($AdditionalDeploymentContributorArguments) {\n                $dacProfile.DeployOptions.AdditionalDeploymentContributorArguments = $AdditionalDeploymentContributorArguments\n            }\n\n            $dacServices = New-Object Microsoft.SqlServer.Dac.DacServices -ArgumentList $connectionString\n\n            # Register the object events and output them to the verbose stream\n            Register-ObjectEvent -InputObject $dacServices -EventName \"ProgressChanged\" -SourceIdentifier \"ProgressChanged\" -Action { Write-Verbose (\"DacServices: {0}\" -f $EventArgs.Message) } | Out-Null\n            Register-ObjectEvent -InputObject $dacServices -EventName \"Message\" -SourceIdentifier \"Message\" -Action { Write-Host ($EventArgs.Message.Message) } | Out-Null\n\n            # Get all SqlCmdVariables\n            $sqlCmdVariables = $OctopusParameters.Keys -imatch \"SqlCmdVariable.*\"\n            \n            # Check to see if something is there\n            if ($null -ne $sqlCmdVariables)\n            {\n                Write-Output \"Adding SqlCmdVariables ...\"\n                \n                # Check to see if the deploy options property is null\n                if ($null -eq $dacProfile.DeployOptions)\n                {\n                    # Create new Microsoft.SqlServer.Dac.DacDeployOptions object\n                    $dacProfile.DeployOptions = New-Object Microsoft.SqlServer.Dac.DacDeployOptions\n                }\n                \n                # Loop through the variable collection\n                foreach ($sqlCmdVariable in $sqlCmdVariables)\n                {\n                    # Add variable to the deploy options\n                    $sqlCmdVariableKey = $sqlCmdVariable.Substring(($sqlCmdVariable.ToLower().IndexOf(\"sqlcmdvariable.\") + \"sqlcmdvariable.\".Length))\n                    \n                    Write-Output \"Adding variable: $sqlCmdVariableKey with value: $($OctopusParameters[$sqlCmdVariable])\"\n                    \n                    $dacProfile.DeployOptions.SqlCommandVariableValues.Add($sqlCmdVariableKey, $OctopusParameters[$sqlCmdVariable])\n                }\n            }\n        \n            If ($Report -or $Script -or $ExtractTargetDatabaseDacpac)\n            {\n                # Extract a DACPAC so we can do reports and scripting faster (if both are done)\n                # dbDacPac\n                $dbDacPacFilename = Remove-InvalidFileNameChars -FileName (\"{0}.{1}.{2}.dacpac\" -f $TargetServer, $TargetDatabase, $DateTime)\n                \n                $dbDacPacFilepath = Join-Path $ExtractPath $dbDacPacFilename\n                $dacVersion = New-Object System.Version(1, 0, 0, 0)\n                Write-Debug \"Extracting target server dacpac\"\n                \n                # Extract-Method needs full file-path in order to work\n                $dacServices.Extract($dbDacPacFilepath, $TargetDatabase, $TargetDatabase, $dacVersion)\n\n                Write-Debug (\"Loading the target server dacpac for report and scripting. Filename: {0}\" -f $dbDacPacFilepath)\n                $dbDacPac = [Microsoft.SqlServer.Dac.DacPackage]::Load($dbDacPacFilepath)\n\n                If ($ExtractTargetDatabaseDacpac)\n                {\n                    New-OctopusArtifact -Path $dbDacPacFilepath -Name $dbDacPacFilepath\n                }\n\n                # Generate a Deploy Report if one is asked for\n                If ($Report)\n                {\n                    Write-Host (\"Generating deploy report against server: {0}, database: {1}\" -f $TargetServer, $TargetDatabase)\n                    $deployReport = [Microsoft.SqlServer.Dac.DacServices]::GenerateDeployReport($dacPac, $dbDacPac, $TargetDatabase, $dacProfile.DeployOptions)\n                    $reportArtifact = Remove-InvalidFileNameChars -FileName (\"{0}.{1}.{2}.{3}\" -f $TargetServer, $TargetDatabase, $DateTime, \"DeployReport.xml\")\n            \n                    Set-Content $reportArtifact $deployReport\n\n                    Write-Host (\"Loading the deploy report to OctopusDeploy: {0}\" -f $reportArtifact)\n                    New-OctopusArtifact -Path $reportArtifact -Name $reportArtifact\n                }\n\n                # Generate a Deploy Script if one is asked for\n                If ($Script)\n                {\n                    Write-Host (\"Generating deploy script against server: {0}, database: {1}\" -f $TargetServer, $TargetDatabase)\n                    $deployScript = [Microsoft.SqlServer.Dac.DacServices]::GenerateDeployScript($dacPac, $dbDacPac, $TargetDatabase, $dacProfile.DeployOptions)\n                    $scriptArtifact = Remove-InvalidFileNameChars -FileName (\"{0}.{1}.{2}.{3}\" -f $TargetServer, $TargetDatabase, $DateTime, \"DeployScript.sql\")\n            \n                    Set-Content $scriptArtifact $deployScript\n            \n                    Write-Host (\"Loading the deploy script to OctopusDeploy: {0}\" -f $scriptArtifact)\n                    New-OctopusArtifact -Path $scriptArtifact -Name $scriptArtifact\n                }\n            }\n\n            # Check to see if the command timeout needs to be overridden\n            if (![string]::IsNullOrEmpty($DACPACCommandTimeout))\n            {\n                # Display we're overriding the value\n                Write-Host \"Overriding default command timeout with $DACPACCommandTimeout\"\n                $dacProfile.DeployOptions.CommandTimeout = $DACPACCommandTimeout\n            }\n            \n            # Deploy the dacpac if asked for\n            If ($Deploy)\n            {\n                Write-Host (\"Starting deployment of dacpac against server: {0}, database: {1}\" -f $TargetServer, $TargetDatabase)\n                $dacServices.Deploy($dacPac, $TargetDatabase, $true, $dacProfile.DeployOptions, $null)\n            \n                Write-Host (\"Dacpac deployment complete\")\n            }\n            \n            Unregister-Event -SourceIdentifier \"ProgressChanged\"\n            Unregister-Event -SourceIdentifier \"Message\"\n        }\n        Catch {\n            # If we use Write-Error here the original exception will be overwritten by a WriteErrorException\n            Write-Debug (\"An exception of type {0} was thrown.\" -f $_.Exception.GetType().FullName)\n            Write-Debug (\"Deployment failed: {0} `r`nReason: {1}\" -f $_.Exception.Message, $_.Exception.InnerException.Message)\n\n            # re-throw in order to not lose inner exceptions and stack trace that are generated by\n            # the invocation of the .NET classes from Microsoft.SqlServer.Dac\n            throw\n        }\n    }\n\n    <#\n    .SYNOPSIS\n    Will find the full path of a given filename (For dacpac or publish profile)\n    .DESCRIPTION\n    Will search through an extracted package folder provided as the BasePath and hunt for any matches for the given filename.\n    .PARAMETER BasePath\n    String value of the root folder to begine the recursive search.\n    .PARAMETER FileName\n    String value of the name of the file to search for.\n    .PARAMETER FileType\n    String value of \"DacPac\" or \"PublishProfile\" to identify the type of file to search for.\n    .EXAMPLE\n    Get-DacFilePath -BasePath $ExtractPath -FileName $DACPACPackageName -FileType \"DacPac\"\n    #>\n    function Get-DacFilePath {\n        [cmdletbinding()]\n        param(\n            [parameter(Mandatory=$true)]\n            [string]$BasePath,\n\n            [parameter(Mandatory=$true)]\n            [string]$FileName,\n\n            [parameter(Mandatory=$true)]\n            [ValidateSet(\"DacPac\",\"PublishProfile\")]\n            [string]$FileType\n        )\n\n        # Add file extension for a dacpac if it's missing\n        if($FileName.Split(\".\")[-1] -ne \"dacpac\" -and $FileType -eq \"DacPac\"){\n            $FileName = \"$FileName.dacpac\"\n        }\n\n        Write-Verbose \"Looking for $FileType $FileName in $BasePath.\"\n\n        $filePath = (Get-ChildItem -Path $BasePath -Recurse -Filter $FileName).FullName\n\n        if(@($filePath).Length -gt 1){\n            Write-Warning \"Found $(@($filePath).Length) instances of $FileName. Using $($filePath[0]).\"\n            Write-Warning \"Multiple paths for $FileName`: $(@($filePath) -join \"; \")\"\n            $filePath = $filePath[0]\n        }\n        elseif(@($filePath).Length -lt 1 -or $null -eq $filePath){\n            Throw \"Could not find $FileName.\"\n        }\n\n        return $filePath\n    }\n} #End of functions scriptblock\n\n[scriptblock]$scriptRun = {\n\n    if($args){\n        $OctopusParameters = $args[0]\n    }\n\n    # Get the supplied parameters\n    $PublishProfile = $OctopusParameters[\"DACPACPublishProfile\"]\n    $DACPACFileName = $OctopusParameters[\"DACPACFileName\"]\n    $Report = Format-OctopusArgument -Value $OctopusParameters[\"Report\"]\n    $Script = Format-OctopusArgument -Value $OctopusParameters[\"Script\"]\n    $Deploy = Format-OctopusArgument -Value $OctopusParameters[\"Deploy\"]\n    $ExtractTargetDatabaseDacpac = Format-OctopusArgument -Value $OctopusParameters[\"ExtractTargetDatabaseDacPac\"]\n    $TargetServer = $OctopusParameters[\"TargetServer\"]\n    $TargetDatabase = $OctopusParameters[\"TargetDatabase\"]\n    $AuthenticationMethod = Format-OctopusArgument -Value $OctopusParameters[\"DACPACAuthenticationMethod\"]\n    $Username = $OctopusParameters[\"DACPACUsername\"]\n    $Password = $OctopusParameters[\"DACPACPassword\"]\n    $EnableMultiSubnetFailover = Format-OctopusArgument -Value $OctopusParameters[\"EnableMultiSubnetFailover\"]\n    $AdditionalDeploymentContributors = Format-OctopusArgument -Value $OctopusParameters[\"AdditionalContributors\"]\n    $AdditionalDeploymentContributorArguments = Format-OctopusArgument -Value $OctopusParameters[\"AdditionalContributorArguments\"]\n    $PackageReferenceName = \"DACPAC\"\n    $DataToolsPackageReferenceName = \"DataTools\"\n    \n    $ExtractPathKey = (\"Octopus.Action.Package[{0}].ExtractedPath\" -f $PackageReferenceName)\n    $ExtractPath = $OctopusParameters[$ExtractPathKey]\n\n    $DataToolsExtractPathKey = (\"Octopus.Action.Package[{0}].ExtractedPath\" -f $DataToolsPackageReferenceName)\n    $DataToolsExtractPath = $OctopusParameters[$DataToolsExtractPathKey]\n\n    if(!(Test-Path $ExtractPath)) {\n        Throw (\"The package extraction folder '{0}' does not exist or the Octopus Tentacle does not have permission to access it.\" -f $ExtractPath)\n    }\n\n    if(!(Test-Path $DataToolsExtractPath)) {\n        Throw (\"The data tools package extraction folder '{0}' does not exist or the Octopus Tentacle does not have permission to access it.\" -f $DataToolsExtractPath)\n    }\n\n    $DACPACPackagePath = Get-DacFilePath -BasePath $ExtractPath -FileName $DACPACFileName -FileType \"DacPac\"\n\n    If ($PublishProfile){\n        $PublishProfilePath = Get-DacFilePath -BasePath $ExtractPath -FileName $PublishProfile -FileType \"PublishProfile\"\n    }\n\n    # Invoke the DacPac utility\n    try\n    {\n        Invoke-DacPacUtility -Report $Report -Script $Script -Deploy $Deploy -ExtractTargetDatabaseDacpac $ExtractTargetDatabaseDacpac -DacPacFilename $DACPACPackagePath -TargetServer $TargetServer -TargetDatabase $TargetDatabase -AuthenticationMethod $AuthenticationMethod -Username $Username -Password $Password -EnableMultiSubnetFailover $EnableMultiSubnetFailover -PublishProfile $PublishProfilePath -AdditionalDeploymentContributors $AdditionalDeploymentContributors -AdditionalDeploymentContributorArguments $AdditionalDeploymentContributorArguments -DataToolsExtractPath $DataToolsExtractPath\n    }\n    catch\n    {\n        Write-Host $_.Exception.ToString()\n        throw;\n    }\n\n} #End of scriptRun scriptblock\n\nif($OctopusParameters[\"DACPACAuthenticationMethod\"] -eq \"AuthADIntegrated\" -and $OctopusParameters[\"DACPACUserName\"] -and $OctopusParameters[\"DACPACPassword\"]){\n\n    $secpasswd = ConvertTo-SecureString $OctopusParameters['DACPACPassword'] -AsPlainText -Force\n    $cred = [PSCredential]::new($OctopusParameters['DACPACUserName'],$secpasswd)\n\n    $job = Start-Job -InitializationScript $functions `\n        -Credential $cred `\n        -ArgumentList $OctopusParameters `\n        -ScriptBlock $scriptRun\n\n    while ($job.HasMoreData -and $job.State -eq \"Running\") {\n        Receive-Job -Job $job\n    }\n\n    if($job.State -eq \"Failed\") {\n        $errMessage = $job.ChildJobs[0].JobStateInfo.Reason.ErrorCode.ToString()\n        $errMessage += \": \"\n        $errMessage += $job.ChildJobs[0].JobStateInfo.Reason.Message.ToString()\n        throw $errMessage  \n    }\n\n}\nelse { \n\n    if($OctopusParameters[\"DACPACAuthenticationMethod\"] -eq \"AuthADIntegrated\"-and (!$OctopusParameters[\"DACPACUserName\"] -or !$OctopusParameters[\"DACPACPassword\"])){\n        Write-Warning \"Authentication method is set to 'AD Integrated' but incomplete credentials were provided for the user. Running as $env:USERDOMAIN\\$env:USERNAME.\"\n        Write-Warning \"To run as another user please provide values for DACPACUserName and DACPACPassword.\"\n    }\n\n    try {\n        . $functions\n        . $scriptRun\n    }\n    catch{\n        Write-Host $_.Exception.ToString()\n        throw;\n    }\n}\n",
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.RunOnServer": "false",
    "Octopus.Action.SubstituteInFiles.Enabled": "True",
    "Octopus.Action.EnabledFeatures": "Octopus.Features.SubstituteInFiles",
    "Octopus.Action.SubstituteInFiles.TargetFiles": "**\\#{DACPACPublishProfile}"
  },
  "Parameters": [
    {
      "Id": "7687f5ce-5b00-47df-aa57-73b9307f1d9e",
      "Name": "DataToolsPackageFeed",
      "Label": "Data Tools Package Feed *",
      "HelpText": "The feed with the package containing the DacFX library.",
      "DefaultValue": "feeds-builtin",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "6fc16a30-04f6-442f-ac7b-024ac4bb9bd3",
      "Name": "DataToolsPackageName",
      "Label": "Data Tools Package Name *",
      "HelpText": "The package containing the DacFX Library. For example: https://www.nuget.org/packages/Microsoft.SqlServer.DacFx.x64/",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "1e94f05a-3bcc-4f23-a5b9-019ac0b63822",
      "Name": "DACPACPackageFeed",
      "Label": "DACPAC Package Feed *",
      "HelpText": "The Nuget Feed containing the package.",
      "DefaultValue": "feeds-builtin",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "c9239649-ffb6-4996-97fb-1d35cad096b4",
      "Name": "DACPACPackageName",
      "Label": "DACPAC Package Name *",
      "HelpText": "The name of the .dacpac file that contains the SSDT model. ",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "782d2575-88c8-4c75-887e-5e52b9b5522d",
      "Name": "DACPACFileName",
      "Label": "DACPAC File Name *",
      "HelpText": "The name of the .dacpac file that contains the SSDT model.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "ac202934-6075-4834-881f-b7d2c356f209",
      "Name": "DACPACPublishProfile",
      "Label": "Publish profile name",
      "HelpText": "Name of the publish profile to use",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "f44f312b-a96b-4df8-9cd8-84a2e469ae8e",
      "Name": "DACPACAuthenticationMethod",
      "Label": "SQL Server Authentication Method",
      "HelpText": "Select your authentication method.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "AuthSQLServer|SQL Server Authentication\nAuthADIntegrated|Active Directory Integrated Authentication\nAuthADPassword|Active Directory Password Authentication"
      }
    },
    {
      "Id": "ca04820b-f0ab-41f2-9f65-d09f3833030e",
      "Name": "Report",
      "Label": "Report",
      "HelpText": "Whether a deployment report should be generated and loaded into OctopusDeploy as an artifact",
      "DefaultValue": "True",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "a6b6c2ce-9598-4887-a755-d15ed06a3276",
      "Name": "Script",
      "Label": "Script",
      "HelpText": "Whether a deploy script should be generated and loaded into OctopusDeploy as an artifact",
      "DefaultValue": "True",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "e2afc546-1168-4d02-a8b0-6a519da4f066",
      "Name": "Deploy",
      "Label": "Deploy",
      "HelpText": "Whether a deployment of the dacpac should occur",
      "DefaultValue": "True",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "87ab056b-6d03-40a4-914b-3b506cb87645",
      "Name": "ExtractTargetDatabaseDacPac",
      "Label": "Extract target database to dacpac",
      "HelpText": "Extracts the target database to a dacpac and loads it back into Octopus Deploy",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "8a71d67c-7e16-4760-a7d2-8bccef893212",
      "Name": "TargetServer",
      "Label": "Target Servername",
      "HelpText": "Name of the server to target this deployment against",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "75d39742-65cb-4ca9-b06e-eac306d7e54b",
      "Name": "TargetDatabase",
      "Label": "Target Database",
      "HelpText": "Name of the database to target this deployment against",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "49aafcc0-199e-4eae-b2df-3f37e94ff16c",
      "Name": "TargetDatabaseVersion",
      "Label": "Target Database Version",
      "HelpText": "The SQL Server version of the target database",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "100|SQL Server 2008\n110|SQL Server 2012\n120|SQL Server 2014\n130|SQL Server 2016\n140|SQL Server 2017"
      }
    },
    {
      "Id": "f0d5a735-f31c-4895-ae11-b52da29a386c",
      "Name": "DACPACUsername",
      "Label": "Username",
      "HelpText": "User name to use to connect to the server if we are not using Integrated Security",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "5e74bf8c-a2b9-498e-a42b-6de2e31c7018",
      "Name": "DACPACPassword",
      "Label": "Password",
      "HelpText": "Password to use to connect to the server if we are not using Integrated Security",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Id": "8b6eb5fa-f868-4132-bcfb-9b862a845ba4",
      "Name": "EnableMultiSubnetFailover",
      "Label": "Enable multi subnet failover",
      "HelpText": "Whether or not to use multi subnet failover",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "534b7d89-164b-4d32-bba7-a6fd6b71aebd",
      "Name": "AdditionalContributors",
      "Label": "Additional deployment contributors",
      "HelpText": "Specify any additional deployment contributors here.  Use the same format as you would for SqlPackage.exe /p:AdditionalDeploymentContributors=[what you would put here] \n\nFor more information go to https://docs.microsoft.com/en-us/sql/ssdt/use-deployment-contributors-to-customize-database-build-and-deployment?view=sql-server-2017",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "f127f3a6-10ff-4638-8d6d-fb7340c4ae64",
      "Name": "AdditionalContributorArguments",
      "Label": "Additional deployment contributor arguments",
      "HelpText": "Specify any additional deployment contributors here.  Use the same format as you would for SqlPackage.exe /p:AdditionalDeploymentContributorArguments=[what you would put here]",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "$Meta": {
    "ExportedAt": "2021-12-13T16:14:27.014Z",
    "OctopusVersion": "2020.6.4855",
    "Type": "ActionTemplate"
  },
  "LastModifiedBy": "DannyArr",
  "Category": "sql"
}