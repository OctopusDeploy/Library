{
  "Id": "3b1f6c62-c2cb-480b-9b14-435686b9f2cc",
  "Name": "Octopus - Import Certificate",
  "Description": "Create or replace an [Octopus Certificate](https://octopus.com/docs/deploying-applications/certificates) from a certificate file",
  "ActionType": "Octopus.Script",
  "Version": 5,
  "Properties": {
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.RunOnServer": "false",
    "Octopus.Action.Script.ScriptBody": "

<#
 ----- Octopus - Import Certificate ----- 
    Paul Marston @paulmarsy (paul@marston.me)
Links
    https://github.com/OctopusDeploy/Library/commits/master/step-templates/octopus-import-certificate.json
#>

$securityProtocol = [Net.SecurityProtocolType]::Tls -bor [Net.SecurityProtocolType]::Tls11 -bor [Net.SecurityProtocolType]::Tls12
[Net.ServicePointManager]::SecurityProtocol = $securityProtocol

$ErrorActionPreference = 'Stop'

$StepTemplate_BaseUrl = $StepTemplate_OctopusUrl.Trim('/')

if ([string]::IsNullOrWhiteSpace($StepTemplate_ApiKey)) {
    throw \"The step parameter 'API Key' was not found. This step requires an API Key to function, please provide one and try again.\"
}
filter Out-Verbose {
    Write-Verbose ($_ | Out-String)
}
filter Out-Indented {
    $_ | Out-String | % Trim | % Split \"`n\" | % { \"`t$_\" }  
}
function Invoke-OctopusApi {
    param(
        [Parameter(Position = 0, Mandatory)]$Uri,
        [ValidateSet(\"Get\", \"Post\")]$Method = 'Get',
        $Body
    )
    $requestParameters = @{
        Uri = ('{0}/{1}' -f $StepTemplate_BaseUrl, $Uri.TrimStart('/'))
        Method = $Method
        Headers = @{ \"X-Octopus-ApiKey\" = $StepTemplate_ApiKey }
        UseBasicParsing = $true
    }
    Write-Verbose \"$($Method.ToUpperInvariant()) $($requestParameters.Uri)\"   
    if ($null -ne $Body) { $requestParameters.Add('Body', ($Body | ConvertTo-Json -Depth 10)) }
    try {
        Invoke-WebRequest @requestParameters | % Content | ConvertFrom-Json | Write-Output
    }
    catch [System.Net.WebException] {
        if ($_.Exception.Response) {
            $errorResponse = [System.IO.StreamReader]::new($_.Exception.Response.GetResponseStream()).ReadToEnd()
            throw (\"$($_.Exception.Message)`n{0}\" -f $errorResponse)
        }
        
        if ($_.Exception.Message) {
        \t$message = $_.Exception.Message
        \tWrite-Highlight $message
            throw \"$message\"
        }
    }
}

function Test-SpacesApi {
\tWrite-Verbose \"Checking API compatibility\";
\t$rootDocument = Invoke-OctopusApi 'api/';
    if($rootDocument.Links -ne $null -and $rootDocument.Links.Spaces -ne $null) {
    \tWrite-Verbose \"Spaces API found\"
    \treturn $true;
    }
    Write-Verbose \"Pre-spaces API found\"
    return $false;
}

function Get-OctopusItems
{
\t# Define parameters
    param(
    \t$OctopusUri,
        $ApiKey,
        $SkipCount = 0
    )
    
    # Define working variables
    $items = @()
    $skipQueryString = \"\"
    $headers = @{\"X-Octopus-ApiKey\"=\"$ApiKey\"}

    # Check to see if there there is already a querystring
    if ($octopusUri.Contains(\"?\"))
    {
        $skipQueryString = \"&skip=\"
    }
    else
    {
        $skipQueryString = \"?skip=\"
    }

    $skipQueryString += $SkipCount
    
    # Get intial set
    $resultSet = Invoke-RestMethod -Uri \"$($OctopusUri)$skipQueryString\" -Method GET -Headers $headers

    # Check to see if it returned an item collection
    if ($resultSet.Items)
    {
        # Store call results
        $items += $resultSet.Items
    
        # Check to see if resultset is bigger than page amount
        if (($resultSet.Items.Count -gt 0) -and ($resultSet.Items.Count -eq $resultSet.ItemsPerPage))
        {
            # Increment skip count
            $SkipCount += $resultSet.ItemsPerPage

            # Recurse
            $items += Get-OctopusItems -OctopusUri $OctopusUri -ApiKey $ApiKey -SkipCount $SkipCount
        }
    }
    else
    {
        return $resultSet
    }
    

    # Return results
    return $items
}

function Get-OctopusIds 
{
\t# Define parameters
    param (
    \t$OctopusCollection,
        $NamesArray
    )
    
    $returnList = @()
    
    foreach ($item in $NamesArray)
    {
    \t# Trim item
        $item = $item.Trim()
        
        # Compare
        $octopusItem = $OctopusCollection | Where-Object {$_.Name -eq $item}
        
        if ($null -ne $octopusItem)
        {
        \t# Add to array
            $returnList += $item.Id
        }
    }
    
    # Return list
    return $returnList
}

if(Test-SpacesApi) {
\t$spaceId = $OctopusParameters['Octopus.Space.Id'];
    if([string]::IsNullOrWhiteSpace($spaceId)) {
        throw \"This step needs to be run in a context that provides a value for the 'Octopus.Space.Id' system variable. In this case, we received a blank value, which isn't expected - please reach out to our support team at https://help.octopus.com if you encounter this error.\";
    }
\t$baseApiUrl = \"/api/$spaceId\" ;
} else {
\t$baseApiUrl = \"/api\" ;
}

# Get all environments
Write-Host \"Getting list of Environments ...$($StepTemplate_BaseUrl)$($baseApiUrl)/environments\"
$environmentList = Get-OctopusItems -OctopusUri \"$($StepTemplate_BaseUrl)$($baseApiUrl)/environments\" -ApiKey $StepTemplate_ApiKey
$environmentIds = Get-OctopusIds -OctopusCollection $environmentList -NamesArray $StepTemplate_Environments.Split(\",\")

# Get tenants
Write-Host \"Getting list of Tenants ...\"
$tenantList = Get-OctopusItems -OctopusUri \"$($StepTemplate_BaseUrl)$($baseApiUrl)/tenants\" -ApiKey $StepTemplate_ApiKey
$tenantIds = Get-OctopusIds -OctopusCollection $tenantList -NamesArray $StepTemplate_Tenants.Split(\",\")

# Get tenant tags
Write-Host \"Getting list of Tenant Tags ...\"
$tenantTagList = Get-OctopusItems -OctopusUri \"$($StepTemplate_BaseUrl)$($baseApiUrl)/tagsets\" -ApiKey $StepTemplate_ApiKey
$tenantTagIds = Get-OctopusIds -OctopusCollection $tenantTagList -NamesArray $StepTemplate_TenantTags.Split(\",\")

$certificate = switch ($StepTemplate_CertEncoding) {
    'file' {   
        if (!(Test-Path $StepTemplate_Certificate)) {
            throw \"Certificate file $StepTemplate_Certificate does not exist\"
        }
        $certificateBytes = Get-Content -Path $StepTemplate_Certificate -Encoding Byte
        [System.Convert]::ToBase64String($certificateBytes)
    }
    'base64' {
        $StepTemplate_Certificate
    }
}

$existingCert = Invoke-OctopusApi \"$baseApiUrl/certificates\" | % Items | ? Name -eq $StepTemplate_CertificateName
if ($existingCert) {
    Write-Host 'Existing certificate will be archived & replaced...'
    Invoke-OctopusApi (\"$baseApiUrl/certificates/{0}/replace\" -f $existingCert.Id) -Method Post -Body @{
        certificateData = $certificate
        password = $StepTemplate_Password
    } | % {
        $_.CertificateData = $null
        $_.Password = $null
        $_
    } | Out-Verbose
} else {
    Write-Host 'Creating & importing new certificate...'
    Invoke-OctopusApi \"$baseApiUrl/certificates\" -Method Post -Body @{
        Name = $StepTemplate_CertificateName
        CertificateData = @{
            HasValue = $true
            NewValue = $certificate
        }
        Password = @{
            HasValue = $true
            NewValue = $StepTemplate_Password
        }
        TenantedDeploymentParticipation = $StepTemplate_TenantParticipation
        EnvironmentIds = $environmentIds
        TenantIds = $tenantIds
        TenantTags = $tenantTagIds
    } | Out-Verbose
}
Write-Host 'Certificate has been imported:'
Invoke-OctopusApi \"$baseApiUrl/certificates\" | % Items | ? Name -eq $StepTemplate_CertificateName | Out-Indented",
    "Octopus.Action.Script.ScriptFileName": null,
    "Octopus.Action.Package.FeedId": null,
    "Octopus.Action.Package.PackageId": null
  },
  "Parameters": [
    {
      "Id": "6a723531-1272-4c7f-ae04-9576051396ad",
      "Name": "StepTemplate_OctopusUrl",
      "Label": "Octopus Url",
      "HelpText": "Provide the URL of your Octopus Server. The default is `#{if Octopus.Web.ServerUri}#{Octopus.Web.ServerUri}#{else}#{Octopus.Web.BaseUrl}#{/if}`. Cloud instances should use `Octopus.Web.ServerUri`. See [System Variables - Server](https://octopus.com/docs/projects/variables/system-variables#Systemvariables-Server) for more info.",
      "DefaultValue": "#{if Octopus.Web.ServerUri}#{Octopus.Web.ServerUri}#{else}#{Octopus.Web.BaseUrl}#{/if}",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "9a84f62c-99f7-4349-bf6d-f42397f4de73",
      "Name": "StepTemplate_ApiKey",
      "Label": "API Key",
      "HelpText": "Provide an Octopus API Key with appropriate permissions to save the certificate.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      },
      "Links": {}
    },
    {
      "Id": "4fcb5ddf-14a9-42b1-8e77-d8d68e69b2fe",
      "Name": "StepTemplate_CertificateName",
      "Label": "Certificate Name",
      "HelpText": "A short, memorable, unique name for this certificate.

If the certificate already exists it [will be replaced](https://octopus.com/docs/deployments/certificates/replace-certificate).",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      },
      "Links": {}
    },
    {
      "Id": "0664b204-c11e-47d1-b388-58ef0b0a7b1a",
      "Name": "StepTemplate_CertEncoding",
      "Label": "Certificate Encoding",
      "HelpText": "Defines the format of the **Certificate** parameter.",
      "DefaultValue": "file",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "file|File Path
base64|Base64 Encoded String"
      },
      "Links": {}
    },
    {
      "Id": "df336e72-328a-4bad-92b1-374155ec3fb4",
      "Name": "StepTemplate_Certificate",
      "Label": "Certificate",
      "HelpText": "The certificate to import into Octopus, either as a **File Path** to the certificate, or as a **Base64 Encoded String** representation depending on the _Certificate Encoding_ chosen.

Supported formats: [PFX (PKCS #12), DER, PEM](https://octopus.com/docs/deployments/certificates)",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "MultiLineText"
      },
      "Links": {}
    },
    {
      "Id": "b875e962-5edc-44e8-be03-51f8a87eca5d",
      "Name": "StepTemplate_Password",
      "Label": "Password",
      "HelpText": "The password protecting the certificate (if required).",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      },
      "Links": {}
    },
    {
      "Id": "9d87e43f-d17a-40ea-affc-a3755f1cc16a",
      "Name": "StepTemplate_Environments",
      "Label": "Environments",
      "HelpText": "Comma-delimited list of environments to restrict certificate to.  A blank value will not restrict the certificate.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "014474f8-d7a2-4d67-b57f-364ba723ece2",
      "Name": "StepTemplate_TenantParticipation",
      "Label": "Tenant Participation",
      "HelpText": "Select the tenant participation level.",
      "DefaultValue": "untenanted",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "untenanted|Untenanted
tenanted|Tenanted
tenantedoruntenanted|Tenanted or untenanted"
      }
    },
    {
      "Id": "bf9a1f70-0c67-4070-b4ff-e38f159ff701",
      "Name": "StepTemplate_Tenants",
      "Label": "Tenants",
      "HelpText": "Comma-delimited list of tenants that can use this certificate.  Used with `Tenant Participation` values of `Tenanted` or `Tenanted or untenanted`.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "e041fbd8-66da-4b6a-ae3e-90d20f110a48",
      "Name": "StepTemplate_TenantTags",
      "Label": "Tenant Tags",
      "HelpText": "Comma-delimited list of tenant tags to apply to the certificate.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LastModifiedBy": "twerthi",
  "$Meta": {
    "ExportedAt": "2022-11-14T23:22:38.482Z",
    "OctopusVersion": "2022.4.8111",
    "Type": "ActionTemplate"
  },
  "Category": "octopus",
  "Author": "paulmarsy"
}
