{
  "Id": "c691729f-685a-4339-bba9-716633b221ae",
  "Name": "JIRA - Update Version Number",
  "Description": "Update version to Jira tickets based on release number being deployed",
  "ActionType": "Octopus.Script",
  "Version": 2,
  "CommunityActionTemplateId": null,
  "Packages": [],
  "Properties": {
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.ScriptBody": "#require version 3.0

param (
    [System.Uri]$Uri,
    [string]$Jql,
    [string]$Version,
    [string]$User,
    [string]$Password,
    [string]$ProjectKey    
)

$ErrorActionPreference = \"Stop\"
$AllProtocols = [System.Net.SecurityProtocolType]'Tls,Tls11,Tls12'
[Net.ServicePointManager]::SecurityProtocol = $AllProtocols

function Get-Param($Name, [switch]$Required, $Default) {
    $result = $null

    if ($OctopusParameters -ne $null) {
        $result = $OctopusParameters[$Name]
    }

    if ($result -eq $null) {
        $variable = Get-Variable $Name -EA SilentlyContinue    
        if ($variable -ne $null) {
            $result = $variable.Value
        }
    }

    if ($result -eq $null) {
        if ($Required) {
            throw \"Missing parameter value $Name\"
        } else {
            $result = $Default
        }
    }

    return $result
}

function Jira-QueryApi
{
    Param (
        [Uri]$Query,
        [string]$Username,
        [string]$Password
    );

    Write-Host \"Querying JIRA API $($Query.AbsoluteUri)\"

    # Prepare the Basic Authorization header - PSCredential doesn't seem to work
    $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes((\"{0}:{1}\" -f $Username,$Password)))
    $headers = @{Authorization=(\"Basic {0}\" -f $base64AuthInfo)}

    # Execute the query
    Invoke-RestMethod -Uri $Query -Headers $headers
}

function Jira-ExecuteApi
{
    Param (
        [Uri]$Query,
        [string]$Body,
        [string]$Username,
        [string]$Password
    );

    Write-Host \"Updating ticket : $($Query.AbsoluteUri)\"

    $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes((\"{0}:{1}\" -f $Username,$Password)))
    $headers = @{Authorization=(\"Basic {0}\" -f $base64AuthInfo)}
    Invoke-RestMethod -Uri $Query -Headers $headers -UseBasicParsing -Body $Body -Method Put -ContentType \"application/json\"
}

function Jira-CreateVersion
{
    Param (
        [Uri]$Query,
        [string]$Body,
        [string]$Username,
        [string]$Password
    );

    Write-Host \"Creating a version $($Query.AbsoluteUri)\"

    $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes((\"{0}:{1}\" -f $Username,$Password)))
    $headers = @{Authorization=(\"Basic {0}\" -f $base64AuthInfo)}
    Invoke-RestMethod -Uri $Query -Headers $headers -UseBasicParsing -Body $Body -Method Post -ContentType \"application/json\"
}

function Jira-GetVersions
{
    Param (
        [Uri]$VersionsUri,
        [string]$Username,
        [string]$Password
    );

    $versions = Jira-QueryApi -Query $VersionsUri -Username $Username -Password $Password    
    $versions
}

function Jira-PostUpdate
{
    Param (
        [Uri]$IssueUri,
        [string]$Username,
        [string]$Password,
        [string]$Body
    );

    Jira-ExecuteApi -Query $IssueUri -Body $body -Username $Username -Password $Password
}

function Jira-UpdateTicket
{
    Param (
    \t[Uri]$BaseUri,
        [Uri]$IssueUri,
        [string]$Username,
        [string]$Password,
        [string]$Version,
        [string]$ProjectKey,
        [System.Uri]$GetVersionsAPIURL,
        [System.Uri]$CreateVersionAPIURL          
    );

    $query = $IssueUri.AbsoluteUri
    $uri = [System.Uri] $query
\t
    $versionuri = $GetVersionsAPIURL
    $createversionuri = $CreateVersionAPIURL
       
    $versions = Jira-GetVersions -VersionsUri $versionuri -Username $Username -Password $Password
               
    $match = $versions | Where name -eq $Version | Select -First 1   
    
    If ($match -ne $null)
    {                      
\t\t$body = \"{ \"\"update\"\" : { \"\"fixVersions\"\" : [ {\"\"add\"\" : {\"\"name\"\" : \"\"$Version\"\"} } ] } }\"
        Jira-PostUpdate -IssueUri $uri -Body $body -Username $Username -Password $Password      
    }    
    else
    {
    \t$body = \"{ \"\"name\"\": \"\"$Version\"\",\t\"\"project\"\": \"\"$ProjectKey\"\"}\"
     \tJira-CreateVersion -Query $createversionuri -Body $body -Username $Username -Password $Password
        
        $body = \"{ \"\"update\"\" : { \"\"fixVersions\"\" : [ {\"\"add\"\" : {\"\"name\"\" : \"\"$Version\"\"} } ] } }\"
        Jira-PostUpdate -IssueUri $uri -Body $body -Username $Username -Password $Password  
    }
}

function Jira-UpdateTickets
{
    Param (
        [Uri]$BaseUri,
        [string]$Username,
        [string]$Password,
        [string]$Jql,
        [string]$Version,
        [string]$ProjectKey,
        [System.Uri]$GetVersionsAPIURL,
        [System.Uri]$CreateVersionAPIURL        
    );

    $api = New-Object -TypeName System.Uri -ArgumentList $BaseUri, (\"/rest/api/2/search?jql=\" + $Jql)
    $json = Jira-QueryApi -Query $api -Username $Username -Password $Password

    If ($json.total -eq 0)
    {
        Write-Output \"No issues were found that matched your query : $Jql\"
    }
    Else
    {
        ForEach ($issue in $json.issues)
        {
            Jira-UpdateTicket -BaseUri $BaseUri -IssueUri $issue.self -Version $Version -Username $Username -Password $Password -ProjectKey $ProjectKey -GetVersionsAPIURL $GetVersionsAPIURL -CreateVersionAPIURL $CreateVersionAPIURL
        }
    }
}

& {
    param(
        [System.Uri]$Uri,
        [string]$Jql,
        [string]$Version,
        [string]$User,
        [string]$Password,
        [string]$ProjectKey,
        [System.Uri]$GetVersionsAPIURL,
        [System.Uri]$CreateVersionAPIURL
    )

    Write-Host \"JIRA - Update Version Number\"
    Write-Host \" Updating Fix Versions to : $Version\"

    try     {
        Jira-UpdateTickets -BaseUri $Uri -Jql $Jql -Version $Version -Username $User -Password $Password -ProjectKey $ProjectKey -GetVersionsAPIURL $GetVersionsAPIURL -CreateVersionAPIURL $CreateVersionAPIURL
    } catch {
        Write-Host -ForegroundColor Red \"An error occurred while attempting to update Fix Versions in JIRA issues\"
        Write-Host -ForegroundColor Red $_.Exception | Format-List -Force
    }
} `
(Get-Param \"Jira.Version.Url\" -Required) `
(Get-Param \"Jira.Version.Query\" -Required) `
(Get-Param \"Jira.Version.Name\" -Required) `
(Get-Param \"Jira.Version.Username\" -Required) `
(Get-Param \"Jira.Version.Password\" -Required) `
(Get-Param \"Jira.Version.ProjectKey\" -Required) `
(Get-Param \"Jira.Version.GetVersionsAPIURL\" -Required) `
(Get-Param \"Jira.Version.CreateVersionAPIURL\" -Required)
"
  },
  "Parameters": [
    {
      "Id": "4f231879-328a-4ea0-986c-aa6a2abf8e40",
      "Name": "Jira.Version.Url",
      "Label": "JIRA URL",
      "HelpText": "The base URL of the JIRA Server (e.g. https://company.atlassian.net)",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "b16ac5da-e984-4f46-8cbd-793401be3a9b",
      "Name": "Jira.Version.Username",
      "Label": "Username",
      "HelpText": "The username of the account that will be used to update Jira ticket. The account should have sufficient permissions in JIRA to update ticket.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "056b87ba-930c-4607-81e4-557503daa237",
      "Name": "Jira.Version.Password",
      "Label": "Password",
      "HelpText": "The password of the account.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Id": "458dcb98-1843-41c7-bf22-c451a18aa693",
      "Name": "Jira.Version.Name",
      "Label": "Version",
      "HelpText": "The version that needs to updated to Fix Versions field in Jira ticket. If the version is not found, a new version will be created under respective project",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "d7f0fddd-9518-4070-9c78-166b2dc67197",
      "Name": "Jira.Version.Query",
      "Label": "JQL",
      "HelpText": "The JIRA query that should be used to select issues that will be updated with Fix Versions (e.g. status = Completed AND Status = \"Ready for Test Deploy\")",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "30334b2e-db2f-4a3e-878b-511686a58c9f",
      "Name": "Jira.Version.ProjectKey",
      "Label": "Project Key",
      "HelpText": "The project where version to be created",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "d858e2de-4dcc-4b1f-bd56-f0cb4d11b347",
      "Name": "Jira.Version.GetVersionsAPIURL",
      "Label": "Get Versions API URL",
      "HelpText": "API URL to get all the versions from a particular project.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "9747a96d-788e-45c7-816c-ee1bf91a6665",
      "Name": "Jira.Version.CreateVersionAPIURL",
      "Label": "Create Version API URL",
      "HelpText": "API URL to create version on a particular project.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LastModifiedOn": "2021-07-26T16:50:00.000+00:00",
  "LastModifiedBy": "bobjwalker",
  "$Meta": {
    "ExportedAt": "2019-03-26T19:05:07.140Z",
    "OctopusVersion": "2018.10.2",
    "Type": "ActionTemplate"
  }
}
