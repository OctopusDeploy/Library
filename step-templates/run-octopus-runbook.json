{
    "Id": "0444b0b3-088e-4689-b755-112d1360ffe3",
    "Name": "Run Octopus Deploy Runbook",
    "Description": "This step will kick off a runbook.  Right now it has two limitations. \n\n1) The runbook will start right away.  \n2) It can pass values for prompted variables to the runbook.  But those variables have to be text or sensitive variables.  Variable types such as AWS or Azure accounts will not work.\n\nThis step should be called from a worker machine.  If it is called from a target and the runbook runs on the same target you run the risk of deadlocking.\n\n",
    "ActionType": "Octopus.Script",
    "Version": 11,
    "Author": "octopusbob",
    "Packages": [],
    "Properties": {
      "Octopus.Action.Script.ScriptSource": "Inline",
      "Octopus.Action.Script.ScriptBody": "[Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls12\n\n# Octopus Variables\n$octopusSpaceId = $OctopusParameters[\"Octopus.Space.Id\"]\n$parentTaskId = $OctopusParameters[\"Octopus.Task.Id\"]\n$parentReleaseId = $OctopusParameters[\"Octopus.Release.Id\"]\n$parentChannelId = $OctopusParameters[\"Octopus.Release.Channel.Id\"]\n$parentEnvironmentId = $OctopusParameters[\"Octopus.Environment.Id\"]\n$parentRunbookId = $OctopusParameters[\"Octopus.Runbook.Id\"]\n$parentEnvironmentName = $OctopusParameters[\"Octopus.Environment.Name\"]\n$parentReleaseNumber = $OctopusParameters[\"Octopus.Release.Number\"]\n\n# Step Template Parameters\n$runbookRunName = $OctopusParameters[\"Run.Runbook.Name\"]\n$runbookBaseUrl = $OctopusParameters[\"Run.Runbook.Base.Url\"]\n$runbookApiKey = $OctopusParameters[\"Run.Runbook.Api.Key\"]\n$runbookEnvironmentName = $OctopusParameters[\"Run.Runbook.Environment.Name\"]\n$runbookTenantName = $OctopusParameters[\"Run.Runbook.Tenant.Name\"]\n$runbookWaitForFinish = $OctopusParameters[\"Run.Runbook.Waitforfinish\"]\n$runbookUseGuidedFailure = $OctopusParameters[\"Run.Runbook.UseGuidedFailure\"]\n$runbookUsePublishedSnapshot = $OctopusParameters[\"Run.Runbook.UsePublishedSnapShot\"]\n$runbookPromptedVariables = $OctopusParameters[\"Run.Runbook.PromptedVariables\"]\n$runbookCancelInSeconds = $OctopusParameters[\"Run.Runbook.CancelInSeconds\"]\n$runbookProjectName = $OctopusParameters[\"Run.Runbook.Project.Name\"]\n\n$runbookSpaceName = $OctopusParameters[\"Run.Runbook.Space.Name\"]\n$runbookFutureDeploymentDate = $OctopusParameters[\"Run.Runbook.DateTime\"]\n$targetSpecificMachines = $OctopusParameters[\"Run.Runbook.TargetSpecificMachines\"]\n$runbookMachines = $OctopusParameters[\"Run.Runbook.Machines\"]\n$autoApproveRunbookRunManualInterventions = $OctopusParameters[\"Run.Runbook.AutoApproveManualInterventions\"]\n$approvalEnvironmentName = $OctopusParameters[\"Run.Runbook.ManualIntervention.EnvironmentToUse\"]\n\nfunction Write-OctopusVerbose {\n    param($message)\n\n    Write-Verbose $message\n}\n\nfunction Write-OctopusInformation {\n    param($message)\n\n    Write-Host $message\n}\n\nfunction Write-OctopusSuccess {\n    param($message)\n\n    Write-Highlight $message\n}\n\nfunction Write-OctopusWarning {\n    param($message)\n\n    Write-Warning \"$message\"\n}\n\nfunction Write-OctopusCritical {\n    param ($message)\n\n    Write-Error \"$message\"\n}\n\nfunction Invoke-OctopusApi {\n    param\n    (\n        $octopusUrl,\n        $endPoint,\n        $spaceId,\n        $apiKey,\n        $method,\n        $item\n    )\n\n    if ([string]::IsNullOrWhiteSpace($SpaceId)) {\n        $url = \"$OctopusUrl/api/$EndPoint\"\n    } else {\n        $url = \"$OctopusUrl/api/$spaceId/$EndPoint\"\n    }\n\n    try {\n        if ($null -eq $item) {\n            Write-OctopusVerbose \"No data to post or put, calling bog standard invoke-restmethod for $url\"\n            return Invoke-RestMethod -Method $method -Uri $url -Headers @{\"X-Octopus-ApiKey\" = \"$ApiKey\" } -ContentType 'application/json; charset=utf-8'\n        }\n\n        $body = $item | ConvertTo-Json -Depth 10\n        Write-OctopusVerbose $body\n\n        Write-OctopusInformation \"Invoking $method $url\"\n        return Invoke-RestMethod -Method $method -Uri $url -Headers @{\"X-Octopus-ApiKey\" = \"$ApiKey\" } -Body $body -ContentType 'application/json; charset=utf-8'\n    } catch {\n        if ($null -ne $_.Exception.Response) {\n            if ($_.Exception.Response.StatusCode -eq 401) {\n                Write-OctopusCritical \"Unauthorized error returned from $url, please verify API key and try again\"\n            } elseif ($_.Exception.Response.statusCode -eq 403) {\n                Write-OctopusCritical \"Forbidden error returned from $url, please verify API key and try again\"\n            } else {\n                Write-OctopusVerbose -Message \"Error calling $url $($_.Exception.Message) StatusCode: $($_.Exception.Response.StatusCode )\"\n            }\n        } else {\n            Write-OctopusVerbose $_.Exception\n        }\n    }\n\n    Throw \"There was an error calling the Octopus API please check the log for more details\"\n}\n\nfunction Test-RequiredValues {\n    param (\n        $variableToCheck,\n        $variableName\n    )\n\n    if ([string]::IsNullOrWhiteSpace($variableToCheck) -eq $true) {\n        Write-OctopusCritical \"$variableName is required.\"\n        return $false\n    }\n\n    return $true\n}\n\nfunction GetCheckBoxBoolean {\n    param (\n        [string]$Value\n    )\n\n    if ([string]::IsNullOrWhiteSpace($value) -eq $true) {\n        return $false\n    }\n\n    return $value -eq \"True\"\n}\n\nfunction Get-FilteredOctopusItem {\n    param(\n        $itemList,\n        $itemName\n    )\n\n    if ($itemList.Items.Count -eq 0) {\n        Write-OctopusCritical \"Unable to find $itemName.  Exiting with an exit code of 1.\"\n        Exit 1\n    }\n\n    $item = $itemList.Items | Where-Object { $_.Name -eq $itemName }\n\n    if ($null -eq $item) {\n        Write-OctopusCritical \"Unable to find $itemName.  Exiting with an exit code of 1.\"\n        exit 1\n    }\n\n    if ($item -is [array]) {\n        Write-OctopusCritical \"More than one item exists with the name $itemName.  Exiting with an exit code of 1.\"\n        exit 1\n    }\n\n    return $item\n}\n\nfunction Get-OctopusItemFromListEndpoint {\n    param(\n        $endpoint,\n        $itemNameToFind,\n        $itemType,\n        $defaultUrl,\n        $octopusApiKey,\n        $spaceId,\n        $defaultValue\n    )\n\n    if ([string]::IsNullOrWhiteSpace($itemNameToFind)) {\n        return $defaultValue\n    }\n\n    Write-OctopusInformation \"Attempting to find $itemType with the name of $itemNameToFind\"\n\n    $itemList = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"$($endpoint)?partialName=$([uri]::EscapeDataString($itemNameToFind))&skip=0&take=100\" -spaceId $spaceId -apiKey $octopusApiKey -method \"GET\"\n    $item = Get-FilteredOctopusItem -itemList $itemList -itemName $itemNameToFind\n\n    Write-OctopusInformation \"Successfully found $itemNameToFind with id of $($item.Id)\"\n\n    return $item\n}\n\nfunction Get-MachineIdsFromMachineNames {\n    param (\n        $targetMachines,\n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey\n    )\n\n    $targetMachineList = $targetMachines -split \",\"\n    $translatedList = @()\n\n    foreach ($machineName in $targetMachineList) {\n        Write-OctopusVerbose \"Translating $machineName to an Id.  First checking to see if it is already an Id.\"\n        if ($machineName.Trim() -like \"Machines*\") {\n            Write-OctopusVerbose \"$machineName is already an Id, no need to look that up.\"\n            $translatedList += $machineName\n            continue\n        }\n\n        $machineObject = Get-OctopusItemFromListEndpoint -itemNameToFind $machineName.Trim() -itemType \"Deployment Target\" -endpoint \"machines\" -defaultValue $null -spaceId $spaceId -defaultUrl $defaultUrl -octopusApiKey $octopusApiKey\n\n        $translatedList += $machineObject.Id\n    }\n\n    return $translatedList\n}\n\nfunction Get-RunbookSnapshotIdToRun {\n    param (\n        $runbookToRun,\n        $runbookUsePublishedSnapshot,\n        $defaultUrl,\n        $octopusApiKey,\n        $spaceId\n    )\n\n    $runbookSnapShotIdToUse = $runbookToRun.PublishedRunbookSnapshotId\n    Write-OctopusInformation \"The last published snapshot for $runbookRunName is $runbookSnapShotIdToUse\"\n\n    if ($null -eq $runbookSnapShotIdToUse -and $runbookUsePublishedSnapshot -eq $true) {\n        Write-OctopusCritical \"Use Published Snapshot was set; yet the runbook doesn't have a published snapshot.  Exiting\"\n        Exit 1\n    }\n\n    if ($runbookUsePublishedSnapshot -eq $true) {\n        Write-OctopusInformation \"Use published snapshot set to true, using the published runbook snapshot\"\n        return $runbookSnapShotIdToUse\n    }\n\n    Write-OctopusInformation \"Use published snapshot set to false, finding the most recent snapshot\"\n    $snapshotList = Invoke-OctopusApi -octopusUrl $defaultUrl -apiKey $octopusApiKey -spaceId $spaceId -endPoint \"runbooks/$($runbookToRun.Id)/runbookSnapshots?skip=0&take=10\" -method \"Get\" -item $null\n\n    if ($snapshotList.Items.Count -le 0) {\n        Write-OctopusCritical \"Unable to find any snapshots to use for this runbook, exiting\"\n        exit 1\n    }\n\n    $runbookSnapShotIdToUse = $snapShotList.Items[0].Id\n    Write-OctopusInformation \"The most recent snapshot for $runbookRunName is $runbookSnapShotIdToUse\"\n\n    return $runbookSnapShotIdToUse\n}\n\nfunction Get-ProjectSlug {\n    param\n    (\n        $runbookToRun,\n        $projectToUse,\n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey\n    )\n\n    if ($null -ne $projectToUse) {\n        return $projectToUse.Slug\n    }\n\n    $project = Invoke-OctopusApi -octopusUrl $defaultUrl -spaceId $spaceId -apiKey $octopusApiKey -endPoint \"projects/$($runbookToRun.ProjectId)\" -method \"GET\" -item $null\n\n    return $project.Slug\n}\n\nfunction Get-RunbookFormValues {\n    param (\n        $runbookPreview,\n        $runbookPromptedVariables\n    )\n\n    $runbookFormValues = @{}\n\n    if ([string]::IsNullOrWhiteSpace($runbookPromptedVariables) -eq $true) {\n        return $runbookFormValues\n    }\n\n    $promptedValueList = @(($runbookPromptedVariables -Split \"`n\").Trim())\n    Write-OctopusInformation $promptedValueList.Length\n\n    foreach ($element in $runbookPreview.Form.Elements) {\n        $nameToSearchFor = $element.Control.Name\n        $uniqueName = $element.Name\n        $isRequired = $element.Control.Required\n\n        $promptedVariablefound = $false\n\n        Write-OctopusInformation \"Looking for the prompted variable value for $nameToSearchFor\"\n        foreach ($promptedValue in $promptedValueList) {\n            $splitValue = $promptedValue -Split \"::\"\n            Write-OctopusInformation \"Comparing $nameToSearchFor with provided prompted variable $($promptedValue[0])\"\n            if ($splitValue.Length -gt 1) {\n                if ($nameToSearchFor -eq $splitValue[0]) {\n                    Write-OctopusInformation \"Found the prompted variable value $nameToSearchFor\"\n                    $runbookFormValues[$uniqueName] = $splitValue[1]\n                    $promptedVariableFound = $true\n                    break\n                }\n            }\n        }\n\n        if ($promptedVariableFound -eq $false -and $isRequired -eq $true) {\n            Write-OctopusCritical \"Unable to find a value for the required prompted variable $nameToSearchFor, exiting\"\n            Exit 1\n        }\n    }\n\n    return $runbookFormValues\n}\n\nfunction Invoke-OctopusDeployRunbook {\n    param (\n        $runbookBody,\n        $runbookWaitForFinish,\n        $runbookCancelInSeconds,\n        $projectNameForUrl,\n        $defaultUrl,\n        $octopusApiKey,\n        $spaceId,\n        $parentTaskApprovers,\n        $autoApproveRunbookRunManualInterventions,\n        $parentProjectName,\n        $parentReleaseNumber,\n        $approvalEnvironmentName,\n        $parentRunbookId,\n        $parentTaskId\n    )\n\n    $runbookResponse = Invoke-OctopusApi -octopusUrl $defaultUrl -spaceId $spaceId -apiKey $octopusApiKey -item $runbookBody -method \"POST\" -endPoint \"runbookRuns\"\n\n    $runbookServerTaskId = $runBookResponse.TaskId\n    Write-OctopusInformation \"The task id of the new task is $runbookServerTaskId\"\n\n    $runbookRunId = $runbookResponse.Id\n    Write-OctopusInformation \"The runbook run id is $runbookRunId\"\n\n    Write-OctopusSuccess \"Runbook was successfully invoked, you can access the launched runbook [here]($defaultUrl/app#/$spaceId/projects/$projectNameForUrl/operations/runbooks/$($runbookBody.RunbookId)/snapshots/$($runbookBody.RunbookSnapShotId)/runs/$runbookRunId)\"\n\n    if ($runbookWaitForFinish -eq $false) {\n        Write-OctopusInformation \"The wait for finish setting is set to no, exiting step\"\n        return\n    }\n\n    if ($null -ne $runbookBody.QueueTime) {\n        Write-OctopusInformation \"The runbook queue time is set.  Exiting step\"\n        return\n    }\n\n    Write-OctopusSuccess \"The setting to wait for completion was set, waiting until task has finished\"\n    $startTime = Get-Date\n    $currentTime = Get-Date\n    $dateDifference = $currentTime - $startTime\n\n    $taskStatusUrl = \"tasks/$runbookServerTaskId\"\n    $numberOfWaits = 0\n\n    While ($dateDifference.TotalSeconds -lt $runbookCancelInSeconds) {\n        Write-OctopusInformation \"Waiting 5 seconds to check status\"\n        Start-Sleep -Seconds 5\n        $taskStatusResponse = Invoke-OctopusApi -octopusUrl $defaultUrl -spaceId $spaceId -apiKey $octopusApiKey -endPoint $taskStatusUrl -method \"GET\" -item $null\n        $taskStatusResponseState = $taskStatusResponse.State\n\n        if ($taskStatusResponseState -eq \"Success\") {\n            Write-OctopusSuccess \"The task has finished with a status of Success\"\n            exit 0\n        } elseif ($taskStatusResponseState -eq \"Failed\" -or $taskStatusResponseState -eq \"Canceled\") {\n            Write-OctopusSuccess \"The task has finished with a status of $taskStatusResponseState status, stopping the run/deployment\"\n            exit 1\n        } elseif ($taskStatusResponse.HasPendingInterruptions -eq $true) {\n            if ($autoApproveRunbookRunManualInterventions -eq \"Yes\") {\n                Submit-RunbookRunForAutoApproval -createdRunbookRun $createdRunbookRun -parentTaskApprovers $parentTaskApprovers -defaultUrl $DefaultUrl -octopusApiKey $octopusApiKey -spaceId $spaceId -parentProjectName $parentProjectName -parentReleaseNumber $parentReleaseNumber -parentEnvironmentName $approvalEnvironmentName -parentRunbookId $parentRunbookId -parentTaskId $parentTaskId\n            } else {\n                if ($numberOfWaits -ge 10) {\n                    Write-OctopusSuccess \"The child project has pending manual intervention(s).  Unless you approve it, this task will time out.\"\n                } else {\n                    Write-OctopusInformation \"The child project has pending manual intervention(s).  Unless you approve it, this task will time out.\"\n                }\n            }\n        }\n\n        $numberOfWaits += 1\n        if ($numberOfWaits -ge 10) {\n            Write-OctopusSuccess \"The task state is currently $taskStatusResponseState\"\n            $numberOfWaits = 0\n        } else {\n            Write-OctopusInformation \"The task state is currently $taskStatusResponseState\"\n        }\n\n        $startTime = $taskStatusResponse.StartTime\n        if ($startTime -eq $null -or [string]::IsNullOrWhiteSpace($startTime) -eq $true) {\n            Write-OctopusInformation \"The task is still queued, let's wait a bit longer\"\n            $startTime = Get-Date\n        }\n        $startTime = [DateTime]$startTime\n\n        $currentTime = Get-Date\n        $dateDifference = $currentTime - $startTime\n    }\n\n    Write-OctopusSuccess \"The cancel timeout has been reached, cancelling the runbook run\"\n    $cancelResponse = Invoke-RestMethod \"$runbookBaseUrl/api/tasks/$runbookServerTaskId/cancel\" -Headers $header -Method Post\n    Write-OctopusSuccess \"Exiting with an error code of 1 because we reached the timeout\"\n    exit 1\n}\n\nfunction Get-QueueDate {\n    param (\n        $futureDeploymentDate\n    )\n\n    if ([string]::IsNullOrWhiteSpace($futureDeploymentDate) -or $futureDeploymentDate -eq \"N/A\") {\n        return $null\n    }\n\n    [datetime]$outputDate = New-Object DateTime\n    $currentDate = Get-Date\n\n    if ([datetime]::TryParse($futureDeploymentDate, [ref]$outputDate) -eq $false) {\n        Write-OctopusCritical \"The suppplied date $futureDeploymentDate cannot be parsed by DateTime.TryParse.  Please verify format and try again.  Please [refer to Microsoft's Documentation](https://docs.microsoft.com/en-us/dotnet/api/system.datetime.tryparse) on supported formats.\"\n        exit 1\n    }\n\n    if ($currentDate -gt $outputDate) {\n        Write-OctopusCritical \"The supplied date $futureDeploymentDate is set for the past.  All queued deployments must be in the future.\"\n        exit 1\n    }\n\n    return $outputDate\n}\n\nfunction Get-QueueExpiryDate {\n    param (\n        $queueDate\n    )\n\n    if ($null -eq $queueDate) {\n        return $null\n    }\n\n    return $queueDate.AddHours(1)\n}\n\nfunction Get-RunbookSpecificMachines {\n    param (\n        $runbookPreview,\n        $runbookMachines,\n        $runbookRunName,\n        $targetSpecificMachines\n    )\n\n    if ($targetSpecificMachines -eq \"No\") {\n        return @()\n    }\n\n    if ($runbookMachines -eq \"N/A\") {\n        return @()\n    }\n\n    if ([string]::IsNullOrWhiteSpace($runbookMachines) -eq $true) {\n        return @()\n    }\n\n    $translatedList = Get-MachineIdsFromMachineNames -defaultUrl $defaultUrl -octopusApiKey $octopusApiKey -spaceId $spaceId -targetMachines $runbookMachines\n\n    $filteredList = @()\n    foreach ($runbookMachine in $translatedList) {\n        $runbookMachineId = $runbookMachine.Trim().ToLower()\n        Write-OctopusVerbose \"Checking if $runbookMachineId is set to run on any of the runbook steps\"\n\n        foreach ($step in $runbookPreview.StepsToExecute) {\n            foreach ($machine in $step.Machines) {\n                Write-OctopusVerbose \"Checking if $runbookMachineId matches $($machine.Id) and it isn't already in the $($filteredList -join \",\")\"\n                if ($runbookMachineId -eq $machine.Id.Trim().ToLower() -and $filteredList -notcontains $machine.Id) {\n                    Write-OctopusInformation \"Adding $($machine.Id) to the list\"\n                    $filteredList += $machine.Id\n                }\n            }\n        }\n    }\n\n    if ($filteredList.Length -le 0 -and $targetSpecificMachines -eq \"Yes\") {\n        Write-OctopusSuccess \"The current task is targeting specific machines and target specific machines parameter is set to Yes.  The runbook $runBookRunName does not run against any of these machines $runbookMachines. Skipping this run.\"\n        exit 0\n    }\n\n    return $filteredList\n}\n\nfunction Get-ParentTaskApprovers {\n    param (\n        $parentTaskId,\n        $spaceId,\n        $defaultUrl,\n        $octopusApiKey\n    )\n\n    $approverList = @()\n    if ($null -eq $parentTaskId) {\n        Write-OctopusInformation \"The deployment task id to pull the approvers from is null, return an empty approver list\"\n        return $approverList\n    }\n\n    Write-OctopusInformation \"Getting all the events from the parent project\"\n    $parentEvents = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"events?regardingAny=$parentTaskId&spaces=$spaceId&includeSystem=true\" -apiKey $octopusApiKey -method \"GET\"\n\n    foreach ($parentEvent in $parentEvents.Items) {\n        Write-OctopusVerbose \"Checking $($parentEvent.Message) for manual intervention\"\n        if ($parentEvent.Message -like \"Submitted interruption*\") {\n            Write-OctopusVerbose \"The event $($parentEvent.Id) is a manual intervention approval event which was approved by $($parentEvent.Username).\"\n\n            $approverExists = $approverList | Where-Object { $_.Id -eq $parentEvent.UserId }\n\n            if ($null -eq $approverExists) {\n                $approverInformation = @{\n                    Id       = $parentEvent.UserId;\n                    Username = $parentEvent.Username;\n                    Teams    = @()\n                }\n\n                $approverInformation.Teams = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"teammembership?userId=$($approverInformation.Id)&spaces=$spaceId&includeSystem=true\" -apiKey $octopusApiKey -method \"GET\"\n\n                Write-OctopusVerbose \"Adding $($approverInformation.Id) to the approval list\"\n                $approverList += $approverInformation\n            }\n        }\n    }\n\n    return $approverList\n}\n\nfunction Get-ApprovalTaskIdFromDeployment {\n    param (\n        $parentReleaseId,\n        $approvalEnvironment,\n        $parentChannelId,\n        $parentEnvironmentId,\n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey\n    )\n\n    $releaseDeploymentList = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"releases/$parentReleaseId/deployments\" -method \"GET\" -apiKey $octopusApiKey -spaceId $spaceId\n\n    $lastDeploymentTime = $(Get-Date).AddYears(-50)\n    $approvalTaskId = $null\n    foreach ($deployment in $releaseDeploymentList.Items) {\n        if ($deployment.EnvironmentId -ne $approvalEnvironment.Id) {\n            Write-OctopusInformation \"The deployment $($deployment.Id) deployed to $($deployment.EnvironmentId) which doesn't match $($approvalEnvironment.Id).\"\n            continue\n        }\n\n        Write-OctopusInformation \"The deployment $($deployment.Id) was deployed to the approval environment $($approvalEnvironment.Id).\"\n\n        $deploymentTask = Invoke-OctopusApi -octopusUrl $defaultUrl -spaceId $null -endPoint \"tasks/$($deployment.TaskId)\" -apiKey $octopusApiKey -Method \"Get\"\n        if ($deploymentTask.IsCompleted -eq $true -and $deploymentTask.FinishedSuccessfully -eq $false) {\n            Write-Information \"The deployment $($deployment.Id) was deployed to the approval environment, but it encountered a failure, moving onto the next deployment.\"\n            continue\n        }\n\n        if ($deploymentTask.StartTime -gt $lastDeploymentTime) {\n            $approvalTaskId = $deploymentTask.Id\n            $lastDeploymentTime = $deploymentTask.StartTime\n        }\n    }\n\n    if ($null -eq $approvalTaskId) {\n        Write-OctopusVerbose \"Unable to find a deployment to the environment, determining if it should've happened already.\"\n        $channelInformation = Invoke-OctopusApi -octopusUrl $defaultUrl -endPoint \"channels/$parentChannelId\" -method \"GET\" -apiKey $octopusApiKey -spaceId $spaceId\n        $lifecycle = Get-OctopusLifeCycle -channel $channelInformation -defaultUrl $defaultUrl -spaceId $spaceId -OctopusApiKey $octopusApiKey\n        $lifecyclePhases = Get-LifecyclePhases -lifecycle $lifecycle -defaultUrl $defaultUrl -spaceId $spaceid -OctopusApiKey $octopusApiKey\n\n        $foundDestinationFirst = $false\n        $foundApprovalFirst = $false\n\n        foreach ($phase in $lifecyclePhases.Phases) {\n            if ($phase.AutomaticDeploymentTargets -contains $parentEnvironmentId -or $phase.OptionalDeploymentTargets -contains $parentEnvironmentId) {\n                if ($foundApprovalFirst -eq $false) {\n                    $foundDestinationFirst = $true\n                }\n            }\n\n            if ($phase.AutomaticDeploymentTargets -contains $approvalEnvironment.Id -or $phase.OptionalDeploymentTargets -contains $approvalEnvironment.Id) {\n                if ($foundDestinationFirst -eq $false) {\n                    $foundApprovalFirst = $true\n                }\n            }\n        }\n\n        $messageToLog = \"Unable to find a deployment for the environment $approvalEnvironmentName.  Auto approvals are disabled.\"\n        if ($foundApprovalFirst -eq $true) {\n            Write-OctopusWarning $messageToLog\n        } else {\n            Write-OctopusInformation $messageToLog\n        }\n\n        return $null\n    }\n\n    return $approvalTaskId\n}\n\nfunction Get-ApprovalTaskIdFromRunbook {\n    param (\n        $parentRunbookId,\n        $approvalEnvironment,\n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey\n    )\n}\n\nfunction Get-ApprovalTaskId {\n    param (\n        $autoApproveRunbookRunManualInterventions,\n        $parentTaskId,\n        $parentReleaseId,\n        $parentRunbookId,\n        $parentEnvironmentName,\n        $approvalEnvironmentName,\n        $parentChannelId,\n        $parentEnvironmentId,\n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey\n    )\n\n    if ($autoApproveRunbookRunManualInterventions -eq $false) {\n        Write-OctopusInformation \"Auto approvals are disabled, skipping pulling the approval deployment task id\"\n        return $null\n    }\n\n    if ([string]::IsNullOrWhiteSpace($approvalEnvironmentName) -eq $true) {\n        Write-OctopusInformation \"Approval environment not supplied, using the current environment id for approvals.\"\n        return $parentTaskId\n    }\n\n    if ($approvalEnvironmentName.ToLower().Trim() -eq $parentEnvironmentName.ToLower().Trim()) {\n        Write-OctopusInformation \"The approval environment is the same as the current environment, using the current task id $parentTaskId\"\n        return $parentTaskId\n    }\n\n    $approvalEnvironment = Get-OctopusItemFromListEndpoint -itemNameToFind $approvalEnvironmentName -itemType \"Environment\" -defaultUrl $DefaultUrl -spaceId $spaceId -octopusApiKey $octopusApiKey -defaultValue $null -endpoint \"environments\"\n\n    if ([string]::IsNullOrWhiteSpace($parentReleaseId) -eq $false) {\n        return Get-ApprovalTaskIdFromDeployment -parentReleaseId $parentReleaseId -approvalEnvironment $approvalEnvironment -parentChannelId $parentChannelId -parentEnvironmentId $parentEnvironmentId -defaultUrl $defaultUrl -octopusApiKey $octopusApiKey -spaceId $spaceId\n    }\n\n    return Get-ApprovalTaskIdFromRunbook -parentRunbookId $parentRunbookId -approvalEnvironment $approvalEnvironment -defaultUrl $defaultUrl -spaceId $spaceId -octopusApiKey $octopusApiKey\n}\n\nfunction Get-OctopusLifecycle {\n    param (\n        $channel,\n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey\n    )\n\n    Write-OctopusInformation \"Attempting to find the lifecycle information $($channel.Name)\"\n    if ($null -eq $channel.LifecycleId) {\n        $lifecycleName = \"Default Lifecycle\"\n        $lifecycleList = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"lifecycles?partialName=$([uri]::EscapeDataString($lifecycleName))&skip=0&take=1\" -spaceId $spaceId -apiKey $octopusApiKey -method \"GET\"\n        $lifecycle = $lifecycleList.Items[0]\n    } else {\n        $lifecycle = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"lifecycles/$($channel.LifecycleId)\" -spaceId $spaceId -apiKey $octopusApiKey -method \"GET\"\n    }\n\n    Write-Host \"Successfully found the lifecycle $($lifecycle.Name) to use for this channel.\"\n\n    return $lifecycle\n}\n\nfunction Get-LifecyclePhases {\n    param (\n        $lifecycle,\n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey\n    )\n\n    Write-OctopusInformation \"Attempting to find the phase in the lifecycle $($lifecycle.Name) with the environment $environmentName to find the previous phase.\"\n    if ($lifecycle.Phases.Count -eq 0) {\n        Write-OctopusInformation \"The lifecycle $($lifecycle.Name) has no set phases, calling the preview endpoint.\"\n        $lifecyclePreview = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"lifecycles/$($lifecycle.Id)/preview\" -spaceId $spaceId -apiKey $octopusApiKey -method \"GET\"\n        $phases = $lifecyclePreview.Phases\n    } else {\n        Write-OctopusInformation \"The lifecycle $($lifecycle.Name) has set phases, using those.\"\n        $phases = $lifecycle.Phases\n    }\n\n    Write-OctopusInformation \"Found $($phases.Length) phases in this lifecycle.\"\n    return $phases\n}\n\nfunction Submit-RunbookRunForAutoApproval {\n    param (\n        $createdRunbookRun,\n        $parentTaskApprovers,\n        $defaultUrl,\n        $octopusApiKey,\n        $spaceId,\n        $parentProjectName,\n        $parentReleaseNumber,\n        $parentRunbookId,\n        $parentEnvironmentName,\n        $parentTaskId\n    )\n\n    Write-OctopusSuccess \"The task has a pending manual intervention.  Checking parent approvals.\"\n    $manualInterventionInformation = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"interruptions?regarding=$($createdRunbookRun.TaskId)\" -method \"GET\" -apiKey $octopusApiKey -spaceId $spaceId\n    foreach ($manualIntervention in $manualInterventionInformation.Items) {\n        if ($manualIntervention.IsPending -eq $false) {\n            Write-OctopusInformation \"This manual intervention has already been approved.  Proceeding onto the next one.\"\n            continue\n        }\n\n        if ($manualIntervention.CanTakeResponsibility -eq $false) {\n            Write-OctopusSuccess \"The user associated with the API key doesn't have permissions to take responsibility for the manual intervention.\"\n            Write-OctopusSuccess \"If you wish to leverage the auto-approval functionality give the user permissions.\"\n            continue\n        }\n\n        $automaticApprover = $null\n        Write-OctopusVerbose \"Checking to see if one of the parent project approvers is assigned to one of the manual intervention teams $($manualIntervention.ResponsibleTeamIds)\"\n        foreach ($approver in $parentTaskApprovers) {\n            foreach ($approverTeam in $approver.Teams) {\n                Write-OctopusVerbose \"Checking to see if $($manualIntervention.ResponsibleTeamIds) contains $($approverTeam.TeamId)\"\n                if ($manualIntervention.ResponsibleTeamIds -contains $approverTeam.TeamId) {\n                    $automaticApprover = $approver\n                    break\n                }\n            }\n\n            if ($null -ne $automaticApprover) {\n                break\n            }\n        }\n\n        if ($null -ne $automaticApprover) {\n            Write-OctopusSuccess \"Matching approver found auto-approving.\"\n            if ($manualIntervention.HasResponsibility -eq $false) {\n                Write-OctopusInformation \"Taking over responsibility for this manual intervention.\"\n                $takeResponsiblilityResponse = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"interruptions/$($manualIntervention.Id)/responsible\" -method \"PUT\" -apiKey $octopusApiKey -spaceId $spaceId\n                Write-OctopusVerbose \"Response from taking responsibility $($takeResponsiblilityResponse.Id)\"\n            }\n\n            if ([string]::IsNullOrWhiteSpace($parentReleaseNumber) -eq $false) {\n                $notes = \"Auto-approving this runbook run.  Parent project $parentProjectName release $parentReleaseNumber to $parentEnvironmentName with the task id $parentTaskId was approved by $($automaticApprover.UserName).  That user is a member of one of the teams this manual intervention requires.  You can view that deployment $defaultUrl/app#/$spaceId/tasks/$parentTaskId\"\n            } else {\n                $notes = \"Auto-approving this runbook run.  Parent project $parentProjectName runbook run $parentRunbookId to $parentEnvironmentName with the task id $parentTaskId was approved by $($automaticApprover.UserName).  That user is a member of one of the teams this manual intervention requires.  You can view that runbook run $defaultUrl/app#/$spaceId/tasks/$parentTaskId\"\n            }\n\n            $submitApprovalBody = @{\n                Instructions = $null;\n                Notes        = $notes\n                Result       = \"Proceed\"\n            }\n            $submitResult = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"interruptions/$($manualIntervention.Id)/submit\" -method \"POST\" -apiKey $octopusApiKey -item $submitApprovalBody -spaceId $spaceId\n            Write-OctopusSuccess \"Successfully auto approved the manual intervention $($submitResult.Id)\"\n        } else {\n            Write-OctopusSuccess \"Couldn't find an approver to auto-approve the child project.  Waiting until timeout or child project is approved.\"\n        }\n    }\n}\n\n\n$runbookWaitForFinish = GetCheckboxBoolean -Value $runbookWaitForFinish\n$runbookUseGuidedFailure = GetCheckboxBoolean -Value $runbookUseGuidedFailure\n$runbookUsePublishedSnapshot = GetCheckboxBoolean -Value $runbookUsePublishedSnapshot\n$runbookCancelInSeconds = [int]$runbookCancelInSeconds\n\nWrite-OctopusInformation \"Wait for Finish Before Check: $runbookWaitForFinish\"\nWrite-OctopusInformation \"Use Guided Failure Before Check: $runbookUseGuidedFailure\"\nWrite-OctopusInformation \"Use Published Snapshot Before Check: $runbookUsePublishedSnapshot\"\nWrite-OctopusInformation \"Runbook Name $runbookRunName\"\nWrite-OctopusInformation \"Runbook Base Url: $runbookBaseUrl\"\nWrite-OctopusInformation \"Runbook Space Name: $runbookSpaceName\"\nWrite-OctopusInformation \"Runbook Environment Name: $runbookEnvironmentName\"\nWrite-OctopusInformation \"Runbook Tenant Name: $runbookTenantName\"\nWrite-OctopusInformation \"Wait for Finish: $runbookWaitForFinish\"\nWrite-OctopusInformation \"Use Guided Failure: $runbookUseGuidedFailure\"\nWrite-OctopusInformation \"Cancel run in seconds: $runbookCancelInSeconds\"\nWrite-OctopusInformation \"Use Published Snapshot: $runbookUsePublishedSnapshot\"\nWrite-OctopusInformation \"Target specific machines: $targetSpecificMachines\"\nWrite-OctopusInformation \"Auto Approve Runbook Run Manual Interventions: $autoApproveRunbookRunManualInterventions\"\nWrite-OctopusInformation \"Auto Approve environment name to pull approvals from: $approvalEnvironmentName\"\n\nWrite-OctopusInformation \"Octopus runbook run machines: $runbookMachines\"\nWrite-OctopusInformation \"Parent Task Id: $parentTaskId\"\nWrite-OctopusInformation \"Parent Release Id: $parentReleaseId\"\nWrite-OctopusInformation \"Parent Channel Id: $parentChannelId\"\nWrite-OctopusInformation \"Parent Environment Id: $parentEnvironmentId\"\nWrite-OctopusInformation \"Parent Runbook Id: $parentRunbookId\"\nWrite-OctopusInformation \"Parent Environment Name: $parentEnvironmentName\"\nWrite-OctopusInformation \"Parent Release Number: $parentReleaseNumber\"\n\n$verificationPassed = @()\n$verificationPassed += Test-RequiredValues -variableToCheck $runbookRunName -variableName \"Runbook Name\"\n$verificationPassed += Test-RequiredValues -variableToCheck $runbookBaseUrl -variableName \"Base Url\"\n$verificationPassed += Test-RequiredValues -variableToCheck $runbookApiKey -variableName \"Api Key\"\n$verificationPassed += Test-RequiredValues -variableToCheck $runbookEnvironmentName -variableName \"Environment Name\"\n\nif ($verificationPassed -contains $false) {\n    Write-OctopusInformation \"Required values missing\"\n    Exit 1\n}\n\n$runbookSpace = Get-OctopusItemFromListEndpoint -itemNameToFind $runbookSpaceName -endpoint \"spaces\" -spaceId $null -octopusApiKey $runbookApiKey -defaultUrl $runbookBaseUrl -itemType \"Space\" -defaultValue $octopusSpaceId\n$runbookSpaceId = $runbookSpace.Id\n\n$projectToUse = Get-OctopusItemFromListEndpoint -itemNameToFind $runbookProjectName -endpoint \"projects\" -spaceId $runbookSpaceId -defaultValue $null -itemType \"Project\" -octopusApiKey $runbookApiKey -defaultUrl $runbookBaseUrl\nif ($null -ne $projectToUse) {\n    $runbookEndPoint = \"projects/$($projectToUse.Id)/runbooks\"\n} else {\n    $runbookEndPoint = \"runbooks\"\n}\n\n$environmentToUse = Get-OctopusItemFromListEndpoint -itemNameToFind $runbookEnvironmentName -itemType \"Environment\" -defaultUrl $runbookBaseUrl -spaceId $runbookSpaceId -octopusApiKey $runbookApiKey -defaultValue $null -endpoint \"environments\"\n\n$runbookToRun = Get-OctopusItemFromListEndpoint -itemNameToFind $runbookRunName -itemType \"Runbook\" -defaultUrl $runbookBaseUrl -spaceId $runbookSpaceId -endpoint $runbookEndPoint -octopusApiKey $runbookApiKey -defaultValue $null\n\n$runbookSnapShotIdToUse = Get-RunbookSnapshotIdToRun -runbookToRun $runbookToRun -runbookUsePublishedSnapshot $runbookUsePublishedSnapshot -defaultUrl $runbookBaseUrl -octopusApiKey $runbookApiKey -spaceId $octopusSpaceId\n$projectNameForUrl = Get-ProjectSlug -projectToUse $projectToUse -runbookToRun $runbookToRun -defaultUrl $runbookBaseUrl -octopusApiKey $runbookApiKey -spaceId $runbookSpaceId\n\n$tenantToUse = Get-OctopusItemFromListEndpoint -itemNameToFind $runbookTenantName -itemType \"Tenant\" -defaultValue $null -spaceId $runbookSpaceId -octopusApiKey $runbookApiKey -endpoint \"tenants\" -defaultUrl $runbookBaseUrl\nif ($null -ne $tenantToUse) {\n    $tenantIdToUse = $tenantToUse.Id\n}\n\n$runBookPreview = Invoke-OctopusApi -octopusUrl $runbookBaseUrl -spaceId $runbookSpaceId -apiKey $runbookApiKey -endPoint \"runbooks/$($runbookToRun.Id)/runbookRuns/preview/$($environmentToUse.Id)/$tenantIdToUse\" -method \"GET\" -item $null\n$childRunbookRunSpecificMachines = Get-RunbookSpecificMachines -runbookPreview $runBookPreview -runbookMachines $runbookMachines -runbookRunName $runbookRunName -targetSpecificMachines $targetSpecificMachines\n$runbookFormValues = Get-RunbookFormValues -runbookPreview $runBookPreview -runbookPromptedVariables $runbookPromptedVariables\n\n$queueDate = Get-QueueDate -futureDeploymentDate $runbookFutureDeploymentDate\n$queueExpiryDate = Get-QueueExpiryDate -queueDate $queueDate\n\n$runbookBody = @{\n    RunbookId                = $($runbookToRun.Id);\n    RunbookSnapShotId        = $runbookSnapShotIdToUse;\n    FrozenRunbookProcessId   = $null;\n    EnvironmentId            = $($environmentToUse.Id);\n    TenantId                 = $tenantIdToUse;\n    SkipActions              = @();\n    QueueTime                = $queueDate;\n    QueueTimeExpiry          = $queueExpiryDate;\n    FormValues               = $runbookFormValues;\n    ForcePackageDownload     = $false;\n    ForcePackageRedeployment = $true;\n    UseGuidedFailure         = $runbookUseGuidedFailure;\n    SpecificMachineIds       = @($childRunbookRunSpecificMachines);\n    ExcludedMachineIds       = @()\n}\n\n$approvalTaskId = Get-ApprovalTaskId -autoApproveRunbookRunManualInterventions $autoApproveRunbookRunManualInterventions -parentTaskId $parentTaskId -parentReleaseId $parentReleaseId -parentRunbookId $parentRunbookId -parentEnvironmentName $parentEnvironmentName -approvalEnvironmentName $approvalEnvironmentName -parentChannelId $parentChannelId -parentEnvironmentId $parentEnvironmentId -defaultUrl $runbookBaseUrl -spaceId $runbookSpaceId -octopusApiKey $runbookApiKey\n$parentTaskApprovers = Get-ParentTaskApprovers -parentTaskId $approvalTaskId -spaceId $runbookSpaceId -defaultUrl $runbookBaseUrl -octopusApiKey $runbookApiKey\n\nInvoke-OctopusDeployRunbook -runbookBody $runbookBody -runbookWaitForFinish $runbookWaitForFinish -runbookCancelInSeconds $runbookCancelInSeconds -projectNameForUrl $projectNameForUrl -defaultUrl $runbookBaseUrl -octopusApiKey $runbookApiKey -spaceId $runbookSpaceId -parentTaskApprovers $parentTaskApprovers -autoApproveRunbookRunManualInterventions $autoApproveRunbookRunManualInterventions -parentProjectName $projectNameForUrl -parentReleaseNumber $parentReleaseNumber -approvalEnvironmentName $approvalEnvironmentName -parentRunbookId $parentRunbookId -parentTaskId $approvalTaskId\n",
      "Octopus.Action.Script.Syntax": "PowerShell"
    },
    "Parameters": [
      {
        "Id": "e9e93cff-973a-4107-afa2-8efa30947979",
        "Name": "Run.Runbook.Name",
        "Label": "Runbook Name",
        "HelpText": "The name of the runbook to run.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "d998db57-3574-4598-81f9-7dd145cab81a",
        "Name": "Run.Runbook.Base.Url",
        "Label": "Base Url",
        "HelpText": "The base URL of your instance, IE https://samples.octopus.app",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "24884bf3-ca1d-4c17-8ee0-017339d6d87e",
        "Name": "Run.Runbook.Api.Key",
        "Label": "Api Key",
        "HelpText": "The API key of a user who has permissions to run the runbook specified",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "Sensitive"
        }
      },
      {
        "Id": "bc2d33fe-d05b-49bd-b02b-eb6de4737eff",
        "Name": "Run.Runbook.Space.Name",
        "Label": "Runbook Space",
        "HelpText": "*Required*\n\nThe name of the space the child project is located in.  Defaults to the current space name",
        "DefaultValue": "#{Octopus.Space.Name}",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "a1f44858-809a-48ce-9127-e59f02be40a1",
        "Name": "Run.Runbook.Project.Name",
        "Label": "Project name",
        "HelpText": "(Optional) The name of the project containing the runbook.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "07bd5b03-4151-4f32-8893-417bf22c4df2",
        "Name": "Run.Runbook.Environment.Name",
        "Label": "Environment Name",
        "HelpText": "Name of environment to run the runbook in",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "bf4ae98a-4901-474a-8984-08b0258304ca",
        "Name": "Run.Runbook.Tenant.Name",
        "Label": "Tenant Name",
        "HelpText": "(Optional) Name of Tenant to run the runbook for",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "9c49ba5c-337b-454a-8837-282353276aea",
        "Name": "Run.Runbook.UsePublishedSnapShot",
        "Label": "Use Published Snapshot",
        "HelpText": "Indicates if the run should use the most recent published snapshot.  When not set it will use the most recent snapshot, regardless if it was published or not.",
        "DefaultValue": "True",
        "DisplaySettings": {
          "Octopus.ControlType": "Checkbox"
        }
      },
      {
        "Id": "1a3e3ff6-456a-49e0-a0ce-83bfb30bfcaa",
        "Name": "Run.Runbook.Waitforfinish",
        "Label": "Wait for finish",
        "HelpText": "Indicates if the process should be paused and wait for the runbook to finish",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "Checkbox"
        }
      },
      {
        "Id": "c36715c5-b583-43c4-b3e3-a74f44f2b2c4",
        "Name": "Run.Runbook.UseGuidedFailure",
        "Label": "Use Guided Failure",
        "HelpText": "Should the runbook run use guided failure (not a good idea if you are waiting for this to finish)",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "Checkbox"
        }
      },
      {
        "Id": "6b951d28-b027-4f16-aaa6-39e91bd906d4",
        "Name": "Run.Runbook.CancelInSeconds",
        "Label": "Cancel Seconds",
        "HelpText": "The number of seconds to wait before cancelling the runbook run.  Default is 1800 seconds (30 minutes).",
        "DefaultValue": "1800",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "c847668d-b4fa-4405-a15b-f03691147597",
        "Name": "Run.Runbook.PromptedVariables",
        "Label": "Prompted Variable Values",
        "HelpText": "Values for any prompted variables for the runbook.  Each new line represents a new variable.  This will only work with string variable types, text and sensitive values.    \n\nUse the format **Name::Value**  IE:\n\n\nPromptedVariableName::My Super Awesome Value\n\nOtherPromptedVariable::Other Super Awesome Value",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "MultiLineText"
        }
      },
      {
        "Id": "dd65f24d-7546-4271-b78b-28101170410c",
        "Name": "Run.Runbook.DateTime",
        "Label": "Scheduling",
        "HelpText": "(Optional) Schedule the runbook to run in the future.  Please note, if this is set, the `Wait for Deployment` option is ignored.\n\nUses `DateTime.TryParse` to determine the value sent in.  Supported formats:\n\n- `7:00 PM` will deploy at 7:00 PM today\n- `21:00` will deploy at 21:00 hours or 9 PM today\n- `YYYY-MM-DD HH:mm:ss` or `2021-01-14 21:00:00` will deploy at 9 PM on the 14th of January, 2021\n- `YYYY/MM/DD HH:mm:ss` or `2021/03/20 22:00:00` will deploy at 10 PM on the 20th of March, 2021\n- `MM/DD/YYYY HH:mm:ss` or `06/25/2021 19:00:00` will deploy at 7 PM on the 25th of June, 2021\n- `DD MMM YYYY HH:mm:ss` or `01 Jan 2021 18:00:00` will deploy at 6 PM on the 1st of January, 2021\n\nUses the Octopus Server's Timezone.  The queue expiry time will be set to 1 hour from the supplied date.\n\nDefault is `N/A` or not applicable.  ",
        "DefaultValue": "N/A",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "d35c9c05-750f-4b6f-8bd3-d823fd503bf1",
        "Name": "Run.Runbook.TargetSpecificMachines",
        "Label": "Target Same machines as current task",
        "HelpText": "The runbook will run against the machines targeted in the list of machines below.  \n\nExamples:\n- The runbook targets servers in the `web-server` role.  All servers have that role.  My application's servers have `web-server` and `my-app-web-server-role`. \n The parent project or runbook target servers in the `my-app-web-server-role`.  \n- A deployment target trigger fires for a newly created machine.  Only 1 out of 5 child projects deploy to that newly created machine's roles.\n- A redeployment needs to occur, but only for a specific machine.  Only 2 out of the 4 child projects deploy to that specific machine's roles. \n- A person elects to run the parent runbook targeting specific machines\n- A person elects to run the parent runbook excluding specific machines   \n\nIn those examples, you probably only want to target the same machines\n\nThe default is `No` which will run the runbook against all the machines.  Setting to `Yes` will filter the machines on the runbook to only run what parent project deployment or runbook run.  \n\nPlease note, if `Yes` AND the runbook doesn't target the same machines as the parent project deployment or parent runbook run then the runbook will be skipped.",
        "DefaultValue": "No",
        "DisplaySettings": {
          "Octopus.ControlType": "Select",
          "Octopus.SelectOptions": "No|No\nYes|Yes"
        }
      },
      {
        "Id": "22158e31-8061-4ada-b61b-a7bdacb5dd37",
        "Name": "Run.Runbook.Machines",
        "Label": "Machine List",
        "HelpText": "(Optional)\n\nA comma-separated list of Machine Ids or Machine Names to target with this runbook.  \n\n**Please Note:** The step template will remove any machines that cannot be found or are not applicable to the runbook.\n\nThe default is `#{Octopus.Deployment.Machines}`.  Set to an empty string or `N/A` will skip this functionality.",
        "DefaultValue": "#{Octopus.Deployment.Machines}",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "95788fe2-f770-460c-b012-e6a586fe04d7",
        "Name": "Run.Runbook.AutoApproveManualInterventions",
        "Label": "Auto approve runbook manual interventions",
        "HelpText": "If the child project has manual interventions the step will look for manual interventions in the parent project or parent runbook.\n\nWhen a manual intervention in the parent project or parent runbook is found it will check that user's assigned teams.  If that user's assigned teams can approve the child project it will do so.\n\nPlease note, the user associated with the API key must be able to approve the child project manual interventions as well.  \n\nThe default is `No`, allow this to happen.  Set it to `Yes` to enable this functionality.",
        "DefaultValue": "No",
        "DisplaySettings": {
          "Octopus.ControlType": "Select",
          "Octopus.SelectOptions": "No|No\nYes|Yes"
        }
      },
      {
        "Id": "b1cd0181-c5a8-4d4d-9746-f7cfe41f6794",
        "Name": "Run.Runbook.ManualIntervention.EnvironmentToUse",
        "Label": "Environment name to pull approvals from",
        "HelpText": "(Optional) The name of the environment you wish to pull the approvals from for the parent project or parent runbook.   It will look at all the deployments for the current release of the parent project and select the latest deployment to the specified environment.  If this step is being called from a runbook, it will look at the latest runbook run for the environment specified\n\nUsed when you are deploying to `Production` but want to pull the approvals from `Staging` or a `Prod Approval` environment.\n\nDefaults to the current environment name.",
        "DefaultValue": "#{Octopus.Environment.Name}",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      }
    ],
    "LastModifiedBy": "BobJWalker",
    "$Meta": {
      "ExportedAt": "2021-05-14T14:45:32.602Z",
      "OctopusVersion": "2020.6.4701",
      "Type": "ActionTemplate"
    },
    "Category": "octopus"
  }
