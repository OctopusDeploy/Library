{
    "Id": "5d5bd3ae-09a0-41ac-9a45-42a96ee6206a",
    "Name": "AWS Secrets Manager - Retrieve Secrets",
    "Description": "This step retrieves one or more secrets from AWS [Secrets Manager](https://aws.amazon.com/secrets-manager) and creates [sensitive output variables](https://octopus.com/docs/projects/variables/output-variables#sensitive-output-variables) for each value retrieved. The step supports creating a variable for each key-value in a secret that's retrieved, or you can specify individual keys. These values can be used in other steps in your deployment or runbook process.

---

**Specifying Secret names/keys to retrieve:**

Specify the names of the secrets to be returned from AWS Secrets Manager, in the format:

`SecretName SecretVersionId SecretVersionStage | KeyNames | OutputVariableName` where:

- `SecretName` is the name of the secret to retrieve. You can specify either the `Amazon Resource Name (ARN)` or the friendly name of the secret.
- `SecretVersionId` is the unique identifier of the version of the secret that you want to retrieve. If this value isn't specified, the version with the `VersionStage` value as specified in `SecretVersionStage` will be retrieved.
- `SecretVersionStage` specifies the secret version that you want to retrieve by the staging label attached to the version. *Staging labels are used to keep track of different versions during the rotation process*. If this value isn't specified, the version with the `VersionStage` value of `AWSCURRENT` will be retrieved.
- `KeyNames` are the names of the keys stored in the secret that you wish to retrieve values for. Multiple fields can be retrieved separated by a space. Alternatively, you can specify all fields using the special keyword `all` or `*`.
- `OutputVariableName` is the _optional_ Octopus [output variable](https://octopus.com/docs/projects/variables/output-variables) name to store the secret's value in. If multiple fields are specified the field name will be appended to this value. *If this value isn't specified, an output name will be generated dynamically*.

**Examples:**

Given a secret named `OctoSamples-usercredentials`:

1. `OctoSamples-usercredentials | Username | octousername`
   
   This would retrieve the secret and extract the value from the key-value named `Username` and save it into a sensitive output variable named `octousername`.

2. `OctoSamples-usercredentials | Username Password | octocreds`
   
   This would retrieve the secret named `OctoSamples-usercredentials`, and then extract the values from the key-values named `Username` and `Password` and save them to two sensitive output variables named `octocreds.Username` and `octocreds.Password`.

3. `OctoSamples-usercredentials | * | octocreds`
   
   This would retrieve the secret named `OctoSamples-usercredentials`, and then extract all key-values from the secret and save them to sensitive output variables *prefixed* with `octocreds`.

4. `OctoSamples-usercredentials | all`
   
   This would retrieve the secret named `OctoSamples-usercredentials`, and then extract all key-values from the secret and save them to sensitive output variables *prefixed* with `OctoSamples-usercredentials`.

---

**AWS Dependencies:**

There are some dependencies/requirements for this step to work successfully.

1. **CLI** - This step uses AWS tooling pre-installed on the target or worker. 

    Scripts executed in this step need to use the [AWS CLI](https://aws.amazon.com/cli/) to authenticate to AWS and perform other actions. If the CLI can't be found, the step will fail.

2. **AWS Account** - An [AWS account](https://octopus.com/docs/infrastructure/accounts/aws) with permissions to retrieve secrets from AWS Secrets Manager is also required.

---

**Notes:** 
- Tested on Octopus **2021.2**.
- Tested on both Windows Server 2019 and Ubuntu 20.04.

",
    "ActionType": "Octopus.AwsRunScript",
    "Version": 4,
    "CommunityActionTemplateId": null,
    "Packages": [],
    "Properties": {
      "Octopus.Action.Script.ScriptSource": "Inline",
      "Octopus.Action.Script.Syntax": "PowerShell",
      "Octopus.Action.Aws.AssumeRole": "False",
      "Octopus.Action.AwsAccount.UseInstanceRole": "False",
      "OctopusUseBundledTooling": "False",
      "Octopus.Action.Script.ScriptBody": "$ErrorActionPreference = 'Stop'

# Variables
$SecretNames = $OctopusParameters[\"AWS.SecretsManager.RetrieveSecrets.SecretNames\"]
$PrintVariableNames = $OctopusParameters[\"AWS.SecretsManager.RetrieveSecrets.PrintVariableNames\"]

# Validation
if ([string]::IsNullOrWhiteSpace($SecretNames)) {
    throw \"Required parameter AWS.SecretsManager.RetrieveSecrets.SecretNames not specified\"
}

# Functions
function Format-SecretName {
    [CmdletBinding()]
    Param(
        [string] $Name,
        [string] $VersionId,
        [string] $VersionStage,
        [string[]] $Keys
    )
    $displayName = \"'$Name'\"
    if (![string]::IsNullOrWhiteSpace($VersionId)) {
        $displayName += \" $VersionId\"
    }
    if (![string]::IsNullOrWhiteSpace($VersionStage)) {
        $displayName += \" $VersionStage\"
    }
    if ($Keys.Count -gt 0) {
        $displayName += \" ($($Keys -Join \",\"))\"
    }
    return $displayName
}

function Save-OctopusVariable {
    Param(
        [string] $name,
        [string] $value
    )
    if ($script:storedVariables -icontains $name) {
        Write-Warning \"A variable with name '$name' has already been created. Check your secret name parameters as this will likely cause unexpected behavior and should be investigated.\"
    }
    Set-OctopusVariable -Name $name -Value $value -Sensitive
    $script:storedVariables += $name

    if ($PrintVariableNames -eq $True) {
        Write-Host \"Created output variable: ##{Octopus.Action[$StepName].Output.$name}\"
    }
}

# End Functions

$script:storedVariables = @()
$StepName = $OctopusParameters[\"Octopus.Step.Name\"]
$Secrets = @()

# Extract secret names
@(($SecretNames -Split \"`n\").Trim()) | ForEach-Object {
    if (![string]::IsNullOrWhiteSpace($_)) {
        Write-Verbose \"Working establishing secret definition for: '$_'\"
        $secretDefinition = ($_ -Split \"\\|\")
        
        # Establish the secret name/version requirements
        $secretName = $secretDefinition[0].Trim()
        $secretVersionId = \"\"
        $secretVersionStage = \"\"
        $secretNameAndVersion = ($secretName -Split \" \")
        
        if ($secretNameAndVersion.Count -gt 1) {
            $secretName = $secretNameAndVersion[0].Trim()
            $secretVersionId = $secretNameAndVersion[1].Trim()
            if ($secretNameAndVersion.Count -eq 3) {
                $secretVersionStage = $secretNameAndVersion[2].Trim()
            }
        }
    
        if ([string]::IsNullOrWhiteSpace($secretName)) {
            throw \"Unable to establish secret name from: '$($_)'\"
        }

        # Establish the secret field(s)/output variable name requirements.
        $VariableName = \"\"
        $Keys = @()
        if ($secretDefinition.Count -gt 1) {
            $KeyNames = $secretDefinition[1].Trim()        
            $Keys = @(($KeyNames -Split \" \"))
            $EmptyKeys = $Keys | Where-Object { [string]::IsNullOrWhiteSpace($_) }
            if ($Keys.Count -le 0 -or $EmptyKeys.Count -gt 0) {
                throw \"No keys (field names) were specified for '$_'. To retrieve all keys in a secret, add the word ALL or the wildcard (*) character.\"    
            }
            
            if ($secretDefinition.Count -gt 2) {
                $VariableName = $secretDefinition[2].Trim()
            }
        }
        else {
            throw \"No keys (field names) were specified for '$_'. To retrieve all keys in a secret, add the word ALL or the wildcard (*) character.\"
        }

        $secret = [PsCustomObject]@{
            Name                 = $secretName
            SecretVersionId      = $secretVersionId
            SecretVersionStage   = $secretVersionStage
            Keys                 = $Keys
            variableNameOrPrefix = $VariableName
        }
        $Secrets += $secret
    }
}

Write-Verbose \"Secrets to retrieve: $($Secrets.Count)\"
Write-Verbose \"Print variables: $PrintVariableNames\"

$retrievedSecrets = @{}

# Retrieve Secrets
foreach ($secret in $secrets) {
    $name = $secret.Name
    $versionId = $secret.SecretVersionId
    $versionStage = $secret.SecretVersionStage
    $variableNameOrPrefix = $secret.variableNameOrPrefix
    $keys = $secret.Keys
    
    # Should we extract only specified keys, or all values?
    $SpecifiedKeys = $True
    if ($keys.Count -eq 1 -and ($keys[0] -ieq \"all\" -or $keys[0] -ieq \"*\")) {
        $SpecifiedKeys = $False
    }
    
    $displayName = Format-SecretName -Name $name -VersionId $versionId -VersionStage $versionStage -Keys $keys
    Write-Verbose \"Retrieving Secret $displayName\"
    $_secretIdentifier = \"$name\"

    $params = @(\"--secret-id $name\")
    if (![string]::IsNullOrWhiteSpace($versionId)) {
        $params += \"--version-id $versionId\"
        $_secretIdentifier += \"_$versionId\"
    }
    if (![string]::IsNullOrWhiteSpace($versionStage)) {
        $params += \"--version-stage $versionStage\"
        $_secretIdentifier += \"_$versionStage\"
    }
    
    # Check to see if we've already retrieved this secret value to save on requests
    if (-not $retrievedSecrets.ContainsKey($_secretIdentifier)) {
        $command = \"aws secretsmanager get-secret-value $($params -Join \" \")\"
        Write-Verbose \"Invoking command: $command\"
        $response = Invoke-Expression -Command $command
        if ([string]::IsNullOrWhiteSpace($response)) {
            throw \"Error: Secret $displayName not found or has no versions.\"
        }
        Write-Verbose \"Added secret to retrieved collection ($_secretIdentifier)\"
        $retrievedSecrets.Add($_secretIdentifier, $response)
    }
    else {
        Write-Verbose \"Rehydrating previously stored secret ($_secretIdentifier) instead of calling AWS.\"
        $response = $retrievedSecrets.$_secretIdentifier
    }    
    
    try {
        $AwsSecret = $response | ConvertFrom-Json
        $AwsSecretValue = $AwsSecret.SecretString | ConvertFrom-Json
        $secretKeyValues = $AwsSecretValue | Get-Member | Where-Object { $_.MemberType -eq \"NoteProperty\" } | Select-Object -ExpandProperty \"Name\"
    }
    catch {
        Write-Error \"Error converting JSON value returned from AWS for $displayName.`n`nIf secret value is stored as JSON in Plaintext (vs Key/value), check contents validity\"
    }
    if ($SpecifiedKeys -eq $True) {
        foreach ($keyName in $keys) {
            $variableName = $variableNameOrPrefix
            if ([string]::IsNullOrWhiteSpace($variableName)) {
                $variableName = \"$($name.Trim())\"
            }
            if ($keys.Count -gt 1) {
                $variableName += \".$keyName\"
            }
            if ($secretKeyValues -inotcontains $keyName) {
                throw \"Key '$keyName' not found in AWS Secret: $name.\"
            }
            $variableValue = $AwsSecretValue.$keyName
            Save-OctopusVariable -Name $variableName -Value $variableValue            
        }
    }
    else {
        foreach ($secretKeyValueName in $secretKeyValues) {
            $variableName = $variableNameOrPrefix
            if ([string]::IsNullOrWhiteSpace($variableName)) {
                $variableName = \"$($name.Trim())\"
            }
            if ($secretKeyValues.Count -gt 1) {
                $variableName += \".$secretKeyValueName\"
            }
            $variableValue = $AwsSecretValue.$secretKeyValueName
            Save-OctopusVariable -Name $variableName -Value $variableValue
        }
    }
}

Write-Host \"Created $($script:storedVariables.Count) output variables\"",
      "Octopus.Action.AwsAccount.Variable": "#{AWS.SecretsManager.RetrieveSecrets.Account}",
      "Octopus.Action.Aws.Region": "#{AWS.SecretsManager.RetrieveSecrets.Region}"
    },
    "Parameters": [
      {
        "Id": "8623cdbe-f962-4801-9470-5d14d1d7d5ed",
        "Name": "AWS.SecretsManager.RetrieveSecrets.Account",
        "Label": "AWS Account",
        "HelpText": "An AWS account with permissions to access secrets from Secrets Manager.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "AmazonWebServicesAccount"
        }
      },
      {
        "Id": "55a1d3e8-90c8-4c1a-a315-246fd8660e81",
        "Name": "AWS.SecretsManager.RetrieveSecrets.Region",
        "Label": "AWS Region",
        "HelpText": "Specify the default region. View the [AWS Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region) documentation for a current list of the available region codes.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "e204a03d-80a6-437a-9a8b-8812c299741c",
        "Name": "AWS.SecretsManager.RetrieveSecrets.SecretNames",
        "Label": "Secret names to retrieve",
        "HelpText": "Specify the names of the secrets to be returned from AWS Secrets Manager, in the format:

`SecretName SecretVersionId SecretVersionStage | KeyNames | OutputVariableName` where:

- `SecretName` is the name of the secret to retrieve. You can specify either the `Amazon Resource Name (ARN)` or the friendly name of the secret.
- `SecretVersionId` is the unique identifier of the version of the secret that you want to retrieve. If this value isn't specified, the version with the `VersionStage` value as specified in `SecretVersionStage` will be retrieved.
- `SecretVersionStage` specifies the secret version that you want to retrieve by the staging label attached to the version. *Staging labels are used to keep track of different versions during the rotation process*. If this value isn't specified, the version with the `VersionStage` value of `AWSCURRENT` will be retrieved.
- `KeyNames` are the names of the keys stored in the secret that you wish to retrieve values for. Multiple fields can be retrieved separated by a space. Alternatively, you can specify all fields using the special keyword `all` or `*`. *See the step description for examples*.
- `OutputVariableName` is the _optional_ Octopus [output variable](https://octopus.com/docs/projects/variables/output-variables) name to store the secret's value in. If multiple fields are specified the field name will be appended to this value. *If this value isn't specified, an output name will be generated dynamically*.

**Note:** Multiple fields can be retrieved by entering each one on a new line.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "MultiLineText"
        }
      },
      {
        "Id": "17ba53a4-bf94-498c-8905-0d37b86eaeea",
        "Name": "AWS.SecretsManager.RetrieveSecrets.PrintVariableNames",
        "Label": "Print output variable names",
        "HelpText": "Write out the Octopus [output variable](https://octopus.com/docs/projects/variables/output-variables) names to the task log. Default: `False`.",
        "DefaultValue": "False",
        "DisplaySettings": {
          "Octopus.ControlType": "Checkbox"
        }
      }
    ],
    "StepPackageId": "Octopus.AwsRunScript",
    "$Meta": {
      "ExportedAt": "2023-04-22T17:43:19.580Z",
      "OctopusVersion": "2023.2.6614",
      "Type": "ActionTemplate"
    },
    "LastModifiedBy": "harrisonmeister",
    "Category": "aws"
  }
